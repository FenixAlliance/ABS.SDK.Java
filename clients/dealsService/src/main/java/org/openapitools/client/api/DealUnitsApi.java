/*
 * DealsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DealUnitCreateDto;
import org.openapitools.client.model.DealUnitDtoEnvelope;
import org.openapitools.client.model.DealUnitDtoListEnvelope;
import org.openapitools.client.model.DealUnitLineCreateDto;
import org.openapitools.client.model.DealUnitLineDtoEnvelope;
import org.openapitools.client.model.DealUnitLineDtoListEnvelope;
import org.openapitools.client.model.DealUnitLineUpdateDto;
import org.openapitools.client.model.DealUnitUpdateDto;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedDealUnitDtoEnvelope;
import org.openapitools.client.model.ExtendedDealUnitDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DealUnitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DealUnitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DealUnitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2DealsServiceDealUnitsCountGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsCountGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsCountGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsCountGet(Async)");
        }

        return apiV2DealsServiceDealUnitsCountGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2DealsServiceDealUnitsCountGet(UUID tenantId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2DealsServiceDealUnitsCountGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2DealsServiceDealUnitsCountGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsCountGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsCountGetAsync(UUID tenantId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsCountGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdCalculatePut
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdCalculatePutCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Calculate"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdCalculatePutValidateBeforeCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdCalculatePut(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdCalculatePut(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdCalculatePutCall(tenantId, dealUnitId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdCalculatePut(UUID tenantId, UUID dealUnitId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo(tenantId, dealUnitId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdCalculatePutWithHttpInfo(UUID tenantId, UUID dealUnitId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdCalculatePutValidateBeforeCall(tenantId, dealUnitId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdCalculatePutAsync(UUID tenantId, UUID dealUnitId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdCalculatePutValidateBeforeCall(tenantId, dealUnitId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdDelete
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdDeleteCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdDeleteValidateBeforeCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdDelete(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdDelete(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdDeleteCall(tenantId, dealUnitId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdDelete(UUID tenantId, UUID dealUnitId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo(tenantId, dealUnitId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdDeleteWithHttpInfo(UUID tenantId, UUID dealUnitId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdDeleteValidateBeforeCall(tenantId, dealUnitId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdDeleteAsync(UUID tenantId, UUID dealUnitId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdDeleteValidateBeforeCall(tenantId, dealUnitId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdExtendedGet
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdExtendedGetCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Extended"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdExtendedGetValidateBeforeCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdExtendedGet(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdExtendedGet(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdExtendedGetCall(tenantId, dealUnitId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ExtendedDealUnitDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedDealUnitDtoEnvelope apiV2DealsServiceDealUnitsDealUnitIdExtendedGet(UUID tenantId, UUID dealUnitId) throws ApiException {
        ApiResponse<ExtendedDealUnitDtoEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo(tenantId, dealUnitId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ApiResponse&lt;ExtendedDealUnitDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedDealUnitDtoEnvelope> apiV2DealsServiceDealUnitsDealUnitIdExtendedGetWithHttpInfo(UUID tenantId, UUID dealUnitId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdExtendedGetValidateBeforeCall(tenantId, dealUnitId, null);
        Type localVarReturnType = new TypeToken<ExtendedDealUnitDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdExtendedGetAsync(UUID tenantId, UUID dealUnitId, final ApiCallback<ExtendedDealUnitDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdExtendedGetValidateBeforeCall(tenantId, dealUnitId, _callback);
        Type localVarReturnType = new TypeToken<ExtendedDealUnitDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetValidateBeforeCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetCall(tenantId, dealUnitId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(UUID tenantId, UUID dealUnitId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo(tenantId, dealUnitId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetWithHttpInfo(UUID tenantId, UUID dealUnitId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetValidateBeforeCall(tenantId, dealUnitId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetAsync(UUID tenantId, UUID dealUnitId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesCountGetValidateBeforeCall(tenantId, dealUnitId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()))
            .replace("{" + "dealUnitLineId" + "}", localVarApiClient.escapeString(dealUnitLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutValidateBeforeCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'dealUnitLineId' is set
        if (dealUnitLineId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitLineId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutCall(tenantId, dealUnitId, dealUnitLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo(tenantId, dealUnitId, dealUnitLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutWithHttpInfo(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutAsync(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()))
            .replace("{" + "dealUnitLineId" + "}", localVarApiClient.escapeString(dealUnitLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteValidateBeforeCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(Async)");
        }

        // verify the required parameter 'dealUnitLineId' is set
        if (dealUnitLineId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitLineId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteCall(tenantId, dealUnitId, dealUnitLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo(tenantId, dealUnitId, dealUnitLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteWithHttpInfo(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteAsync(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()))
            .replace("{" + "dealUnitLineId" + "}", localVarApiClient.escapeString(dealUnitLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetValidateBeforeCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(Async)");
        }

        // verify the required parameter 'dealUnitLineId' is set
        if (dealUnitLineId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitLineId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetCall(tenantId, dealUnitId, dealUnitLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return DealUnitLineDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DealUnitLineDtoEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        ApiResponse<DealUnitLineDtoEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo(tenantId, dealUnitId, dealUnitLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @return ApiResponse&lt;DealUnitLineDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealUnitLineDtoEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetWithHttpInfo(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, null);
        Type localVarReturnType = new TypeToken<DealUnitLineDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetAsync(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, final ApiCallback<DealUnitLineDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, _callback);
        Type localVarReturnType = new TypeToken<DealUnitLineDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param dealUnitLineUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, DealUnitLineUpdateDto dealUnitLineUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealUnitLineUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()))
            .replace("{" + "dealUnitLineId" + "}", localVarApiClient.escapeString(dealUnitLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutValidateBeforeCall(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, DealUnitLineUpdateDto dealUnitLineUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(Async)");
        }

        // verify the required parameter 'dealUnitLineId' is set
        if (dealUnitLineId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitLineId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutCall(tenantId, dealUnitId, dealUnitLineId, dealUnitLineUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param dealUnitLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, DealUnitLineUpdateDto dealUnitLineUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo(tenantId, dealUnitId, dealUnitLineId, dealUnitLineUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param dealUnitLineUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutWithHttpInfo(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, DealUnitLineUpdateDto dealUnitLineUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, dealUnitLineUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineId  (required)
     * @param dealUnitLineUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutAsync(UUID tenantId, UUID dealUnitId, UUID dealUnitLineId, DealUnitLineUpdateDto dealUnitLineUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutValidateBeforeCall(tenantId, dealUnitId, dealUnitLineId, dealUnitLineUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesGet
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param itemId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesGetCall(UUID tenantId, UUID dealUnitId, UUID itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesGetValidateBeforeCall(UUID tenantId, UUID dealUnitId, UUID itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesGet(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesGet(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesGetCall(tenantId, dealUnitId, itemId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param itemId  (optional)
     * @return DealUnitLineDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DealUnitLineDtoListEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesGet(UUID tenantId, UUID dealUnitId, UUID itemId) throws ApiException {
        ApiResponse<DealUnitLineDtoListEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo(tenantId, dealUnitId, itemId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param itemId  (optional)
     * @return ApiResponse&lt;DealUnitLineDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealUnitLineDtoListEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesGetWithHttpInfo(UUID tenantId, UUID dealUnitId, UUID itemId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesGetValidateBeforeCall(tenantId, dealUnitId, itemId, null);
        Type localVarReturnType = new TypeToken<DealUnitLineDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param itemId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesGetAsync(UUID tenantId, UUID dealUnitId, UUID itemId, final ApiCallback<DealUnitLineDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesGetValidateBeforeCall(tenantId, dealUnitId, itemId, _callback);
        Type localVarReturnType = new TypeToken<DealUnitLineDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdLinesPost
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesPostCall(UUID tenantId, UUID dealUnitId, DealUnitLineCreateDto dealUnitLineCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealUnitLineCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesPostValidateBeforeCall(UUID tenantId, UUID dealUnitId, DealUnitLineCreateDto dealUnitLineCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesPost(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdLinesPost(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdLinesPostCall(tenantId, dealUnitId, dealUnitLineCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdLinesPost(UUID tenantId, UUID dealUnitId, DealUnitLineCreateDto dealUnitLineCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo(tenantId, dealUnitId, dealUnitLineCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdLinesPostWithHttpInfo(UUID tenantId, UUID dealUnitId, DealUnitLineCreateDto dealUnitLineCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesPostValidateBeforeCall(tenantId, dealUnitId, dealUnitLineCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitLineCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdLinesPostAsync(UUID tenantId, UUID dealUnitId, DealUnitLineCreateDto dealUnitLineCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdLinesPostValidateBeforeCall(tenantId, dealUnitId, dealUnitLineCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsDealUnitIdPut
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdPutCall(UUID tenantId, UUID dealUnitId, DealUnitUpdateDto dealUnitUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealUnitUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdPutValidateBeforeCall(UUID tenantId, UUID dealUnitId, DealUnitUpdateDto dealUnitUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsDealUnitIdPut(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling apiV2DealsServiceDealUnitsDealUnitIdPut(Async)");
        }

        return apiV2DealsServiceDealUnitsDealUnitIdPutCall(tenantId, dealUnitId, dealUnitUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsDealUnitIdPut(UUID tenantId, UUID dealUnitId, DealUnitUpdateDto dealUnitUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo(tenantId, dealUnitId, dealUnitUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsDealUnitIdPutWithHttpInfo(UUID tenantId, UUID dealUnitId, DealUnitUpdateDto dealUnitUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdPutValidateBeforeCall(tenantId, dealUnitId, dealUnitUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param dealUnitUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsDealUnitIdPutAsync(UUID tenantId, UUID dealUnitId, DealUnitUpdateDto dealUnitUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsDealUnitIdPutValidateBeforeCall(tenantId, dealUnitId, dealUnitUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsExtendedGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsExtendedGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/Extended";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsExtendedGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsExtendedGet(Async)");
        }

        return apiV2DealsServiceDealUnitsExtendedGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ExtendedDealUnitDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedDealUnitDtoListEnvelope apiV2DealsServiceDealUnitsExtendedGet(UUID tenantId) throws ApiException {
        ApiResponse<ExtendedDealUnitDtoListEnvelope> localVarResp = apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;ExtendedDealUnitDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedDealUnitDtoListEnvelope> apiV2DealsServiceDealUnitsExtendedGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsExtendedGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ExtendedDealUnitDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsExtendedGetAsync(UUID tenantId, final ApiCallback<ExtendedDealUnitDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsExtendedGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<ExtendedDealUnitDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsGet(Async)");
        }

        return apiV2DealsServiceDealUnitsGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return DealUnitDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DealUnitDtoListEnvelope apiV2DealsServiceDealUnitsGet(UUID tenantId) throws ApiException {
        ApiResponse<DealUnitDtoListEnvelope> localVarResp = apiV2DealsServiceDealUnitsGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;DealUnitDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealUnitDtoListEnvelope> apiV2DealsServiceDealUnitsGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<DealUnitDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsGetAsync(UUID tenantId, final ApiCallback<DealUnitDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<DealUnitDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2DealsServiceDealUnitsPost
     * @param tenantId  (required)
     * @param dealUnitCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsPostCall(UUID tenantId, DealUnitCreateDto dealUnitCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dealUnitCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2DealsServiceDealUnitsPostValidateBeforeCall(UUID tenantId, DealUnitCreateDto dealUnitCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2DealsServiceDealUnitsPost(Async)");
        }

        return apiV2DealsServiceDealUnitsPostCall(tenantId, dealUnitCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2DealsServiceDealUnitsPost(UUID tenantId, DealUnitCreateDto dealUnitCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2DealsServiceDealUnitsPostWithHttpInfo(tenantId, dealUnitCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2DealsServiceDealUnitsPostWithHttpInfo(UUID tenantId, DealUnitCreateDto dealUnitCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsPostValidateBeforeCall(tenantId, dealUnitCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2DealsServiceDealUnitsPostAsync(UUID tenantId, DealUnitCreateDto dealUnitCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2DealsServiceDealUnitsPostValidateBeforeCall(tenantId, dealUnitCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDealUnitAsync
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDealUnitAsyncCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/DealsService/DealUnits/{dealUnitId}"
            .replace("{" + "dealUnitId" + "}", localVarApiClient.escapeString(dealUnitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDealUnitAsyncValidateBeforeCall(UUID tenantId, UUID dealUnitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getDealUnitAsync(Async)");
        }

        // verify the required parameter 'dealUnitId' is set
        if (dealUnitId == null) {
            throw new ApiException("Missing the required parameter 'dealUnitId' when calling getDealUnitAsync(Async)");
        }

        return getDealUnitAsyncCall(tenantId, dealUnitId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return DealUnitDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DealUnitDtoEnvelope getDealUnitAsync(UUID tenantId, UUID dealUnitId) throws ApiException {
        ApiResponse<DealUnitDtoEnvelope> localVarResp = getDealUnitAsyncWithHttpInfo(tenantId, dealUnitId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @return ApiResponse&lt;DealUnitDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DealUnitDtoEnvelope> getDealUnitAsyncWithHttpInfo(UUID tenantId, UUID dealUnitId) throws ApiException {
        okhttp3.Call localVarCall = getDealUnitAsyncValidateBeforeCall(tenantId, dealUnitId, null);
        Type localVarReturnType = new TypeToken<DealUnitDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param dealUnitId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDealUnitAsyncAsync(UUID tenantId, UUID dealUnitId, final ApiCallback<DealUnitDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDealUnitAsyncValidateBeforeCall(tenantId, dealUnitId, _callback);
        Type localVarReturnType = new TypeToken<DealUnitDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
