/*
 * DealsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DealUnitFlowUpdateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:35:46.834379800-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class DealUnitFlowUpdateDto {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARENT_BUSINESS_PROCESS_ID = "parentBusinessProcessId";
  @SerializedName(SERIALIZED_NAME_PARENT_BUSINESS_PROCESS_ID)
  private String parentBusinessProcessId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_ENROLLMENT_ID = "tenantEnrollmentId";
  @SerializedName(SERIALIZED_NAME_TENANT_ENROLLMENT_ID)
  private String tenantEnrollmentId;

  public DealUnitFlowUpdateDto() {
  }

  public DealUnitFlowUpdateDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DealUnitFlowUpdateDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DealUnitFlowUpdateDto parentBusinessProcessId(String parentBusinessProcessId) {
    this.parentBusinessProcessId = parentBusinessProcessId;
    return this;
  }

  /**
   * Get parentBusinessProcessId
   * @return parentBusinessProcessId
   */
  @javax.annotation.Nullable
  public String getParentBusinessProcessId() {
    return parentBusinessProcessId;
  }

  public void setParentBusinessProcessId(String parentBusinessProcessId) {
    this.parentBusinessProcessId = parentBusinessProcessId;
  }


  public DealUnitFlowUpdateDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public DealUnitFlowUpdateDto tenantEnrollmentId(String tenantEnrollmentId) {
    this.tenantEnrollmentId = tenantEnrollmentId;
    return this;
  }

  /**
   * Get tenantEnrollmentId
   * @return tenantEnrollmentId
   */
  @javax.annotation.Nullable
  public String getTenantEnrollmentId() {
    return tenantEnrollmentId;
  }

  public void setTenantEnrollmentId(String tenantEnrollmentId) {
    this.tenantEnrollmentId = tenantEnrollmentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DealUnitFlowUpdateDto dealUnitFlowUpdateDto = (DealUnitFlowUpdateDto) o;
    return Objects.equals(this.name, dealUnitFlowUpdateDto.name) &&
        Objects.equals(this.description, dealUnitFlowUpdateDto.description) &&
        Objects.equals(this.parentBusinessProcessId, dealUnitFlowUpdateDto.parentBusinessProcessId) &&
        Objects.equals(this.tenantId, dealUnitFlowUpdateDto.tenantId) &&
        Objects.equals(this.tenantEnrollmentId, dealUnitFlowUpdateDto.tenantEnrollmentId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, parentBusinessProcessId, tenantId, tenantEnrollmentId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DealUnitFlowUpdateDto {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parentBusinessProcessId: ").append(toIndentedString(parentBusinessProcessId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantEnrollmentId: ").append(toIndentedString(tenantEnrollmentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("parentBusinessProcessId");
    openapiFields.add("tenantId");
    openapiFields.add("tenantEnrollmentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DealUnitFlowUpdateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DealUnitFlowUpdateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DealUnitFlowUpdateDto is not found in the empty JSON string", DealUnitFlowUpdateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DealUnitFlowUpdateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DealUnitFlowUpdateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("parentBusinessProcessId") != null && !jsonObj.get("parentBusinessProcessId").isJsonNull()) && !jsonObj.get("parentBusinessProcessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentBusinessProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentBusinessProcessId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantEnrollmentId") != null && !jsonObj.get("tenantEnrollmentId").isJsonNull()) && !jsonObj.get("tenantEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantEnrollmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DealUnitFlowUpdateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DealUnitFlowUpdateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DealUnitFlowUpdateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DealUnitFlowUpdateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DealUnitFlowUpdateDto>() {
           @Override
           public void write(JsonWriter out, DealUnitFlowUpdateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DealUnitFlowUpdateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DealUnitFlowUpdateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DealUnitFlowUpdateDto
   * @throws IOException if the JSON string is invalid with respect to DealUnitFlowUpdateDto
   */
  public static DealUnitFlowUpdateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DealUnitFlowUpdateDto.class);
  }

  /**
   * Convert an instance of DealUnitFlowUpdateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

