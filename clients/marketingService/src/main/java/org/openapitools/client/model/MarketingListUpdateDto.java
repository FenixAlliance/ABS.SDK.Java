/*
 * MarketingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MarketingListUpdateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:45.577528700-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class MarketingListUpdateDto {
  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Double cost;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_LAST_USED_ON = "lastUsedOn";
  @SerializedName(SERIALIZED_NAME_LAST_USED_ON)
  private OffsetDateTime lastUsedOn;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_ENROLMENT_ID = "enrolmentId";
  @SerializedName(SERIALIZED_NAME_ENROLMENT_ID)
  private String enrolmentId;

  /**
   * Gets or Sets marketingListType
   */
  @JsonAdapter(MarketingListTypeEnum.Adapter.class)
  public enum MarketingListTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    MarketingListTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketingListTypeEnum fromValue(Integer value) {
      for (MarketingListTypeEnum b : MarketingListTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketingListTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketingListTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketingListTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MarketingListTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MarketingListTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKETING_LIST_TYPE = "marketingListType";
  @SerializedName(SERIALIZED_NAME_MARKETING_LIST_TYPE)
  private MarketingListTypeEnum marketingListType;

  /**
   * Gets or Sets marketingListTarget
   */
  @JsonAdapter(MarketingListTargetEnum.Adapter.class)
  public enum MarketingListTargetEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    MarketingListTargetEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketingListTargetEnum fromValue(Integer value) {
      for (MarketingListTargetEnum b : MarketingListTargetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketingListTargetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketingListTargetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketingListTargetEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MarketingListTargetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MarketingListTargetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARKETING_LIST_TARGET = "marketingListTarget";
  @SerializedName(SERIALIZED_NAME_MARKETING_LIST_TARGET)
  private MarketingListTargetEnum marketingListTarget;

  public MarketingListUpdateDto() {
  }

  public MarketingListUpdateDto locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public MarketingListUpdateDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MarketingListUpdateDto purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

  /**
   * Get purpose
   * @return purpose
   */
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public MarketingListUpdateDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MarketingListUpdateDto source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public MarketingListUpdateDto cost(Double cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }


  public MarketingListUpdateDto modifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

  /**
   * Get modifiedOn
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
  }


  public MarketingListUpdateDto lastUsedOn(OffsetDateTime lastUsedOn) {
    this.lastUsedOn = lastUsedOn;
    return this;
  }

  /**
   * Get lastUsedOn
   * @return lastUsedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsedOn() {
    return lastUsedOn;
  }

  public void setLastUsedOn(OffsetDateTime lastUsedOn) {
    this.lastUsedOn = lastUsedOn;
  }


  public MarketingListUpdateDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public MarketingListUpdateDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public MarketingListUpdateDto enrolmentId(String enrolmentId) {
    this.enrolmentId = enrolmentId;
    return this;
  }

  /**
   * Get enrolmentId
   * @return enrolmentId
   */
  @javax.annotation.Nullable
  public String getEnrolmentId() {
    return enrolmentId;
  }

  public void setEnrolmentId(String enrolmentId) {
    this.enrolmentId = enrolmentId;
  }


  public MarketingListUpdateDto marketingListType(MarketingListTypeEnum marketingListType) {
    this.marketingListType = marketingListType;
    return this;
  }

  /**
   * Get marketingListType
   * @return marketingListType
   */
  @javax.annotation.Nullable
  public MarketingListTypeEnum getMarketingListType() {
    return marketingListType;
  }

  public void setMarketingListType(MarketingListTypeEnum marketingListType) {
    this.marketingListType = marketingListType;
  }


  public MarketingListUpdateDto marketingListTarget(MarketingListTargetEnum marketingListTarget) {
    this.marketingListTarget = marketingListTarget;
    return this;
  }

  /**
   * Get marketingListTarget
   * @return marketingListTarget
   */
  @javax.annotation.Nullable
  public MarketingListTargetEnum getMarketingListTarget() {
    return marketingListTarget;
  }

  public void setMarketingListTarget(MarketingListTargetEnum marketingListTarget) {
    this.marketingListTarget = marketingListTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketingListUpdateDto marketingListUpdateDto = (MarketingListUpdateDto) o;
    return Objects.equals(this.locked, marketingListUpdateDto.locked) &&
        Objects.equals(this.name, marketingListUpdateDto.name) &&
        Objects.equals(this.purpose, marketingListUpdateDto.purpose) &&
        Objects.equals(this.description, marketingListUpdateDto.description) &&
        Objects.equals(this.source, marketingListUpdateDto.source) &&
        Objects.equals(this.cost, marketingListUpdateDto.cost) &&
        Objects.equals(this.modifiedOn, marketingListUpdateDto.modifiedOn) &&
        Objects.equals(this.lastUsedOn, marketingListUpdateDto.lastUsedOn) &&
        Objects.equals(this.currencyId, marketingListUpdateDto.currencyId) &&
        Objects.equals(this.tenantId, marketingListUpdateDto.tenantId) &&
        Objects.equals(this.enrolmentId, marketingListUpdateDto.enrolmentId) &&
        Objects.equals(this.marketingListType, marketingListUpdateDto.marketingListType) &&
        Objects.equals(this.marketingListTarget, marketingListUpdateDto.marketingListTarget);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locked, name, purpose, description, source, cost, modifiedOn, lastUsedOn, currencyId, tenantId, enrolmentId, marketingListType, marketingListTarget);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketingListUpdateDto {\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    lastUsedOn: ").append(toIndentedString(lastUsedOn)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    enrolmentId: ").append(toIndentedString(enrolmentId)).append("\n");
    sb.append("    marketingListType: ").append(toIndentedString(marketingListType)).append("\n");
    sb.append("    marketingListTarget: ").append(toIndentedString(marketingListTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locked");
    openapiFields.add("name");
    openapiFields.add("purpose");
    openapiFields.add("description");
    openapiFields.add("source");
    openapiFields.add("cost");
    openapiFields.add("modifiedOn");
    openapiFields.add("lastUsedOn");
    openapiFields.add("currencyId");
    openapiFields.add("tenantId");
    openapiFields.add("enrolmentId");
    openapiFields.add("marketingListType");
    openapiFields.add("marketingListTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketingListUpdateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketingListUpdateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketingListUpdateDto is not found in the empty JSON string", MarketingListUpdateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketingListUpdateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketingListUpdateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("enrolmentId") != null && !jsonObj.get("enrolmentId").isJsonNull()) && !jsonObj.get("enrolmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrolmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrolmentId").toString()));
      }
      // validate the optional field `marketingListType`
      if (jsonObj.get("marketingListType") != null && !jsonObj.get("marketingListType").isJsonNull()) {
        MarketingListTypeEnum.validateJsonElement(jsonObj.get("marketingListType"));
      }
      // validate the optional field `marketingListTarget`
      if (jsonObj.get("marketingListTarget") != null && !jsonObj.get("marketingListTarget").isJsonNull()) {
        MarketingListTargetEnum.validateJsonElement(jsonObj.get("marketingListTarget"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketingListUpdateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketingListUpdateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketingListUpdateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketingListUpdateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketingListUpdateDto>() {
           @Override
           public void write(JsonWriter out, MarketingListUpdateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketingListUpdateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketingListUpdateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketingListUpdateDto
   * @throws IOException if the JSON string is invalid with respect to MarketingListUpdateDto
   */
  public static MarketingListUpdateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketingListUpdateDto.class);
  }

  /**
   * Convert an instance of MarketingListUpdateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

