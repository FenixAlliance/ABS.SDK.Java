/*
 * MarketingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.NewsletterCreateDto;
import org.openapitools.client.model.NewsletterDtoEnvelope;
import org.openapitools.client.model.NewsletterUpdateDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NewslettersApi
 */
@Disabled
public class NewslettersApiTest {

    private final NewslettersApi api = new NewslettersApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersCountGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2MarketingServiceNewslettersCountGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        api.apiV2MarketingServiceNewslettersGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersNewsletterIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID newsletterId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2MarketingServiceNewslettersNewsletterIdDelete(tenantId, newsletterId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersNewsletterIdGetTest() throws ApiException {
        UUID tenantId = null;
        UUID newsletterId = null;
        String apiVersion = null;
        String xApiVersion = null;
        NewsletterDtoEnvelope response = api.apiV2MarketingServiceNewslettersNewsletterIdGet(tenantId, newsletterId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersNewsletterIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID newsletterId = null;
        NewsletterUpdateDto newsletterUpdateDto = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2MarketingServiceNewslettersNewsletterIdPut(tenantId, newsletterId, newsletterUpdateDto, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2MarketingServiceNewslettersPostTest() throws ApiException {
        UUID tenantId = null;
        NewsletterCreateDto newsletterCreateDto = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2MarketingServiceNewslettersPost(tenantId, newsletterCreateDto, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
