/*
 * PricingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.ItemPriceCreateDto;
import org.openapitools.client.model.ItemPriceDtoEnvelope;
import org.openapitools.client.model.ItemPriceDtoListEnvelope;
import org.openapitools.client.model.ItemPriceUpdateDto;
import org.openapitools.client.model.PriceListCreateDto;
import org.openapitools.client.model.PriceListDtoEnvelope;
import org.openapitools.client.model.PriceListDtoListEnvelope;
import org.openapitools.client.model.PriceListUpdateDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PriceListsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PriceListsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PriceListsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2PricingServicePriceListsCountGet
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsCountGetCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsCountGetValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsCountGet(Async)");
        }

        return apiV2PricingServicePriceListsCountGetCall(tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2PricingServicePriceListsCountGet(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2PricingServicePriceListsCountGetWithHttpInfo(tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2PricingServicePriceListsCountGetWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsCountGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsCountGetAsync(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsCountGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsGet
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsGetCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsGetValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsGet(Async)");
        }

        return apiV2PricingServicePriceListsGetCall(tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return PriceListDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PriceListDtoListEnvelope apiV2PricingServicePriceListsGet(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<PriceListDtoListEnvelope> localVarResp = apiV2PricingServicePriceListsGetWithHttpInfo(tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;PriceListDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PriceListDtoListEnvelope> apiV2PricingServicePriceListsGetWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<PriceListDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsGetAsync(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<PriceListDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<PriceListDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPost
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPostCall(UUID tenantId, String apiVersion, String xApiVersion, PriceListCreateDto priceListCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = priceListCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPostValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, PriceListCreateDto priceListCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPost(Async)");
        }

        return apiV2PricingServicePriceListsPostCall(tenantId, apiVersion, xApiVersion, priceListCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPost(UUID tenantId, String apiVersion, String xApiVersion, PriceListCreateDto priceListCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPostWithHttpInfo(tenantId, apiVersion, xApiVersion, priceListCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPostWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion, PriceListCreateDto priceListCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPostValidateBeforeCall(tenantId, apiVersion, xApiVersion, priceListCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPostAsync(UUID tenantId, String apiVersion, String xApiVersion, PriceListCreateDto priceListCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPostValidateBeforeCall(tenantId, apiVersion, xApiVersion, priceListCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPriceListIdDelete
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdDeleteCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPriceListIdDeleteValidateBeforeCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPriceListIdDelete(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling apiV2PricingServicePriceListsPriceListIdDelete(Async)");
        }

        return apiV2PricingServicePriceListsPriceListIdDeleteCall(tenantId, priceListId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPriceListIdDelete(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPriceListIdDeleteWithHttpInfo(tenantId, priceListId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPriceListIdDeleteWithHttpInfo(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdDeleteValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdDeleteAsync(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdDeleteValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPriceListIdPricesPost
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPostCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, ItemPriceCreateDto itemPriceCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPriceCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}/Prices"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPostValidateBeforeCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, ItemPriceCreateDto itemPriceCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPriceListIdPricesPost(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling apiV2PricingServicePriceListsPriceListIdPricesPost(Async)");
        }

        return apiV2PricingServicePriceListsPriceListIdPricesPostCall(tenantId, priceListId, apiVersion, xApiVersion, itemPriceCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPriceListIdPricesPost(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, ItemPriceCreateDto itemPriceCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPriceListIdPricesPostWithHttpInfo(tenantId, priceListId, apiVersion, xApiVersion, itemPriceCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPriceListIdPricesPostWithHttpInfo(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, ItemPriceCreateDto itemPriceCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPostValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, itemPriceCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPostAsync(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, ItemPriceCreateDto itemPriceCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPostValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, itemPriceCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}/Prices/{priceId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()))
            .replace("{" + "priceId" + "}", localVarApiClient.escapeString(priceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteValidateBeforeCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete(Async)");
        }

        // verify the required parameter 'priceId' is set
        if (priceId == null) {
            throw new ApiException("Missing the required parameter 'priceId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete(Async)");
        }

        return apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteWithHttpInfo(tenantId, priceListId, priceId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteWithHttpInfo(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteAsync(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, ItemPriceUpdateDto itemPriceUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPriceUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}/Prices/{priceId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()))
            .replace("{" + "priceId" + "}", localVarApiClient.escapeString(priceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutValidateBeforeCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, ItemPriceUpdateDto itemPriceUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut(Async)");
        }

        // verify the required parameter 'priceId' is set
        if (priceId == null) {
            throw new ApiException("Missing the required parameter 'priceId' when calling apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut(Async)");
        }

        return apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, itemPriceUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, ItemPriceUpdateDto itemPriceUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutWithHttpInfo(tenantId, priceListId, priceId, apiVersion, xApiVersion, itemPriceUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutWithHttpInfo(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, ItemPriceUpdateDto itemPriceUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, itemPriceUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param itemPriceUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutAsync(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, ItemPriceUpdateDto itemPriceUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, itemPriceUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PricingServicePriceListsPriceListIdPut
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPutCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, PriceListUpdateDto priceListUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = priceListUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PricingServicePriceListsPriceListIdPutValidateBeforeCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, PriceListUpdateDto priceListUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2PricingServicePriceListsPriceListIdPut(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling apiV2PricingServicePriceListsPriceListIdPut(Async)");
        }

        return apiV2PricingServicePriceListsPriceListIdPutCall(tenantId, priceListId, apiVersion, xApiVersion, priceListUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2PricingServicePriceListsPriceListIdPut(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, PriceListUpdateDto priceListUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2PricingServicePriceListsPriceListIdPutWithHttpInfo(tenantId, priceListId, apiVersion, xApiVersion, priceListUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2PricingServicePriceListsPriceListIdPutWithHttpInfo(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, PriceListUpdateDto priceListUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPutValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, priceListUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param priceListUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PricingServicePriceListsPriceListIdPutAsync(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, PriceListUpdateDto priceListUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PricingServicePriceListsPriceListIdPutValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, priceListUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPriceListAsync
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListAsyncCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceListAsyncValidateBeforeCall(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getPriceListAsync(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling getPriceListAsync(Async)");
        }

        return getPriceListAsyncCall(tenantId, priceListId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return PriceListDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PriceListDtoEnvelope getPriceListAsync(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<PriceListDtoEnvelope> localVarResp = getPriceListAsyncWithHttpInfo(tenantId, priceListId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;PriceListDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PriceListDtoEnvelope> getPriceListAsyncWithHttpInfo(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPriceListAsyncValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<PriceListDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListAsyncAsync(UUID tenantId, UUID priceListId, String apiVersion, String xApiVersion, final ApiCallback<PriceListDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceListAsyncValidateBeforeCall(tenantId, priceListId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<PriceListDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPriceListPriceAsync
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListPriceAsyncCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}/Prices/{priceId}"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()))
            .replace("{" + "priceId" + "}", localVarApiClient.escapeString(priceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceListPriceAsyncValidateBeforeCall(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getPriceListPriceAsync(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling getPriceListPriceAsync(Async)");
        }

        // verify the required parameter 'priceId' is set
        if (priceId == null) {
            throw new ApiException("Missing the required parameter 'priceId' when calling getPriceListPriceAsync(Async)");
        }

        return getPriceListPriceAsyncCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ItemPriceDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ItemPriceDtoEnvelope getPriceListPriceAsync(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<ItemPriceDtoEnvelope> localVarResp = getPriceListPriceAsyncWithHttpInfo(tenantId, priceListId, priceId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;ItemPriceDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemPriceDtoEnvelope> getPriceListPriceAsyncWithHttpInfo(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPriceListPriceAsyncValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<ItemPriceDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param priceId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListPriceAsyncAsync(UUID tenantId, UUID priceListId, UUID priceId, String apiVersion, String xApiVersion, final ApiCallback<ItemPriceDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceListPriceAsyncValidateBeforeCall(tenantId, priceListId, priceId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ItemPriceDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPriceListPricesAsync
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param itemId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListPricesAsyncCall(UUID tenantId, UUID priceListId, UUID itemId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/PricingService/PriceLists/{priceListId}/Prices"
            .replace("{" + "priceListId" + "}", localVarApiClient.escapeString(priceListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceListPricesAsyncValidateBeforeCall(UUID tenantId, UUID priceListId, UUID itemId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getPriceListPricesAsync(Async)");
        }

        // verify the required parameter 'priceListId' is set
        if (priceListId == null) {
            throw new ApiException("Missing the required parameter 'priceListId' when calling getPriceListPricesAsync(Async)");
        }

        return getPriceListPricesAsyncCall(tenantId, priceListId, itemId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param itemId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ItemPriceDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ItemPriceDtoListEnvelope getPriceListPricesAsync(UUID tenantId, UUID priceListId, UUID itemId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<ItemPriceDtoListEnvelope> localVarResp = getPriceListPricesAsyncWithHttpInfo(tenantId, priceListId, itemId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param itemId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;ItemPriceDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemPriceDtoListEnvelope> getPriceListPricesAsyncWithHttpInfo(UUID tenantId, UUID priceListId, UUID itemId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPriceListPricesAsyncValidateBeforeCall(tenantId, priceListId, itemId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<ItemPriceDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param priceListId  (required)
     * @param itemId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPriceListPricesAsyncAsync(UUID tenantId, UUID priceListId, UUID itemId, String apiVersion, String xApiVersion, final ApiCallback<ItemPriceDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceListPricesAsyncValidateBeforeCall(tenantId, priceListId, itemId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<ItemPriceDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
