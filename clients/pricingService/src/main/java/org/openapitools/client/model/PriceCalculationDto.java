/*
 * PricingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Money;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PriceCalculationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:37:07.573626400-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class PriceCalculationDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_UNIT_ID = "unitId";
  @SerializedName(SERIALIZED_NAME_UNIT_ID)
  private String unitId;

  public static final String SERIALIZED_NAME_UNIT_GROUP_ID = "unitGroupId";
  @SerializedName(SERIALIZED_NAME_UNIT_GROUP_ID)
  private String unitGroupId;

  public static final String SERIALIZED_NAME_PRICE_ID = "priceId";
  @SerializedName(SERIALIZED_NAME_PRICE_ID)
  private String priceId;

  public static final String SERIALIZED_NAME_PRICE_LIST_ID = "priceListId";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ID)
  private String priceListId;

  public static final String SERIALIZED_NAME_DISCOUNT_ID = "discountId";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ID)
  private String discountId;

  public static final String SERIALIZED_NAME_DISCOUNT_LIST_ID = "discountListId";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_LIST_ID)
  private String discountListId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_ENROLLMENT_ID = "enrollmentId";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ID)
  private String enrollmentId;

  public static final String SERIALIZED_NAME_ROUNDING_POLICY_ID = "roundingPolicyId";
  @SerializedName(SERIALIZED_NAME_ROUNDING_POLICY_ID)
  private String roundingPolicyId;

  public static final String SERIALIZED_NAME_EFFECTIVE_DISCOUNT_PERCENT = "effectiveDiscountPercent";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DISCOUNT_PERCENT)
  private Double effectiveDiscountPercent;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_TOTAL_BASE_AMOUNT = "totalBaseAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_BASE_AMOUNT)
  private Money totalBaseAmount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNTS_AMOUNT = "totalDiscountsAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNTS_AMOUNT)
  private Money totalDiscountsAmount;

  public static final String SERIALIZED_NAME_TOTAL_SURCHARGES_AMOUNT = "totalSurchargesAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SURCHARGES_AMOUNT)
  private Money totalSurchargesAmount;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING_AMOUNT = "totalShippingAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING_AMOUNT)
  private Money totalShippingAmount;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING_TAX_AMOUNT = "totalShippingTaxAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING_TAX_AMOUNT)
  private Money totalShippingTaxAmount;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT = "totalTaxAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT)
  private Money totalTaxAmount;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Money totalAmount;

  public PriceCalculationDto() {
  }

  public PriceCalculationDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PriceCalculationDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public PriceCalculationDto itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public PriceCalculationDto unitId(String unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * Get unitId
   * @return unitId
   */
  @javax.annotation.Nullable
  public String getUnitId() {
    return unitId;
  }

  public void setUnitId(String unitId) {
    this.unitId = unitId;
  }


  public PriceCalculationDto unitGroupId(String unitGroupId) {
    this.unitGroupId = unitGroupId;
    return this;
  }

  /**
   * Get unitGroupId
   * @return unitGroupId
   */
  @javax.annotation.Nullable
  public String getUnitGroupId() {
    return unitGroupId;
  }

  public void setUnitGroupId(String unitGroupId) {
    this.unitGroupId = unitGroupId;
  }


  public PriceCalculationDto priceId(String priceId) {
    this.priceId = priceId;
    return this;
  }

  /**
   * Get priceId
   * @return priceId
   */
  @javax.annotation.Nullable
  public String getPriceId() {
    return priceId;
  }

  public void setPriceId(String priceId) {
    this.priceId = priceId;
  }


  public PriceCalculationDto priceListId(String priceListId) {
    this.priceListId = priceListId;
    return this;
  }

  /**
   * Get priceListId
   * @return priceListId
   */
  @javax.annotation.Nullable
  public String getPriceListId() {
    return priceListId;
  }

  public void setPriceListId(String priceListId) {
    this.priceListId = priceListId;
  }


  public PriceCalculationDto discountId(String discountId) {
    this.discountId = discountId;
    return this;
  }

  /**
   * Get discountId
   * @return discountId
   */
  @javax.annotation.Nullable
  public String getDiscountId() {
    return discountId;
  }

  public void setDiscountId(String discountId) {
    this.discountId = discountId;
  }


  public PriceCalculationDto discountListId(String discountListId) {
    this.discountListId = discountListId;
    return this;
  }

  /**
   * Get discountListId
   * @return discountListId
   */
  @javax.annotation.Nullable
  public String getDiscountListId() {
    return discountListId;
  }

  public void setDiscountListId(String discountListId) {
    this.discountListId = discountListId;
  }


  public PriceCalculationDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public PriceCalculationDto enrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
    return this;
  }

  /**
   * Get enrollmentId
   * @return enrollmentId
   */
  @javax.annotation.Nullable
  public String getEnrollmentId() {
    return enrollmentId;
  }

  public void setEnrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
  }


  public PriceCalculationDto roundingPolicyId(String roundingPolicyId) {
    this.roundingPolicyId = roundingPolicyId;
    return this;
  }

  /**
   * Get roundingPolicyId
   * @return roundingPolicyId
   */
  @javax.annotation.Nullable
  public String getRoundingPolicyId() {
    return roundingPolicyId;
  }

  public void setRoundingPolicyId(String roundingPolicyId) {
    this.roundingPolicyId = roundingPolicyId;
  }


  public PriceCalculationDto effectiveDiscountPercent(Double effectiveDiscountPercent) {
    this.effectiveDiscountPercent = effectiveDiscountPercent;
    return this;
  }

  /**
   * Get effectiveDiscountPercent
   * @return effectiveDiscountPercent
   */
  @javax.annotation.Nullable
  public Double getEffectiveDiscountPercent() {
    return effectiveDiscountPercent;
  }

  public void setEffectiveDiscountPercent(Double effectiveDiscountPercent) {
    this.effectiveDiscountPercent = effectiveDiscountPercent;
  }


  public PriceCalculationDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public PriceCalculationDto totalBaseAmount(Money totalBaseAmount) {
    this.totalBaseAmount = totalBaseAmount;
    return this;
  }

  /**
   * Get totalBaseAmount
   * @return totalBaseAmount
   */
  @javax.annotation.Nullable
  public Money getTotalBaseAmount() {
    return totalBaseAmount;
  }

  public void setTotalBaseAmount(Money totalBaseAmount) {
    this.totalBaseAmount = totalBaseAmount;
  }


  public PriceCalculationDto totalDiscountsAmount(Money totalDiscountsAmount) {
    this.totalDiscountsAmount = totalDiscountsAmount;
    return this;
  }

  /**
   * Get totalDiscountsAmount
   * @return totalDiscountsAmount
   */
  @javax.annotation.Nullable
  public Money getTotalDiscountsAmount() {
    return totalDiscountsAmount;
  }

  public void setTotalDiscountsAmount(Money totalDiscountsAmount) {
    this.totalDiscountsAmount = totalDiscountsAmount;
  }


  public PriceCalculationDto totalSurchargesAmount(Money totalSurchargesAmount) {
    this.totalSurchargesAmount = totalSurchargesAmount;
    return this;
  }

  /**
   * Get totalSurchargesAmount
   * @return totalSurchargesAmount
   */
  @javax.annotation.Nullable
  public Money getTotalSurchargesAmount() {
    return totalSurchargesAmount;
  }

  public void setTotalSurchargesAmount(Money totalSurchargesAmount) {
    this.totalSurchargesAmount = totalSurchargesAmount;
  }


  public PriceCalculationDto totalShippingAmount(Money totalShippingAmount) {
    this.totalShippingAmount = totalShippingAmount;
    return this;
  }

  /**
   * Get totalShippingAmount
   * @return totalShippingAmount
   */
  @javax.annotation.Nullable
  public Money getTotalShippingAmount() {
    return totalShippingAmount;
  }

  public void setTotalShippingAmount(Money totalShippingAmount) {
    this.totalShippingAmount = totalShippingAmount;
  }


  public PriceCalculationDto totalShippingTaxAmount(Money totalShippingTaxAmount) {
    this.totalShippingTaxAmount = totalShippingTaxAmount;
    return this;
  }

  /**
   * Get totalShippingTaxAmount
   * @return totalShippingTaxAmount
   */
  @javax.annotation.Nullable
  public Money getTotalShippingTaxAmount() {
    return totalShippingTaxAmount;
  }

  public void setTotalShippingTaxAmount(Money totalShippingTaxAmount) {
    this.totalShippingTaxAmount = totalShippingTaxAmount;
  }


  public PriceCalculationDto totalTaxAmount(Money totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
    return this;
  }

  /**
   * Get totalTaxAmount
   * @return totalTaxAmount
   */
  @javax.annotation.Nullable
  public Money getTotalTaxAmount() {
    return totalTaxAmount;
  }

  public void setTotalTaxAmount(Money totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
  }


  public PriceCalculationDto totalAmount(Money totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public Money getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Money totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceCalculationDto priceCalculationDto = (PriceCalculationDto) o;
    return Objects.equals(this.id, priceCalculationDto.id) &&
        Objects.equals(this.timestamp, priceCalculationDto.timestamp) &&
        Objects.equals(this.itemId, priceCalculationDto.itemId) &&
        Objects.equals(this.unitId, priceCalculationDto.unitId) &&
        Objects.equals(this.unitGroupId, priceCalculationDto.unitGroupId) &&
        Objects.equals(this.priceId, priceCalculationDto.priceId) &&
        Objects.equals(this.priceListId, priceCalculationDto.priceListId) &&
        Objects.equals(this.discountId, priceCalculationDto.discountId) &&
        Objects.equals(this.discountListId, priceCalculationDto.discountListId) &&
        Objects.equals(this.tenantId, priceCalculationDto.tenantId) &&
        Objects.equals(this.enrollmentId, priceCalculationDto.enrollmentId) &&
        Objects.equals(this.roundingPolicyId, priceCalculationDto.roundingPolicyId) &&
        Objects.equals(this.effectiveDiscountPercent, priceCalculationDto.effectiveDiscountPercent) &&
        Objects.equals(this.currencyId, priceCalculationDto.currencyId) &&
        Objects.equals(this.totalBaseAmount, priceCalculationDto.totalBaseAmount) &&
        Objects.equals(this.totalDiscountsAmount, priceCalculationDto.totalDiscountsAmount) &&
        Objects.equals(this.totalSurchargesAmount, priceCalculationDto.totalSurchargesAmount) &&
        Objects.equals(this.totalShippingAmount, priceCalculationDto.totalShippingAmount) &&
        Objects.equals(this.totalShippingTaxAmount, priceCalculationDto.totalShippingTaxAmount) &&
        Objects.equals(this.totalTaxAmount, priceCalculationDto.totalTaxAmount) &&
        Objects.equals(this.totalAmount, priceCalculationDto.totalAmount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, itemId, unitId, unitGroupId, priceId, priceListId, discountId, discountListId, tenantId, enrollmentId, roundingPolicyId, effectiveDiscountPercent, currencyId, totalBaseAmount, totalDiscountsAmount, totalSurchargesAmount, totalShippingAmount, totalShippingTaxAmount, totalTaxAmount, totalAmount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceCalculationDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    unitGroupId: ").append(toIndentedString(unitGroupId)).append("\n");
    sb.append("    priceId: ").append(toIndentedString(priceId)).append("\n");
    sb.append("    priceListId: ").append(toIndentedString(priceListId)).append("\n");
    sb.append("    discountId: ").append(toIndentedString(discountId)).append("\n");
    sb.append("    discountListId: ").append(toIndentedString(discountListId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    sb.append("    roundingPolicyId: ").append(toIndentedString(roundingPolicyId)).append("\n");
    sb.append("    effectiveDiscountPercent: ").append(toIndentedString(effectiveDiscountPercent)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    totalBaseAmount: ").append(toIndentedString(totalBaseAmount)).append("\n");
    sb.append("    totalDiscountsAmount: ").append(toIndentedString(totalDiscountsAmount)).append("\n");
    sb.append("    totalSurchargesAmount: ").append(toIndentedString(totalSurchargesAmount)).append("\n");
    sb.append("    totalShippingAmount: ").append(toIndentedString(totalShippingAmount)).append("\n");
    sb.append("    totalShippingTaxAmount: ").append(toIndentedString(totalShippingTaxAmount)).append("\n");
    sb.append("    totalTaxAmount: ").append(toIndentedString(totalTaxAmount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("itemId");
    openapiFields.add("unitId");
    openapiFields.add("unitGroupId");
    openapiFields.add("priceId");
    openapiFields.add("priceListId");
    openapiFields.add("discountId");
    openapiFields.add("discountListId");
    openapiFields.add("tenantId");
    openapiFields.add("enrollmentId");
    openapiFields.add("roundingPolicyId");
    openapiFields.add("effectiveDiscountPercent");
    openapiFields.add("currencyId");
    openapiFields.add("totalBaseAmount");
    openapiFields.add("totalDiscountsAmount");
    openapiFields.add("totalSurchargesAmount");
    openapiFields.add("totalShippingAmount");
    openapiFields.add("totalShippingTaxAmount");
    openapiFields.add("totalTaxAmount");
    openapiFields.add("totalAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PriceCalculationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceCalculationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceCalculationDto is not found in the empty JSON string", PriceCalculationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceCalculationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceCalculationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("unitId") != null && !jsonObj.get("unitId").isJsonNull()) && !jsonObj.get("unitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitId").toString()));
      }
      if ((jsonObj.get("unitGroupId") != null && !jsonObj.get("unitGroupId").isJsonNull()) && !jsonObj.get("unitGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitGroupId").toString()));
      }
      if ((jsonObj.get("priceId") != null && !jsonObj.get("priceId").isJsonNull()) && !jsonObj.get("priceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceId").toString()));
      }
      if ((jsonObj.get("priceListId") != null && !jsonObj.get("priceListId").isJsonNull()) && !jsonObj.get("priceListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListId").toString()));
      }
      if ((jsonObj.get("discountId") != null && !jsonObj.get("discountId").isJsonNull()) && !jsonObj.get("discountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountId").toString()));
      }
      if ((jsonObj.get("discountListId") != null && !jsonObj.get("discountListId").isJsonNull()) && !jsonObj.get("discountListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountListId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("enrollmentId") != null && !jsonObj.get("enrollmentId").isJsonNull()) && !jsonObj.get("enrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentId").toString()));
      }
      if ((jsonObj.get("roundingPolicyId") != null && !jsonObj.get("roundingPolicyId").isJsonNull()) && !jsonObj.get("roundingPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roundingPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roundingPolicyId").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      // validate the optional field `totalBaseAmount`
      if (jsonObj.get("totalBaseAmount") != null && !jsonObj.get("totalBaseAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalBaseAmount"));
      }
      // validate the optional field `totalDiscountsAmount`
      if (jsonObj.get("totalDiscountsAmount") != null && !jsonObj.get("totalDiscountsAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalDiscountsAmount"));
      }
      // validate the optional field `totalSurchargesAmount`
      if (jsonObj.get("totalSurchargesAmount") != null && !jsonObj.get("totalSurchargesAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalSurchargesAmount"));
      }
      // validate the optional field `totalShippingAmount`
      if (jsonObj.get("totalShippingAmount") != null && !jsonObj.get("totalShippingAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalShippingAmount"));
      }
      // validate the optional field `totalShippingTaxAmount`
      if (jsonObj.get("totalShippingTaxAmount") != null && !jsonObj.get("totalShippingTaxAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalShippingTaxAmount"));
      }
      // validate the optional field `totalTaxAmount`
      if (jsonObj.get("totalTaxAmount") != null && !jsonObj.get("totalTaxAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalTaxAmount"));
      }
      // validate the optional field `totalAmount`
      if (jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("totalAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceCalculationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceCalculationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceCalculationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceCalculationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceCalculationDto>() {
           @Override
           public void write(JsonWriter out, PriceCalculationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceCalculationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PriceCalculationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PriceCalculationDto
   * @throws IOException if the JSON string is invalid with respect to PriceCalculationDto
   */
  public static PriceCalculationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceCalculationDto.class);
  }

  /**
   * Convert an instance of PriceCalculationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

