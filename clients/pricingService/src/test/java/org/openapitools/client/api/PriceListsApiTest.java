/*
 * PricingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.ItemPriceCreateDto;
import org.openapitools.client.model.ItemPriceDtoEnvelope;
import org.openapitools.client.model.ItemPriceDtoListEnvelope;
import org.openapitools.client.model.ItemPriceUpdateDto;
import org.openapitools.client.model.PriceListCreateDto;
import org.openapitools.client.model.PriceListDtoEnvelope;
import org.openapitools.client.model.PriceListDtoListEnvelope;
import org.openapitools.client.model.PriceListUpdateDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PriceListsApi
 */
@Disabled
public class PriceListsApiTest {

    private final PriceListsApi api = new PriceListsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsCountGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2PricingServicePriceListsCountGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PriceListDtoListEnvelope response = api.apiV2PricingServicePriceListsGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPostTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PriceListCreateDto priceListCreateDto = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPost(tenantId, apiVersion, xApiVersion, priceListCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPriceListIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPriceListIdDelete(tenantId, priceListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPriceListIdPricesPostTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ItemPriceCreateDto itemPriceCreateDto = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPriceListIdPricesPost(tenantId, priceListId, apiVersion, xApiVersion, itemPriceCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPriceListIdPricesPriceIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        UUID priceId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPriceListIdPricesPriceIdDelete(tenantId, priceListId, priceId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPriceListIdPricesPriceIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        UUID priceId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ItemPriceUpdateDto itemPriceUpdateDto = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPriceListIdPricesPriceIdPut(tenantId, priceListId, priceId, apiVersion, xApiVersion, itemPriceUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServicePriceListsPriceListIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PriceListUpdateDto priceListUpdateDto = null;
        EmptyEnvelope response = api.apiV2PricingServicePriceListsPriceListIdPut(tenantId, priceListId, apiVersion, xApiVersion, priceListUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PriceListDtoEnvelope response = api.getPriceListAsync(tenantId, priceListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListPriceAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        UUID priceId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ItemPriceDtoEnvelope response = api.getPriceListPriceAsync(tenantId, priceListId, priceId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPriceListPricesAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID priceListId = null;
        UUID itemId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ItemPriceDtoListEnvelope response = api.getPriceListPricesAsync(tenantId, priceListId, itemId, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
