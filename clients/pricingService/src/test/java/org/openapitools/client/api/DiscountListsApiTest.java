/*
 * PricingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiscountCreateDto;
import org.openapitools.client.model.DiscountDtoEnvelope;
import org.openapitools.client.model.DiscountDtoListEnvelope;
import org.openapitools.client.model.DiscountListCreateDto;
import org.openapitools.client.model.DiscountListDtoEnvelope;
import org.openapitools.client.model.DiscountListDtoListEnvelope;
import org.openapitools.client.model.DiscountListUpdateDto;
import org.openapitools.client.model.DiscountUpdateDto;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiscountListsApi
 */
@Disabled
public class DiscountListsApiTest {

    private final DiscountListsApi api = new DiscountListsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsCountGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2PricingServiceDiscountListsCountGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDelete(tenantId, discountListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet(tenantId, discountListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        UUID discountListEntryId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete(tenantId, discountListId, discountListEntryId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        UUID discountListEntryId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountUpdateDto discountUpdateDto = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut(tenantId, discountListId, discountListEntryId, apiVersion, xApiVersion, discountUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDiscountsGetTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountDtoListEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDiscountsGet(tenantId, discountListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdDiscountsPostTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountCreateDto discountCreateDto = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdDiscountsPost(tenantId, discountListId, apiVersion, xApiVersion, discountCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdGetTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountListDtoEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdGet(tenantId, discountListId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsDiscountListIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountListUpdateDto discountListUpdateDto = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsDiscountListIdPut(tenantId, discountListId, apiVersion, xApiVersion, discountListUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountListDtoListEnvelope response = api.apiV2PricingServiceDiscountListsGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2PricingServiceDiscountListsPostTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountListCreateDto discountListCreateDto = null;
        EmptyEnvelope response = api.apiV2PricingServiceDiscountListsPost(tenantId, apiVersion, xApiVersion, discountListCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscountListEntryTest() throws ApiException {
        UUID tenantId = null;
        UUID discountListId = null;
        UUID discountListEntryId = null;
        String apiVersion = null;
        String xApiVersion = null;
        DiscountDtoEnvelope response = api.getDiscountListEntry(tenantId, discountListId, discountListEntryId, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
