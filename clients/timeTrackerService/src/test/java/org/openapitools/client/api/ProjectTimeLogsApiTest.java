/*
 * TimeTrackerService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ProjectTimeLogCreateDto;
import org.openapitools.client.model.ProjectTimeLogDtoEnvelope;
import org.openapitools.client.model.ProjectTimeLogDtoListEnvelope;
import org.openapitools.client.model.ProjectTimeLogUpdateDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectTimeLogsApi
 */
@Disabled
public class ProjectTimeLogsApiTest {

    private final ProjectTimeLogsApi api = new ProjectTimeLogsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetTest() throws ApiException {
        UUID contactId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoListEnvelope response = api.apiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet(contactId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetTest() throws ApiException {
        UUID contactId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoListEnvelope response = api.apiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet(contactId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoListEnvelope response = api.apiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsGetTest() throws ApiException {
        UUID tenantId = null;
        UUID projectPeriodId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoListEnvelope response = api.apiV2TimeTrackerServiceProjectTimeLogsGet(tenantId, projectPeriodId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsPostTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogCreateDto projectTimeLogCreateDto = null;
        api.apiV2TimeTrackerServiceProjectTimeLogsPost(tenantId, apiVersion, xApiVersion, projectTimeLogCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID timeLogId = null;
        String apiVersion = null;
        String xApiVersion = null;
        api.apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete(tenantId, timeLogId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetTest() throws ApiException {
        UUID timeLogId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoEnvelope response = api.apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet(timeLogId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutTest() throws ApiException {
        UUID timeLogId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogUpdateDto projectTimeLogUpdateDto = null;
        api.apiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut(timeLogId, tenantId, apiVersion, xApiVersion, projectTimeLogUpdateDto);
        // TODO: test validations
    }

}
