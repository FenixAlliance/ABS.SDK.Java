/*
 * ShipmentsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShipmentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:37:41.270754-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class ShipmentDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TRACKING_CODE = "trackingCode";
  @SerializedName(SERIALIZED_NAME_TRACKING_CODE)
  private String trackingCode;

  public static final String SERIALIZED_NAME_IS_INTERNATIONAL = "isInternational";
  @SerializedName(SERIALIZED_NAME_IS_INTERNATIONAL)
  private Boolean isInternational;

  public static final String SERIALIZED_NAME_SHIPMENT_TIMESTAMP = "shipmentTimestamp";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TIMESTAMP)
  private OffsetDateTime shipmentTimestamp;

  public static final String SERIALIZED_NAME_DELIVERY_TIMESTAMP = "deliveryTimestamp";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TIMESTAMP)
  private OffsetDateTime deliveryTimestamp;

  public static final String SERIALIZED_NAME_EXPECTED_SHIPPING_DATE = "expectedShippingDate";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SHIPPING_DATE)
  private OffsetDateTime expectedShippingDate;

  public static final String SERIALIZED_NAME_EXPECTED_DELIVERY_DATE = "expectedDeliveryDate";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DELIVERY_DATE)
  private OffsetDateTime expectedDeliveryDate;

  public ShipmentDto() {
  }

  public ShipmentDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ShipmentDto trackingCode(String trackingCode) {
    this.trackingCode = trackingCode;
    return this;
  }

  /**
   * Get trackingCode
   * @return trackingCode
   */
  @javax.annotation.Nullable
  public String getTrackingCode() {
    return trackingCode;
  }

  public void setTrackingCode(String trackingCode) {
    this.trackingCode = trackingCode;
  }


  public ShipmentDto isInternational(Boolean isInternational) {
    this.isInternational = isInternational;
    return this;
  }

  /**
   * Get isInternational
   * @return isInternational
   */
  @javax.annotation.Nullable
  public Boolean getIsInternational() {
    return isInternational;
  }

  public void setIsInternational(Boolean isInternational) {
    this.isInternational = isInternational;
  }


  public ShipmentDto shipmentTimestamp(OffsetDateTime shipmentTimestamp) {
    this.shipmentTimestamp = shipmentTimestamp;
    return this;
  }

  /**
   * Get shipmentTimestamp
   * @return shipmentTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShipmentTimestamp() {
    return shipmentTimestamp;
  }

  public void setShipmentTimestamp(OffsetDateTime shipmentTimestamp) {
    this.shipmentTimestamp = shipmentTimestamp;
  }


  public ShipmentDto deliveryTimestamp(OffsetDateTime deliveryTimestamp) {
    this.deliveryTimestamp = deliveryTimestamp;
    return this;
  }

  /**
   * Get deliveryTimestamp
   * @return deliveryTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeliveryTimestamp() {
    return deliveryTimestamp;
  }

  public void setDeliveryTimestamp(OffsetDateTime deliveryTimestamp) {
    this.deliveryTimestamp = deliveryTimestamp;
  }


  public ShipmentDto expectedShippingDate(OffsetDateTime expectedShippingDate) {
    this.expectedShippingDate = expectedShippingDate;
    return this;
  }

  /**
   * Get expectedShippingDate
   * @return expectedShippingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedShippingDate() {
    return expectedShippingDate;
  }

  public void setExpectedShippingDate(OffsetDateTime expectedShippingDate) {
    this.expectedShippingDate = expectedShippingDate;
  }


  public ShipmentDto expectedDeliveryDate(OffsetDateTime expectedDeliveryDate) {
    this.expectedDeliveryDate = expectedDeliveryDate;
    return this;
  }

  /**
   * Get expectedDeliveryDate
   * @return expectedDeliveryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedDeliveryDate() {
    return expectedDeliveryDate;
  }

  public void setExpectedDeliveryDate(OffsetDateTime expectedDeliveryDate) {
    this.expectedDeliveryDate = expectedDeliveryDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentDto shipmentDto = (ShipmentDto) o;
    return Objects.equals(this.id, shipmentDto.id) &&
        Objects.equals(this.trackingCode, shipmentDto.trackingCode) &&
        Objects.equals(this.isInternational, shipmentDto.isInternational) &&
        Objects.equals(this.shipmentTimestamp, shipmentDto.shipmentTimestamp) &&
        Objects.equals(this.deliveryTimestamp, shipmentDto.deliveryTimestamp) &&
        Objects.equals(this.expectedShippingDate, shipmentDto.expectedShippingDate) &&
        Objects.equals(this.expectedDeliveryDate, shipmentDto.expectedDeliveryDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, trackingCode, isInternational, shipmentTimestamp, deliveryTimestamp, expectedShippingDate, expectedDeliveryDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    trackingCode: ").append(toIndentedString(trackingCode)).append("\n");
    sb.append("    isInternational: ").append(toIndentedString(isInternational)).append("\n");
    sb.append("    shipmentTimestamp: ").append(toIndentedString(shipmentTimestamp)).append("\n");
    sb.append("    deliveryTimestamp: ").append(toIndentedString(deliveryTimestamp)).append("\n");
    sb.append("    expectedShippingDate: ").append(toIndentedString(expectedShippingDate)).append("\n");
    sb.append("    expectedDeliveryDate: ").append(toIndentedString(expectedDeliveryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("trackingCode");
    openapiFields.add("isInternational");
    openapiFields.add("shipmentTimestamp");
    openapiFields.add("deliveryTimestamp");
    openapiFields.add("expectedShippingDate");
    openapiFields.add("expectedDeliveryDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipmentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipmentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentDto is not found in the empty JSON string", ShipmentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipmentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("trackingCode") != null && !jsonObj.get("trackingCode").isJsonNull()) && !jsonObj.get("trackingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentDto>() {
           @Override
           public void write(JsonWriter out, ShipmentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipmentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipmentDto
   * @throws IOException if the JSON string is invalid with respect to ShipmentDto
   */
  public static ShipmentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentDto.class);
  }

  /**
   * Convert an instance of ShipmentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

