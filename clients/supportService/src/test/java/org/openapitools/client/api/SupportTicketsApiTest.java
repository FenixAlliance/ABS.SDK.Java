/*
 * SupportService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.PrivateMessageDtoListEnvelope;
import org.openapitools.client.model.SupportTicketConversationCreateDto;
import org.openapitools.client.model.SupportTicketConversationDtoEnvelope;
import org.openapitools.client.model.SupportTicketConversationDtoListEnvelope;
import org.openapitools.client.model.SupportTicketCreateDto;
import org.openapitools.client.model.SupportTicketDtoEnvelope;
import org.openapitools.client.model.SupportTicketDtoListEnvelope;
import org.openapitools.client.model.SupportTicketUpdateDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SupportTicketsApi
 */
@Disabled
public class SupportTicketsApiTest {

    private final SupportTicketsApi api = new SupportTicketsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsCountGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2SupportServiceSupportTicketsCountGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SupportTicketDtoListEnvelope response = api.apiV2SupportServiceSupportTicketsGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsPostTest() throws ApiException {
        SupportTicketCreateDto supportTicketCreateDto = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2SupportServiceSupportTicketsPost(supportTicketCreateDto, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdConversationsGetTest() throws ApiException {
        UUID supportTicketId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SupportTicketConversationDtoListEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdConversationsGet(supportTicketId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdConversationsPostTest() throws ApiException {
        UUID supportTicketId = null;
        SupportTicketConversationCreateDto supportTicketConversationCreateDto = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdConversationsPost(supportTicketId, supportTicketConversationCreateDto, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdDeleteTest() throws ApiException {
        UUID supportTicketId = null;
        UUID supportTicketConversationId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdDelete(supportTicketId, supportTicketConversationId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdGetTest() throws ApiException {
        UUID supportTicketId = null;
        UUID supportTicketConversationId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SupportTicketConversationDtoEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdGet(supportTicketId, supportTicketConversationId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdMessagesGetTest() throws ApiException {
        UUID supportTicketConversationId = null;
        String supportTicketId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String apiVersion = null;
        String xApiVersion = null;
        PrivateMessageDtoListEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdMessagesGet(supportTicketConversationId, supportTicketId, pageNumber, pageSize, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdDeleteTest() throws ApiException {
        UUID supportTicketId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdDelete(supportTicketId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdGetTest() throws ApiException {
        UUID supportTicketId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SupportTicketDtoEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdGet(supportTicketId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SupportServiceSupportTicketsSupportTicketIdPutTest() throws ApiException {
        UUID supportTicketId = null;
        SupportTicketUpdateDto supportTicketUpdateDto = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2SupportServiceSupportTicketsSupportTicketIdPut(supportTicketId, supportTicketUpdateDto, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
