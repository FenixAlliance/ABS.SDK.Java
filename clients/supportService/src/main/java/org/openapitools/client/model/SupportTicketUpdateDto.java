/*
 * SupportService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupportTicketUpdateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:38:00.025935400-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class SupportTicketUpdateDto {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_I_D = "accountHolderID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_I_D)
  private String accountHolderID;

  public static final String SERIALIZED_NAME_CONTACT_I_D = "contactID";
  @SerializedName(SERIALIZED_NAME_CONTACT_I_D)
  private String contactID;

  public static final String SERIALIZED_NAME_BUSINESS_PROFILE_RECORD_I_D = "businessProfileRecordID";
  @SerializedName(SERIALIZED_NAME_BUSINESS_PROFILE_RECORD_I_D)
  private String businessProfileRecordID;

  public static final String SERIALIZED_NAME_SUPPORT_TICKET_TYPE_I_D = "supportTicketTypeID";
  @SerializedName(SERIALIZED_NAME_SUPPORT_TICKET_TYPE_I_D)
  private String supportTicketTypeID;

  public static final String SERIALIZED_NAME_SUPPORT_ENTITLEMENT_I_D = "supportEntitlementID";
  @SerializedName(SERIALIZED_NAME_SUPPORT_ENTITLEMENT_I_D)
  private String supportEntitlementID;

  public static final String SERIALIZED_NAME_SUPPORT_PRIORITY_I_D = "supportPriorityID";
  @SerializedName(SERIALIZED_NAME_SUPPORT_PRIORITY_I_D)
  private String supportPriorityID;

  public SupportTicketUpdateDto() {
  }

  public SupportTicketUpdateDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SupportTicketUpdateDto accountHolderID(String accountHolderID) {
    this.accountHolderID = accountHolderID;
    return this;
  }

  /**
   * Get accountHolderID
   * @return accountHolderID
   */
  @javax.annotation.Nullable
  public String getAccountHolderID() {
    return accountHolderID;
  }

  public void setAccountHolderID(String accountHolderID) {
    this.accountHolderID = accountHolderID;
  }


  public SupportTicketUpdateDto contactID(String contactID) {
    this.contactID = contactID;
    return this;
  }

  /**
   * Get contactID
   * @return contactID
   */
  @javax.annotation.Nullable
  public String getContactID() {
    return contactID;
  }

  public void setContactID(String contactID) {
    this.contactID = contactID;
  }


  public SupportTicketUpdateDto businessProfileRecordID(String businessProfileRecordID) {
    this.businessProfileRecordID = businessProfileRecordID;
    return this;
  }

  /**
   * Get businessProfileRecordID
   * @return businessProfileRecordID
   */
  @javax.annotation.Nullable
  public String getBusinessProfileRecordID() {
    return businessProfileRecordID;
  }

  public void setBusinessProfileRecordID(String businessProfileRecordID) {
    this.businessProfileRecordID = businessProfileRecordID;
  }


  public SupportTicketUpdateDto supportTicketTypeID(String supportTicketTypeID) {
    this.supportTicketTypeID = supportTicketTypeID;
    return this;
  }

  /**
   * Get supportTicketTypeID
   * @return supportTicketTypeID
   */
  @javax.annotation.Nullable
  public String getSupportTicketTypeID() {
    return supportTicketTypeID;
  }

  public void setSupportTicketTypeID(String supportTicketTypeID) {
    this.supportTicketTypeID = supportTicketTypeID;
  }


  public SupportTicketUpdateDto supportEntitlementID(String supportEntitlementID) {
    this.supportEntitlementID = supportEntitlementID;
    return this;
  }

  /**
   * Get supportEntitlementID
   * @return supportEntitlementID
   */
  @javax.annotation.Nullable
  public String getSupportEntitlementID() {
    return supportEntitlementID;
  }

  public void setSupportEntitlementID(String supportEntitlementID) {
    this.supportEntitlementID = supportEntitlementID;
  }


  public SupportTicketUpdateDto supportPriorityID(String supportPriorityID) {
    this.supportPriorityID = supportPriorityID;
    return this;
  }

  /**
   * Get supportPriorityID
   * @return supportPriorityID
   */
  @javax.annotation.Nullable
  public String getSupportPriorityID() {
    return supportPriorityID;
  }

  public void setSupportPriorityID(String supportPriorityID) {
    this.supportPriorityID = supportPriorityID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportTicketUpdateDto supportTicketUpdateDto = (SupportTicketUpdateDto) o;
    return Objects.equals(this.description, supportTicketUpdateDto.description) &&
        Objects.equals(this.accountHolderID, supportTicketUpdateDto.accountHolderID) &&
        Objects.equals(this.contactID, supportTicketUpdateDto.contactID) &&
        Objects.equals(this.businessProfileRecordID, supportTicketUpdateDto.businessProfileRecordID) &&
        Objects.equals(this.supportTicketTypeID, supportTicketUpdateDto.supportTicketTypeID) &&
        Objects.equals(this.supportEntitlementID, supportTicketUpdateDto.supportEntitlementID) &&
        Objects.equals(this.supportPriorityID, supportTicketUpdateDto.supportPriorityID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, accountHolderID, contactID, businessProfileRecordID, supportTicketTypeID, supportEntitlementID, supportPriorityID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportTicketUpdateDto {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    accountHolderID: ").append(toIndentedString(accountHolderID)).append("\n");
    sb.append("    contactID: ").append(toIndentedString(contactID)).append("\n");
    sb.append("    businessProfileRecordID: ").append(toIndentedString(businessProfileRecordID)).append("\n");
    sb.append("    supportTicketTypeID: ").append(toIndentedString(supportTicketTypeID)).append("\n");
    sb.append("    supportEntitlementID: ").append(toIndentedString(supportEntitlementID)).append("\n");
    sb.append("    supportPriorityID: ").append(toIndentedString(supportPriorityID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("accountHolderID");
    openapiFields.add("contactID");
    openapiFields.add("businessProfileRecordID");
    openapiFields.add("supportTicketTypeID");
    openapiFields.add("supportEntitlementID");
    openapiFields.add("supportPriorityID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportTicketUpdateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportTicketUpdateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportTicketUpdateDto is not found in the empty JSON string", SupportTicketUpdateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportTicketUpdateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportTicketUpdateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("accountHolderID") != null && !jsonObj.get("accountHolderID").isJsonNull()) && !jsonObj.get("accountHolderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderID").toString()));
      }
      if ((jsonObj.get("contactID") != null && !jsonObj.get("contactID").isJsonNull()) && !jsonObj.get("contactID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactID").toString()));
      }
      if ((jsonObj.get("businessProfileRecordID") != null && !jsonObj.get("businessProfileRecordID").isJsonNull()) && !jsonObj.get("businessProfileRecordID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessProfileRecordID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessProfileRecordID").toString()));
      }
      if ((jsonObj.get("supportTicketTypeID") != null && !jsonObj.get("supportTicketTypeID").isJsonNull()) && !jsonObj.get("supportTicketTypeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportTicketTypeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportTicketTypeID").toString()));
      }
      if ((jsonObj.get("supportEntitlementID") != null && !jsonObj.get("supportEntitlementID").isJsonNull()) && !jsonObj.get("supportEntitlementID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportEntitlementID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportEntitlementID").toString()));
      }
      if ((jsonObj.get("supportPriorityID") != null && !jsonObj.get("supportPriorityID").isJsonNull()) && !jsonObj.get("supportPriorityID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportPriorityID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportPriorityID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportTicketUpdateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportTicketUpdateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportTicketUpdateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportTicketUpdateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportTicketUpdateDto>() {
           @Override
           public void write(JsonWriter out, SupportTicketUpdateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportTicketUpdateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportTicketUpdateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportTicketUpdateDto
   * @throws IOException if the JSON string is invalid with respect to SupportTicketUpdateDto
   */
  public static SupportTicketUpdateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportTicketUpdateDto.class);
  }

  /**
   * Convert an instance of SupportTicketUpdateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

