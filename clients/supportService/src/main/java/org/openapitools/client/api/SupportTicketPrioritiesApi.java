/*
 * SupportService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.SupportTicketPriorityCreateDto;
import org.openapitools.client.model.SupportTicketPriorityDtoEnvelope;
import org.openapitools.client.model.SupportTicketPriorityDtoListEnvelope;
import org.openapitools.client.model.SupportTicketPriorityUpdateDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SupportTicketPrioritiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SupportTicketPrioritiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SupportTicketPrioritiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesCountGet
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesCountGetCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesCountGetValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        return apiV2SupportServiceSupportTicketPrioritiesCountGetCall(tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2SupportServiceSupportTicketPrioritiesCountGet(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesCountGetWithHttpInfo(tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2SupportServiceSupportTicketPrioritiesCountGetWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesCountGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesCountGetAsync(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesCountGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesGet
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesGetCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesGetValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        return apiV2SupportServiceSupportTicketPrioritiesGetCall(tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SupportTicketPriorityDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketPriorityDtoListEnvelope apiV2SupportServiceSupportTicketPrioritiesGet(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SupportTicketPriorityDtoListEnvelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesGetWithHttpInfo(tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SupportTicketPriorityDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketPriorityDtoListEnvelope> apiV2SupportServiceSupportTicketPrioritiesGetWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SupportTicketPriorityDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesGetAsync(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SupportTicketPriorityDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketPriorityDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesPost
     * @param supportTicketPriorityCreateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesPostCall(SupportTicketPriorityCreateDto supportTicketPriorityCreateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = supportTicketPriorityCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesPostValidateBeforeCall(SupportTicketPriorityCreateDto supportTicketPriorityCreateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketPriorityCreateDto' is set
        if (supportTicketPriorityCreateDto == null) {
            throw new ApiException("Missing the required parameter 'supportTicketPriorityCreateDto' when calling apiV2SupportServiceSupportTicketPrioritiesPost(Async)");
        }

        return apiV2SupportServiceSupportTicketPrioritiesPostCall(supportTicketPriorityCreateDto, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param supportTicketPriorityCreateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2SupportServiceSupportTicketPrioritiesPost(SupportTicketPriorityCreateDto supportTicketPriorityCreateDto, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesPostWithHttpInfo(supportTicketPriorityCreateDto, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param supportTicketPriorityCreateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2SupportServiceSupportTicketPrioritiesPostWithHttpInfo(SupportTicketPriorityCreateDto supportTicketPriorityCreateDto, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesPostValidateBeforeCall(supportTicketPriorityCreateDto, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param supportTicketPriorityCreateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesPostAsync(SupportTicketPriorityCreateDto supportTicketPriorityCreateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesPostValidateBeforeCall(supportTicketPriorityCreateDto, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete
     * @param supportTicketPriorityId  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteCall(UUID supportTicketPriorityId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
            .replace("{" + "supportTicketPriorityId" + "}", localVarApiClient.escapeString(supportTicketPriorityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteValidateBeforeCall(UUID supportTicketPriorityId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketPriorityId' is set
        if (supportTicketPriorityId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketPriorityId' when calling apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete(Async)");
        }

        return apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteCall(supportTicketPriorityId, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete(UUID supportTicketPriorityId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteWithHttpInfo(supportTicketPriorityId, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteWithHttpInfo(UUID supportTicketPriorityId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteValidateBeforeCall(supportTicketPriorityId, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param supportTicketPriorityId  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteAsync(UUID supportTicketPriorityId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteValidateBeforeCall(supportTicketPriorityId, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet
     * @param supportTicketPriorityId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetCall(UUID supportTicketPriorityId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
            .replace("{" + "supportTicketPriorityId" + "}", localVarApiClient.escapeString(supportTicketPriorityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetValidateBeforeCall(UUID supportTicketPriorityId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketPriorityId' is set
        if (supportTicketPriorityId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketPriorityId' when calling apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet(Async)");
        }

        return apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetCall(supportTicketPriorityId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SupportTicketPriorityDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupportTicketPriorityDtoEnvelope apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet(UUID supportTicketPriorityId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SupportTicketPriorityDtoEnvelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetWithHttpInfo(supportTicketPriorityId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SupportTicketPriorityDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupportTicketPriorityDtoEnvelope> apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetWithHttpInfo(UUID supportTicketPriorityId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetValidateBeforeCall(supportTicketPriorityId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SupportTicketPriorityDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param supportTicketPriorityId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetAsync(UUID supportTicketPriorityId, String apiVersion, String xApiVersion, final ApiCallback<SupportTicketPriorityDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetValidateBeforeCall(supportTicketPriorityId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SupportTicketPriorityDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut
     * @param supportTicketPriorityId  (required)
     * @param supportTicketPriorityUpdateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutCall(UUID supportTicketPriorityId, SupportTicketPriorityUpdateDto supportTicketPriorityUpdateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = supportTicketPriorityUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
            .replace("{" + "supportTicketPriorityId" + "}", localVarApiClient.escapeString(supportTicketPriorityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutValidateBeforeCall(UUID supportTicketPriorityId, SupportTicketPriorityUpdateDto supportTicketPriorityUpdateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'supportTicketPriorityId' is set
        if (supportTicketPriorityId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketPriorityId' when calling apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut(Async)");
        }

        // verify the required parameter 'supportTicketPriorityUpdateDto' is set
        if (supportTicketPriorityUpdateDto == null) {
            throw new ApiException("Missing the required parameter 'supportTicketPriorityUpdateDto' when calling apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut(Async)");
        }

        return apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutCall(supportTicketPriorityId, supportTicketPriorityUpdateDto, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param supportTicketPriorityUpdateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut(UUID supportTicketPriorityId, SupportTicketPriorityUpdateDto supportTicketPriorityUpdateDto, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutWithHttpInfo(supportTicketPriorityId, supportTicketPriorityUpdateDto, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param supportTicketPriorityId  (required)
     * @param supportTicketPriorityUpdateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutWithHttpInfo(UUID supportTicketPriorityId, SupportTicketPriorityUpdateDto supportTicketPriorityUpdateDto, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutValidateBeforeCall(supportTicketPriorityId, supportTicketPriorityUpdateDto, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param supportTicketPriorityId  (required)
     * @param supportTicketPriorityUpdateDto  (required)
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutAsync(UUID supportTicketPriorityId, SupportTicketPriorityUpdateDto supportTicketPriorityUpdateDto, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutValidateBeforeCall(supportTicketPriorityId, supportTicketPriorityUpdateDto, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
