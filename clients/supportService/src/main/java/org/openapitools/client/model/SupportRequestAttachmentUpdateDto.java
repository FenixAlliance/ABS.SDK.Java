/*
 * SupportService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SupportRequestAttachmentUpdateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:38:00.025935400-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class SupportRequestAttachmentUpdateDto {
  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_IS_FOLDER = "isFolder";
  @SerializedName(SERIALIZED_NAME_IS_FOLDER)
  private Boolean isFolder;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_ABSTRACT = "abstract";
  @SerializedName(SERIALIZED_NAME_ABSTRACT)
  private String _abstract;

  public static final String SERIALIZED_NAME_KEY_WORDS = "keyWords";
  @SerializedName(SERIALIZED_NAME_KEY_WORDS)
  private String keyWords;

  public static final String SERIALIZED_NAME_VALID_RESPONSE = "validResponse";
  @SerializedName(SERIALIZED_NAME_VALID_RESPONSE)
  private Boolean validResponse;

  public static final String SERIALIZED_NAME_PARENT_FILE_UPLOAD_I_D = "parentFileUploadID";
  @SerializedName(SERIALIZED_NAME_PARENT_FILE_UPLOAD_I_D)
  private String parentFileUploadID;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private File _file;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_FILE_LENGTH = "fileLength";
  @SerializedName(SERIALIZED_NAME_FILE_LENGTH)
  private Long fileLength;

  public SupportRequestAttachmentUpdateDto() {
  }

  public SupportRequestAttachmentUpdateDto notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public SupportRequestAttachmentUpdateDto metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public SupportRequestAttachmentUpdateDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SupportRequestAttachmentUpdateDto author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public SupportRequestAttachmentUpdateDto isFolder(Boolean isFolder) {
    this.isFolder = isFolder;
    return this;
  }

  /**
   * Get isFolder
   * @return isFolder
   */
  @javax.annotation.Nullable
  public Boolean getIsFolder() {
    return isFolder;
  }

  public void setIsFolder(Boolean isFolder) {
    this.isFolder = isFolder;
  }


  public SupportRequestAttachmentUpdateDto fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public SupportRequestAttachmentUpdateDto _abstract(String _abstract) {
    this._abstract = _abstract;
    return this;
  }

  /**
   * Get _abstract
   * @return _abstract
   */
  @javax.annotation.Nullable
  public String getAbstract() {
    return _abstract;
  }

  public void setAbstract(String _abstract) {
    this._abstract = _abstract;
  }


  public SupportRequestAttachmentUpdateDto keyWords(String keyWords) {
    this.keyWords = keyWords;
    return this;
  }

  /**
   * Get keyWords
   * @return keyWords
   */
  @javax.annotation.Nullable
  public String getKeyWords() {
    return keyWords;
  }

  public void setKeyWords(String keyWords) {
    this.keyWords = keyWords;
  }


  public SupportRequestAttachmentUpdateDto validResponse(Boolean validResponse) {
    this.validResponse = validResponse;
    return this;
  }

  /**
   * Get validResponse
   * @return validResponse
   */
  @javax.annotation.Nullable
  public Boolean getValidResponse() {
    return validResponse;
  }

  public void setValidResponse(Boolean validResponse) {
    this.validResponse = validResponse;
  }


  public SupportRequestAttachmentUpdateDto parentFileUploadID(String parentFileUploadID) {
    this.parentFileUploadID = parentFileUploadID;
    return this;
  }

  /**
   * Get parentFileUploadID
   * @return parentFileUploadID
   */
  @javax.annotation.Nullable
  public String getParentFileUploadID() {
    return parentFileUploadID;
  }

  public void setParentFileUploadID(String parentFileUploadID) {
    this.parentFileUploadID = parentFileUploadID;
  }


  public SupportRequestAttachmentUpdateDto filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Get filePath
   * @return filePath
   */
  @javax.annotation.Nullable
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public SupportRequestAttachmentUpdateDto _file(File _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public File getFile() {
    return _file;
  }

  public void setFile(File _file) {
    this._file = _file;
  }


  public SupportRequestAttachmentUpdateDto contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public SupportRequestAttachmentUpdateDto fileLength(Long fileLength) {
    this.fileLength = fileLength;
    return this;
  }

  /**
   * Get fileLength
   * @return fileLength
   */
  @javax.annotation.Nullable
  public Long getFileLength() {
    return fileLength;
  }

  public void setFileLength(Long fileLength) {
    this.fileLength = fileLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportRequestAttachmentUpdateDto supportRequestAttachmentUpdateDto = (SupportRequestAttachmentUpdateDto) o;
    return Objects.equals(this.notes, supportRequestAttachmentUpdateDto.notes) &&
        Objects.equals(this.metadata, supportRequestAttachmentUpdateDto.metadata) &&
        Objects.equals(this.title, supportRequestAttachmentUpdateDto.title) &&
        Objects.equals(this.author, supportRequestAttachmentUpdateDto.author) &&
        Objects.equals(this.isFolder, supportRequestAttachmentUpdateDto.isFolder) &&
        Objects.equals(this.fileName, supportRequestAttachmentUpdateDto.fileName) &&
        Objects.equals(this._abstract, supportRequestAttachmentUpdateDto._abstract) &&
        Objects.equals(this.keyWords, supportRequestAttachmentUpdateDto.keyWords) &&
        Objects.equals(this.validResponse, supportRequestAttachmentUpdateDto.validResponse) &&
        Objects.equals(this.parentFileUploadID, supportRequestAttachmentUpdateDto.parentFileUploadID) &&
        Objects.equals(this.filePath, supportRequestAttachmentUpdateDto.filePath) &&
        Objects.equals(this._file, supportRequestAttachmentUpdateDto._file) &&
        Objects.equals(this.contentType, supportRequestAttachmentUpdateDto.contentType) &&
        Objects.equals(this.fileLength, supportRequestAttachmentUpdateDto.fileLength);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(notes, metadata, title, author, isFolder, fileName, _abstract, keyWords, validResponse, parentFileUploadID, filePath, _file, contentType, fileLength);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportRequestAttachmentUpdateDto {\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    isFolder: ").append(toIndentedString(isFolder)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    _abstract: ").append(toIndentedString(_abstract)).append("\n");
    sb.append("    keyWords: ").append(toIndentedString(keyWords)).append("\n");
    sb.append("    validResponse: ").append(toIndentedString(validResponse)).append("\n");
    sb.append("    parentFileUploadID: ").append(toIndentedString(parentFileUploadID)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notes");
    openapiFields.add("metadata");
    openapiFields.add("title");
    openapiFields.add("author");
    openapiFields.add("isFolder");
    openapiFields.add("fileName");
    openapiFields.add("abstract");
    openapiFields.add("keyWords");
    openapiFields.add("validResponse");
    openapiFields.add("parentFileUploadID");
    openapiFields.add("filePath");
    openapiFields.add("file");
    openapiFields.add("contentType");
    openapiFields.add("fileLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SupportRequestAttachmentUpdateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SupportRequestAttachmentUpdateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SupportRequestAttachmentUpdateDto is not found in the empty JSON string", SupportRequestAttachmentUpdateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SupportRequestAttachmentUpdateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SupportRequestAttachmentUpdateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("abstract") != null && !jsonObj.get("abstract").isJsonNull()) && !jsonObj.get("abstract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `abstract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("abstract").toString()));
      }
      if ((jsonObj.get("keyWords") != null && !jsonObj.get("keyWords").isJsonNull()) && !jsonObj.get("keyWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyWords").toString()));
      }
      if ((jsonObj.get("parentFileUploadID") != null && !jsonObj.get("parentFileUploadID").isJsonNull()) && !jsonObj.get("parentFileUploadID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFileUploadID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFileUploadID").toString()));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SupportRequestAttachmentUpdateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SupportRequestAttachmentUpdateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SupportRequestAttachmentUpdateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SupportRequestAttachmentUpdateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SupportRequestAttachmentUpdateDto>() {
           @Override
           public void write(JsonWriter out, SupportRequestAttachmentUpdateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SupportRequestAttachmentUpdateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SupportRequestAttachmentUpdateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SupportRequestAttachmentUpdateDto
   * @throws IOException if the JSON string is invalid with respect to SupportRequestAttachmentUpdateDto
   */
  public static SupportRequestAttachmentUpdateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SupportRequestAttachmentUpdateDto.class);
  }

  /**
   * Convert an instance of SupportRequestAttachmentUpdateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

