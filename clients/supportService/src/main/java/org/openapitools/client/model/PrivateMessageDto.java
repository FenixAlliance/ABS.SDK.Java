/*
 * SupportService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrivateMessageDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:38:00.025935400-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class PrivateMessageDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Boolean read;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private String conversationId;

  public static final String SERIALIZED_NAME_SENDER_SOCIAL_PROFILE_ID = "senderSocialProfileId";
  @SerializedName(SERIALIZED_NAME_SENDER_SOCIAL_PROFILE_ID)
  private String senderSocialProfileId;

  public static final String SERIALIZED_NAME_RECEIVER_SOCIAL_PROFILE_I_D = "receiverSocialProfileID";
  @SerializedName(SERIALIZED_NAME_RECEIVER_SOCIAL_PROFILE_I_D)
  private String receiverSocialProfileID;

  public static final String SERIALIZED_NAME_SENT_TIMESTAMP = "sentTimestamp";
  @SerializedName(SERIALIZED_NAME_SENT_TIMESTAMP)
  private OffsetDateTime sentTimestamp;

  public static final String SERIALIZED_NAME_READ_TIMESTAMP = "readTimestamp";
  @SerializedName(SERIALIZED_NAME_READ_TIMESTAMP)
  private OffsetDateTime readTimestamp;

  public static final String SERIALIZED_NAME_RECEIVED_TIMESTAMP = "receivedTimestamp";
  @SerializedName(SERIALIZED_NAME_RECEIVED_TIMESTAMP)
  private OffsetDateTime receivedTimestamp;

  public PrivateMessageDto() {
  }

  public PrivateMessageDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PrivateMessageDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public PrivateMessageDto read(Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public Boolean getRead() {
    return read;
  }

  public void setRead(Boolean read) {
    this.read = read;
  }


  public PrivateMessageDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PrivateMessageDto message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public PrivateMessageDto conversationId(String conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * Get conversationId
   * @return conversationId
   */
  @javax.annotation.Nullable
  public String getConversationId() {
    return conversationId;
  }

  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
  }


  public PrivateMessageDto senderSocialProfileId(String senderSocialProfileId) {
    this.senderSocialProfileId = senderSocialProfileId;
    return this;
  }

  /**
   * Get senderSocialProfileId
   * @return senderSocialProfileId
   */
  @javax.annotation.Nullable
  public String getSenderSocialProfileId() {
    return senderSocialProfileId;
  }

  public void setSenderSocialProfileId(String senderSocialProfileId) {
    this.senderSocialProfileId = senderSocialProfileId;
  }


  public PrivateMessageDto receiverSocialProfileID(String receiverSocialProfileID) {
    this.receiverSocialProfileID = receiverSocialProfileID;
    return this;
  }

  /**
   * Get receiverSocialProfileID
   * @return receiverSocialProfileID
   */
  @javax.annotation.Nullable
  public String getReceiverSocialProfileID() {
    return receiverSocialProfileID;
  }

  public void setReceiverSocialProfileID(String receiverSocialProfileID) {
    this.receiverSocialProfileID = receiverSocialProfileID;
  }


  public PrivateMessageDto sentTimestamp(OffsetDateTime sentTimestamp) {
    this.sentTimestamp = sentTimestamp;
    return this;
  }

  /**
   * Get sentTimestamp
   * @return sentTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentTimestamp() {
    return sentTimestamp;
  }

  public void setSentTimestamp(OffsetDateTime sentTimestamp) {
    this.sentTimestamp = sentTimestamp;
  }


  public PrivateMessageDto readTimestamp(OffsetDateTime readTimestamp) {
    this.readTimestamp = readTimestamp;
    return this;
  }

  /**
   * Get readTimestamp
   * @return readTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReadTimestamp() {
    return readTimestamp;
  }

  public void setReadTimestamp(OffsetDateTime readTimestamp) {
    this.readTimestamp = readTimestamp;
  }


  public PrivateMessageDto receivedTimestamp(OffsetDateTime receivedTimestamp) {
    this.receivedTimestamp = receivedTimestamp;
    return this;
  }

  /**
   * Get receivedTimestamp
   * @return receivedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceivedTimestamp() {
    return receivedTimestamp;
  }

  public void setReceivedTimestamp(OffsetDateTime receivedTimestamp) {
    this.receivedTimestamp = receivedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateMessageDto privateMessageDto = (PrivateMessageDto) o;
    return Objects.equals(this.id, privateMessageDto.id) &&
        Objects.equals(this.timestamp, privateMessageDto.timestamp) &&
        Objects.equals(this.read, privateMessageDto.read) &&
        Objects.equals(this.title, privateMessageDto.title) &&
        Objects.equals(this.message, privateMessageDto.message) &&
        Objects.equals(this.conversationId, privateMessageDto.conversationId) &&
        Objects.equals(this.senderSocialProfileId, privateMessageDto.senderSocialProfileId) &&
        Objects.equals(this.receiverSocialProfileID, privateMessageDto.receiverSocialProfileID) &&
        Objects.equals(this.sentTimestamp, privateMessageDto.sentTimestamp) &&
        Objects.equals(this.readTimestamp, privateMessageDto.readTimestamp) &&
        Objects.equals(this.receivedTimestamp, privateMessageDto.receivedTimestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, read, title, message, conversationId, senderSocialProfileId, receiverSocialProfileID, sentTimestamp, readTimestamp, receivedTimestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateMessageDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    senderSocialProfileId: ").append(toIndentedString(senderSocialProfileId)).append("\n");
    sb.append("    receiverSocialProfileID: ").append(toIndentedString(receiverSocialProfileID)).append("\n");
    sb.append("    sentTimestamp: ").append(toIndentedString(sentTimestamp)).append("\n");
    sb.append("    readTimestamp: ").append(toIndentedString(readTimestamp)).append("\n");
    sb.append("    receivedTimestamp: ").append(toIndentedString(receivedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("read");
    openapiFields.add("title");
    openapiFields.add("message");
    openapiFields.add("conversationId");
    openapiFields.add("senderSocialProfileId");
    openapiFields.add("receiverSocialProfileID");
    openapiFields.add("sentTimestamp");
    openapiFields.add("readTimestamp");
    openapiFields.add("receivedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateMessageDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateMessageDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateMessageDto is not found in the empty JSON string", PrivateMessageDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateMessageDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateMessageDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("conversationId") != null && !jsonObj.get("conversationId").isJsonNull()) && !jsonObj.get("conversationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationId").toString()));
      }
      if ((jsonObj.get("senderSocialProfileId") != null && !jsonObj.get("senderSocialProfileId").isJsonNull()) && !jsonObj.get("senderSocialProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderSocialProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderSocialProfileId").toString()));
      }
      if ((jsonObj.get("receiverSocialProfileID") != null && !jsonObj.get("receiverSocialProfileID").isJsonNull()) && !jsonObj.get("receiverSocialProfileID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverSocialProfileID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverSocialProfileID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateMessageDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateMessageDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateMessageDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateMessageDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateMessageDto>() {
           @Override
           public void write(JsonWriter out, PrivateMessageDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateMessageDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateMessageDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateMessageDto
   * @throws IOException if the JSON string is invalid with respect to PrivateMessageDto
   */
  public static PrivateMessageDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateMessageDto.class);
  }

  /**
   * Convert an instance of PrivateMessageDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

