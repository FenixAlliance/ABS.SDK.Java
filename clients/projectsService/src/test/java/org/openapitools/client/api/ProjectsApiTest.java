/*
 * ProjectsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.ProjectCreateDto;
import org.openapitools.client.model.ProjectDtoEnvelope;
import org.openapitools.client.model.ProjectDtoListEnvelope;
import org.openapitools.client.model.ProjectPeriodCreateDto;
import org.openapitools.client.model.ProjectPeriodUpdateDto;
import org.openapitools.client.model.ProjectTaskCreateDto;
import org.openapitools.client.model.ProjectTaskDtoListEnvelope;
import org.openapitools.client.model.ProjectTaskUpdateDto;
import org.openapitools.client.model.ProjectTimeLogDtoListEnvelope;
import org.openapitools.client.model.ProjectUpdateDto;
import org.openapitools.client.model.TaskCategoryDtoListEnvelope;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsCountGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2ProjectsServiceProjectsCountGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectDtoListEnvelope response = api.apiV2ProjectsServiceProjectsGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsPostTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectCreateDto projectCreateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsPost(tenantId, apiVersion, xApiVersion, projectCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdDeleteTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdDelete(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectDtoEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdPeriodsGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectPeriodCreateDto projectPeriodCreateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdPeriodsGet(projectId, tenantId, apiVersion, xApiVersion, projectPeriodCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdDeleteTest() throws ApiException {
        UUID projectId = null;
        UUID projectPeriodId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdDelete(projectId, projectPeriodId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdPutTest() throws ApiException {
        UUID projectId = null;
        UUID projectPeriodId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectPeriodUpdateDto projectPeriodUpdateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdPut(projectId, projectPeriodId, tenantId, apiVersion, xApiVersion, projectPeriodUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdPutTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectUpdateDto projectUpdateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdPut(projectId, tenantId, apiVersion, xApiVersion, projectUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTaskCategoriesCountGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2ProjectsServiceProjectsProjectIdTaskCategoriesCountGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTaskCategoriesGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        TaskCategoryDtoListEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTaskCategoriesGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTasksCountGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2ProjectsServiceProjectsProjectIdTasksCountGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTasksGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTaskDtoListEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTasksGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTasksPostTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTaskCreateDto projectTaskCreateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTasksPost(projectId, tenantId, apiVersion, xApiVersion, projectTaskCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID projectId = null;
        UUID projectTaskId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdDelete(tenantId, projectId, projectTaskId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdPutTest() throws ApiException {
        UUID projectId = null;
        UUID projectTaskId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTaskUpdateDto projectTaskUpdateDto = null;
        EmptyEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdPut(projectId, projectTaskId, tenantId, apiVersion, xApiVersion, projectTaskUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTimeLogsCountGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.apiV2ProjectsServiceProjectsProjectIdTimeLogsCountGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2ProjectsServiceProjectsProjectIdTimeLogsGetTest() throws ApiException {
        UUID projectId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ProjectTimeLogDtoListEnvelope response = api.apiV2ProjectsServiceProjectsProjectIdTimeLogsGet(projectId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
