/*
 * QuotesService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedQuoteDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.QuoteCreateDto;
import org.openapitools.client.model.QuoteDtoEnvelope;
import org.openapitools.client.model.QuoteDtoListEnvelope;
import org.openapitools.client.model.QuoteLineCreateDto;
import org.openapitools.client.model.QuoteLineDtoEnvelope;
import org.openapitools.client.model.QuoteLineDtoListEnvelope;
import org.openapitools.client.model.QuoteLineUpdateDto;
import org.openapitools.client.model.QuoteUpdateDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuotesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2QuotesServiceQuotesCountGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesCountGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesCountGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesCountGet(Async)");
        }

        return apiV2QuotesServiceQuotesCountGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2QuotesServiceQuotesCountGet(UUID tenantId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2QuotesServiceQuotesCountGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2QuotesServiceQuotesCountGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesCountGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesCountGetAsync(UUID tenantId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesCountGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesExtendedGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesExtendedGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/Extended";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesExtendedGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesExtendedGet(Async)");
        }

        return apiV2QuotesServiceQuotesExtendedGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ExtendedQuoteDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedQuoteDtoListEnvelope apiV2QuotesServiceQuotesExtendedGet(UUID tenantId) throws ApiException {
        ApiResponse<ExtendedQuoteDtoListEnvelope> localVarResp = apiV2QuotesServiceQuotesExtendedGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;ExtendedQuoteDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedQuoteDtoListEnvelope> apiV2QuotesServiceQuotesExtendedGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesExtendedGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ExtendedQuoteDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesExtendedGetAsync(UUID tenantId, final ApiCallback<ExtendedQuoteDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesExtendedGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<ExtendedQuoteDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesGet(Async)");
        }

        return apiV2QuotesServiceQuotesGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return QuoteDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDtoListEnvelope apiV2QuotesServiceQuotesGet(UUID tenantId) throws ApiException {
        ApiResponse<QuoteDtoListEnvelope> localVarResp = apiV2QuotesServiceQuotesGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;QuoteDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDtoListEnvelope> apiV2QuotesServiceQuotesGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<QuoteDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesGetAsync(UUID tenantId, final ApiCallback<QuoteDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<QuoteDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesPost
     * @param tenantId  (required)
     * @param quoteCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesPostCall(UUID tenantId, QuoteCreateDto quoteCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesPostValidateBeforeCall(UUID tenantId, QuoteCreateDto quoteCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesPost(Async)");
        }

        return apiV2QuotesServiceQuotesPostCall(tenantId, quoteCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesPost(UUID tenantId, QuoteCreateDto quoteCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesPostWithHttpInfo(tenantId, quoteCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesPostWithHttpInfo(UUID tenantId, QuoteCreateDto quoteCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesPostValidateBeforeCall(tenantId, quoteCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesPostAsync(UUID tenantId, QuoteCreateDto quoteCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesPostValidateBeforeCall(tenantId, quoteCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdCalculatePut
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdCalculatePutCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Calculate"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdCalculatePutValidateBeforeCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdCalculatePut(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdCalculatePut(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdCalculatePutCall(tenantId, quoteId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdCalculatePut(UUID tenantId, UUID quoteId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo(tenantId, quoteId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdCalculatePutWithHttpInfo(UUID tenantId, UUID quoteId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdCalculatePutValidateBeforeCall(tenantId, quoteId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdCalculatePutAsync(UUID tenantId, UUID quoteId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdCalculatePutValidateBeforeCall(tenantId, quoteId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdDelete
     * @param quoteId  (required)
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdDeleteCall(UUID quoteId, UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdDeleteValidateBeforeCall(UUID quoteId, UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdDelete(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdDelete(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdDeleteCall(quoteId, tenantId, _callback);

    }

    /**
     * 
     * 
     * @param quoteId  (required)
     * @param tenantId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdDelete(UUID quoteId, UUID tenantId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo(quoteId, tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param quoteId  (required)
     * @param tenantId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdDeleteWithHttpInfo(UUID quoteId, UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdDeleteValidateBeforeCall(quoteId, tenantId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param quoteId  (required)
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdDeleteAsync(UUID quoteId, UUID tenantId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdDeleteValidateBeforeCall(quoteId, tenantId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesCountGet
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesCountGetCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/Count"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesCountGetValidateBeforeCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesCountGet(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesCountGet(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesCountGetCall(tenantId, quoteId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2QuotesServiceQuotesQuoteIdLinesCountGet(UUID tenantId, UUID quoteId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo(tenantId, quoteId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2QuotesServiceQuotesQuoteIdLinesCountGetWithHttpInfo(UUID tenantId, UUID quoteId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesCountGetValidateBeforeCall(tenantId, quoteId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesCountGetAsync(UUID tenantId, UUID quoteId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesCountGetValidateBeforeCall(tenantId, quoteId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesGet
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param itemId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesGetCall(UUID tenantId, UUID quoteId, UUID itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesGetValidateBeforeCall(UUID tenantId, UUID quoteId, UUID itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesGet(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesGet(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesGetCall(tenantId, quoteId, itemId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param itemId  (optional)
     * @return QuoteLineDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QuoteLineDtoListEnvelope apiV2QuotesServiceQuotesQuoteIdLinesGet(UUID tenantId, UUID quoteId, UUID itemId) throws ApiException {
        ApiResponse<QuoteLineDtoListEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo(tenantId, quoteId, itemId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param itemId  (optional)
     * @return ApiResponse&lt;QuoteLineDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteLineDtoListEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesGetWithHttpInfo(UUID tenantId, UUID quoteId, UUID itemId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesGetValidateBeforeCall(tenantId, quoteId, itemId, null);
        Type localVarReturnType = new TypeToken<QuoteLineDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param itemId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesGetAsync(UUID tenantId, UUID quoteId, UUID itemId, final ApiCallback<QuoteLineDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesGetValidateBeforeCall(tenantId, quoteId, itemId, _callback);
        Type localVarReturnType = new TypeToken<QuoteLineDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesPost
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesPostCall(UUID tenantId, UUID quoteId, QuoteLineCreateDto quoteLineCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteLineCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesPostValidateBeforeCall(UUID tenantId, UUID quoteId, QuoteLineCreateDto quoteLineCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesPost(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesPost(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesPostCall(tenantId, quoteId, quoteLineCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdLinesPost(UUID tenantId, UUID quoteId, QuoteLineCreateDto quoteLineCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo(tenantId, quoteId, quoteLineCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesPostWithHttpInfo(UUID tenantId, UUID quoteId, QuoteLineCreateDto quoteLineCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesPostValidateBeforeCall(tenantId, quoteId, quoteLineCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesPostAsync(UUID tenantId, UUID quoteId, QuoteLineCreateDto quoteLineCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesPostValidateBeforeCall(tenantId, quoteId, quoteLineCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}/Calculate"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "quoteLineId" + "}", localVarApiClient.escapeString(quoteLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutValidateBeforeCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'quoteLineId' is set
        if (quoteLineId == null) {
            throw new ApiException("Missing the required parameter 'quoteLineId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutCall(tenantId, quoteId, quoteLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo(tenantId, quoteId, quoteLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutWithHttpInfo(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutValidateBeforeCall(tenantId, quoteId, quoteLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutAsync(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutValidateBeforeCall(tenantId, quoteId, quoteLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "quoteLineId" + "}", localVarApiClient.escapeString(quoteLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteValidateBeforeCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(Async)");
        }

        // verify the required parameter 'quoteLineId' is set
        if (quoteLineId == null) {
            throw new ApiException("Missing the required parameter 'quoteLineId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteCall(tenantId, quoteId, quoteLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo(tenantId, quoteId, quoteLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteWithHttpInfo(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteValidateBeforeCall(tenantId, quoteId, quoteLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteAsync(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteValidateBeforeCall(tenantId, quoteId, quoteLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "quoteLineId" + "}", localVarApiClient.escapeString(quoteLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetValidateBeforeCall(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(Async)");
        }

        // verify the required parameter 'quoteLineId' is set
        if (quoteLineId == null) {
            throw new ApiException("Missing the required parameter 'quoteLineId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetCall(tenantId, quoteId, quoteLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return QuoteLineDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QuoteLineDtoEnvelope apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        ApiResponse<QuoteLineDtoEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo(tenantId, quoteId, quoteLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @return ApiResponse&lt;QuoteLineDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteLineDtoEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetWithHttpInfo(UUID tenantId, UUID quoteId, UUID quoteLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetValidateBeforeCall(tenantId, quoteId, quoteLineId, null);
        Type localVarReturnType = new TypeToken<QuoteLineDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetAsync(UUID tenantId, UUID quoteId, UUID quoteLineId, final ApiCallback<QuoteLineDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetValidateBeforeCall(tenantId, quoteId, quoteLineId, _callback);
        Type localVarReturnType = new TypeToken<QuoteLineDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param quoteLineUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutCall(UUID tenantId, UUID quoteId, UUID quoteLineId, QuoteLineUpdateDto quoteLineUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteLineUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}/Lines/{quoteLineId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()))
            .replace("{" + "quoteLineId" + "}", localVarApiClient.escapeString(quoteLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutValidateBeforeCall(UUID tenantId, UUID quoteId, UUID quoteLineId, QuoteLineUpdateDto quoteLineUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(Async)");
        }

        // verify the required parameter 'quoteLineId' is set
        if (quoteLineId == null) {
            throw new ApiException("Missing the required parameter 'quoteLineId' when calling apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutCall(tenantId, quoteId, quoteLineId, quoteLineUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param quoteLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(UUID tenantId, UUID quoteId, UUID quoteLineId, QuoteLineUpdateDto quoteLineUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo(tenantId, quoteId, quoteLineId, quoteLineUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param quoteLineUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutWithHttpInfo(UUID tenantId, UUID quoteId, UUID quoteLineId, QuoteLineUpdateDto quoteLineUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutValidateBeforeCall(tenantId, quoteId, quoteLineId, quoteLineUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteLineId  (required)
     * @param quoteLineUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutAsync(UUID tenantId, UUID quoteId, UUID quoteLineId, QuoteLineUpdateDto quoteLineUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutValidateBeforeCall(tenantId, quoteId, quoteLineId, quoteLineUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2QuotesServiceQuotesQuoteIdPut
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdPutCall(UUID tenantId, UUID quoteId, QuoteUpdateDto quoteUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quoteUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2QuotesServiceQuotesQuoteIdPutValidateBeforeCall(UUID tenantId, UUID quoteId, QuoteUpdateDto quoteUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2QuotesServiceQuotesQuoteIdPut(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling apiV2QuotesServiceQuotesQuoteIdPut(Async)");
        }

        return apiV2QuotesServiceQuotesQuoteIdPutCall(tenantId, quoteId, quoteUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2QuotesServiceQuotesQuoteIdPut(UUID tenantId, UUID quoteId, QuoteUpdateDto quoteUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo(tenantId, quoteId, quoteUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2QuotesServiceQuotesQuoteIdPutWithHttpInfo(UUID tenantId, UUID quoteId, QuoteUpdateDto quoteUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdPutValidateBeforeCall(tenantId, quoteId, quoteUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param quoteUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2QuotesServiceQuotesQuoteIdPutAsync(UUID tenantId, UUID quoteId, QuoteUpdateDto quoteUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2QuotesServiceQuotesQuoteIdPutValidateBeforeCall(tenantId, quoteId, quoteUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteAsync
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsyncCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/QuotesService/Quotes/{quoteId}"
            .replace("{" + "quoteId" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteAsyncValidateBeforeCall(UUID tenantId, UUID quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getQuoteAsync(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getQuoteAsync(Async)");
        }

        return getQuoteAsyncCall(tenantId, quoteId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return QuoteDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public QuoteDtoEnvelope getQuoteAsync(UUID tenantId, UUID quoteId) throws ApiException {
        ApiResponse<QuoteDtoEnvelope> localVarResp = getQuoteAsyncWithHttpInfo(tenantId, quoteId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @return ApiResponse&lt;QuoteDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteDtoEnvelope> getQuoteAsyncWithHttpInfo(UUID tenantId, UUID quoteId) throws ApiException {
        okhttp3.Call localVarCall = getQuoteAsyncValidateBeforeCall(tenantId, quoteId, null);
        Type localVarReturnType = new TypeToken<QuoteDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param quoteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsyncAsync(UUID tenantId, UUID quoteId, final ApiCallback<QuoteDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteAsyncValidateBeforeCall(tenantId, quoteId, _callback);
        Type localVarReturnType = new TypeToken<QuoteDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
