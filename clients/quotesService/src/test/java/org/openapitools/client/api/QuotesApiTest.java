/*
 * QuotesService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedQuoteDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.QuoteCreateDto;
import org.openapitools.client.model.QuoteDtoEnvelope;
import org.openapitools.client.model.QuoteDtoListEnvelope;
import org.openapitools.client.model.QuoteLineCreateDto;
import org.openapitools.client.model.QuoteLineDtoEnvelope;
import org.openapitools.client.model.QuoteLineDtoListEnvelope;
import org.openapitools.client.model.QuoteLineUpdateDto;
import org.openapitools.client.model.QuoteUpdateDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotesApi
 */
@Disabled
public class QuotesApiTest {

    private final QuotesApi api = new QuotesApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesCountGetTest() throws ApiException {
        UUID tenantId = null;
        Int32Envelope response = api.apiV2QuotesServiceQuotesCountGet(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesExtendedGetTest() throws ApiException {
        UUID tenantId = null;
        ExtendedQuoteDtoListEnvelope response = api.apiV2QuotesServiceQuotesExtendedGet(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesGetTest() throws ApiException {
        UUID tenantId = null;
        QuoteDtoListEnvelope response = api.apiV2QuotesServiceQuotesGet(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesPostTest() throws ApiException {
        UUID tenantId = null;
        QuoteCreateDto quoteCreateDto = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesPost(tenantId, quoteCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdCalculatePutTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdCalculatePut(tenantId, quoteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdDeleteTest() throws ApiException {
        UUID quoteId = null;
        UUID tenantId = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdDelete(quoteId, tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesCountGetTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        Int32Envelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesCountGet(tenantId, quoteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesGetTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        UUID itemId = null;
        QuoteLineDtoListEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesGet(tenantId, quoteId, itemId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesPostTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        QuoteLineCreateDto quoteLineCreateDto = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesPost(tenantId, quoteId, quoteLineCreateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePutTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        UUID quoteLineId = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(tenantId, quoteId, quoteLineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDeleteTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        UUID quoteLineId = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(tenantId, quoteId, quoteLineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGetTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        UUID quoteLineId = null;
        QuoteLineDtoEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(tenantId, quoteId, quoteLineId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        UUID quoteLineId = null;
        QuoteLineUpdateDto quoteLineUpdateDto = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(tenantId, quoteId, quoteLineId, quoteLineUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2QuotesServiceQuotesQuoteIdPutTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        QuoteUpdateDto quoteUpdateDto = null;
        EmptyEnvelope response = api.apiV2QuotesServiceQuotesQuoteIdPut(tenantId, quoteId, quoteUpdateDto);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuoteAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID quoteId = null;
        QuoteDtoEnvelope response = api.getQuoteAsync(tenantId, quoteId);
        // TODO: test validations
    }

}
