/*
 * WalletsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedOrderDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.InvoiceDtoListEnvelope;
import org.openapitools.client.model.LocationCreateDto;
import org.openapitools.client.model.LocationDtoEnvelope;
import org.openapitools.client.model.LocationDtoListEnvelope;
import org.openapitools.client.model.LocationUpdateDto;
import org.openapitools.client.model.OrderDtoListEnvelope;
import org.openapitools.client.model.PaymentDtoListEnvelope;
import java.util.UUID;
import org.openapitools.client.model.WalletDtoEnvelope;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WalletsApi
 */
@Disabled
public class WalletsApiTest {

    private final WalletsApi api = new WalletsApi();

    /**
     * Create Wallet Location
     *
     * Create a new location for a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWalletLocationAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        LocationCreateDto locationCreateDto = null;
        EmptyEnvelope response = api.createWalletLocationAsync(walletId, apiVersion, xApiVersion, locationCreateDto);
        // TODO: test validations
    }

    /**
     * Delete Wallet Location
     *
     * Delete a specific location of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWalletLocationAsyncTest() throws ApiException {
        UUID walletId = null;
        UUID locationId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.deleteWalletLocationAsync(walletId, locationId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Incoming Payments
     *
     * Get incoming payments of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIncomingPaymentsAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PaymentDtoListEnvelope response = api.getIncomingPaymentsAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Incoming Payments Count
     *
     * Get incoming payments count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIncomingPaymentsCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getIncomingPaymentsCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Incoming Wallet Invoices
     *
     * Get incoming invoices of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIncomingWalletInvoicesAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        InvoiceDtoListEnvelope response = api.getIncomingWalletInvoicesAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Incoming Wallet Invoices Count
     *
     * Get incoming invoices count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIncomingWalletInvoicesCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getIncomingWalletInvoicesCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Outgoing Payments
     *
     * Get outgoing payments of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingPaymentsAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PaymentDtoListEnvelope response = api.getOutgoingPaymentsAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Outgoing Payments Count
     *
     * Get outgoing payments count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingPaymentsCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getOutgoingPaymentsCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Outgoing Wallet Invoices
     *
     * Get outgoing invoices of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingWalletInvoicesAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        InvoiceDtoListEnvelope response = api.getOutgoingWalletInvoicesAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Outgoing Wallet Invoices Count
     *
     * Get outgoing invoices count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutgoingWalletInvoicesCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getOutgoingWalletInvoicesCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Details
     *
     * Get details of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletDetailsAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        WalletDtoEnvelope response = api.getWalletDetailsAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Extended Orders
     *
     * Get extended orders of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletExtendedOrdersAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedOrderDtoListEnvelope response = api.getWalletExtendedOrdersAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Invoices
     *
     * Get invoices of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletInvoicesAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        InvoiceDtoListEnvelope response = api.getWalletInvoicesAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Invoices Count
     *
     * Get invoices count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletInvoicesCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getWalletInvoicesCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Location
     *
     * Get a specific location of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletLocationAsyncTest() throws ApiException {
        UUID walletId = null;
        UUID locationId = null;
        String apiVersion = null;
        String xApiVersion = null;
        LocationDtoEnvelope response = api.getWalletLocationAsync(walletId, locationId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Locations
     *
     * Get locations of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletLocationsAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        LocationDtoListEnvelope response = api.getWalletLocationsAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Locations Count
     *
     * Get locations count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletLocationsCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getWalletLocationsCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Orders
     *
     * Get orders of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletOrdersAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        OrderDtoListEnvelope response = api.getWalletOrdersAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Orders Count
     *
     * Get orders count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletOrdersCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getWalletOrdersCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Payments
     *
     * Get payments of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletPaymentsAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        PaymentDtoListEnvelope response = api.getWalletPaymentsAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get Wallet Payments Count
     *
     * Get payments count of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWalletPaymentsCountAsyncTest() throws ApiException {
        UUID walletId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.getWalletPaymentsCountAsync(walletId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Update Wallet Location
     *
     * Update a specific location of a specific wallet by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWalletLocationAsyncTest() throws ApiException {
        UUID walletId = null;
        UUID locationId = null;
        String apiVersion = null;
        String xApiVersion = null;
        LocationUpdateDto locationUpdateDto = null;
        EmptyEnvelope response = api.updateWalletLocationAsync(walletId, locationId, apiVersion, xApiVersion, locationUpdateDto);
        // TODO: test validations
    }

}
