/*
 * SystemService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BooleanEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.GeneralValidationFailureListEnvelope;
import org.openapitools.client.model.LicenseValidationRequest;
import org.openapitools.client.model.SuiteLicenseAssignmentDtoListEnvelope;
import org.openapitools.client.model.SuiteLicenseDtoEnvelope;
import org.openapitools.client.model.SuiteLicenseDtoListEnvelope;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicensingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicensingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2SystemServiceLicensingLicensesGet
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesGetCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesGetValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        return apiV2SystemServiceLicensingLicensesGetCall(tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseDtoListEnvelope apiV2SystemServiceLicensingLicensesGet(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseDtoListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesGetWithHttpInfo(tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseDtoListEnvelope> apiV2SystemServiceLicensingLicensesGetWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesGetAsync(UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesGetValidateBeforeCall(tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/{licenseId}/Assignments"
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetValidateBeforeCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet(Async)");
        }

        return apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseAssignmentDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseAssignmentDtoListEnvelope apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetWithHttpInfo(licenseId, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseAssignmentDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetWithHttpInfo(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetAsync(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseAssignmentDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesLicenseIdAttributesGet
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/{licenseId}/Attributes"
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetValidateBeforeCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling apiV2SystemServiceLicensingLicensesLicenseIdAttributesGet(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2SystemServiceLicensingLicensesLicenseIdAttributesGet(Async)");
        }

        return apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseAssignmentDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseAssignmentDtoListEnvelope apiV2SystemServiceLicensingLicensesLicenseIdAttributesGet(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetWithHttpInfo(licenseId, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseAssignmentDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetWithHttpInfo(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetAsync(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseAssignmentDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/{licenseId}/Features"
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetValidateBeforeCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet(Async)");
        }

        return apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseAssignmentDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseAssignmentDtoListEnvelope apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetWithHttpInfo(licenseId, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseAssignmentDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetWithHttpInfo(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetAsync(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseAssignmentDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesLicenseIdGet
     * @param licenseId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdGetCall(UUID licenseId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/{licenseId}"
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdGetValidateBeforeCall(UUID licenseId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling apiV2SystemServiceLicensingLicensesLicenseIdGet(Async)");
        }

        return apiV2SystemServiceLicensingLicensesLicenseIdGetCall(licenseId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseDtoEnvelope apiV2SystemServiceLicensingLicensesLicenseIdGet(UUID licenseId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseDtoEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesLicenseIdGetWithHttpInfo(licenseId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseDtoEnvelope> apiV2SystemServiceLicensingLicensesLicenseIdGetWithHttpInfo(UUID licenseId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdGetValidateBeforeCall(licenseId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdGetAsync(UUID licenseId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdGetValidateBeforeCall(licenseId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesLicenseIdQuotaGet
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/{licenseId}/Quota"
            .replace("{" + "licenseId" + "}", localVarApiClient.escapeString(licenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetValidateBeforeCall(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseId' is set
        if (licenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseId' when calling apiV2SystemServiceLicensingLicensesLicenseIdQuotaGet(Async)");
        }

        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2SystemServiceLicensingLicensesLicenseIdQuotaGet(Async)");
        }

        return apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return SuiteLicenseAssignmentDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SuiteLicenseAssignmentDtoListEnvelope apiV2SystemServiceLicensingLicensesLicenseIdQuotaGet(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetWithHttpInfo(licenseId, tenantId, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;SuiteLicenseAssignmentDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuiteLicenseAssignmentDtoListEnvelope> apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetWithHttpInfo(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseId  (required)
     * @param tenantId  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetAsync(UUID licenseId, UUID tenantId, String apiVersion, String xApiVersion, final ApiCallback<SuiteLicenseAssignmentDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetValidateBeforeCall(licenseId, tenantId, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<SuiteLicenseAssignmentDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesRedeemPost
     * @param tenantId  (required)
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesRedeemPostCall(UUID tenantId, LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseValidationRequest;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/Redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "text/xml",
            "application/*+xml",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesRedeemPostValidateBeforeCall(UUID tenantId, LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2SystemServiceLicensingLicensesRedeemPost(Async)");
        }

        // verify the required parameter 'licenseValidationRequest' is set
        if (licenseValidationRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseValidationRequest' when calling apiV2SystemServiceLicensingLicensesRedeemPost(Async)");
        }

        return apiV2SystemServiceLicensingLicensesRedeemPostCall(tenantId, licenseValidationRequest, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return BooleanEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BooleanEnvelope apiV2SystemServiceLicensingLicensesRedeemPost(UUID tenantId, LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<BooleanEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesRedeemPostWithHttpInfo(tenantId, licenseValidationRequest, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;BooleanEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BooleanEnvelope> apiV2SystemServiceLicensingLicensesRedeemPostWithHttpInfo(UUID tenantId, LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesRedeemPostValidateBeforeCall(tenantId, licenseValidationRequest, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<BooleanEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesRedeemPostAsync(UUID tenantId, LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback<BooleanEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesRedeemPostValidateBeforeCall(tenantId, licenseValidationRequest, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<BooleanEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2SystemServiceLicensingLicensesValidatePost
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesValidatePostCall(LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseValidationRequest;

        // create path and map variables
        String localVarPath = "/api/v2/SystemService/Licensing/Licenses/Validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "text/xml",
            "application/*+xml",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2SystemServiceLicensingLicensesValidatePostValidateBeforeCall(LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseValidationRequest' is set
        if (licenseValidationRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseValidationRequest' when calling apiV2SystemServiceLicensingLicensesValidatePost(Async)");
        }

        return apiV2SystemServiceLicensingLicensesValidatePostCall(licenseValidationRequest, apiVersion, xApiVersion, _callback);

    }

    /**
     * 
     * 
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return GeneralValidationFailureListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GeneralValidationFailureListEnvelope apiV2SystemServiceLicensingLicensesValidatePost(LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion) throws ApiException {
        ApiResponse<GeneralValidationFailureListEnvelope> localVarResp = apiV2SystemServiceLicensingLicensesValidatePostWithHttpInfo(licenseValidationRequest, apiVersion, xApiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @return ApiResponse&lt;GeneralValidationFailureListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralValidationFailureListEnvelope> apiV2SystemServiceLicensingLicensesValidatePostWithHttpInfo(LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion) throws ApiException {
        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesValidatePostValidateBeforeCall(licenseValidationRequest, apiVersion, xApiVersion, null);
        Type localVarReturnType = new TypeToken<GeneralValidationFailureListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param licenseValidationRequest  (required)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2SystemServiceLicensingLicensesValidatePostAsync(LicenseValidationRequest licenseValidationRequest, String apiVersion, String xApiVersion, final ApiCallback<GeneralValidationFailureListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2SystemServiceLicensingLicensesValidatePostValidateBeforeCall(licenseValidationRequest, apiVersion, xApiVersion, _callback);
        Type localVarReturnType = new TypeToken<GeneralValidationFailureListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
