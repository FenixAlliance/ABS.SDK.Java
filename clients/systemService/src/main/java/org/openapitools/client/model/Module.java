/*
 * SystemService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ISwaggerSpec;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Module
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:38:08.171450100-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class Module {
  public static final String SERIALIZED_NAME_ENABLE = "enable";
  @SerializedName(SERIALIZED_NAME_ENABLE)
  private Boolean enable;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_AUTHOR_URL = "authorUrl";
  @SerializedName(SERIALIZED_NAME_AUTHOR_URL)
  private String authorUrl;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_REQUIRE_LICENSE_ACCEPTANCE = "requireLicenseAcceptance";
  @SerializedName(SERIALIZED_NAME_REQUIRE_LICENSE_ACCEPTANCE)
  private Boolean requireLicenseAcceptance;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_NU_SPEC_PATH = "nuSpecPath";
  @SerializedName(SERIALIZED_NAME_NU_SPEC_PATH)
  private String nuSpecPath;

  public static final String SERIALIZED_NAME_MANIFEST = "manifest";
  @SerializedName(SERIALIZED_NAME_MANIFEST)
  private String manifest;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private String documentation;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_SWAGGER_SPEC = "swaggerSpec";
  @SerializedName(SERIALIZED_NAME_SWAGGER_SPEC)
  private ISwaggerSpec swaggerSpec;

  public static final String SERIALIZED_NAME_SWAGGER_SPECS = "swaggerSpecs";
  @SerializedName(SERIALIZED_NAME_SWAGGER_SPECS)
  private List<ISwaggerSpec> swaggerSpecs;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_ASSEMBLY_PATHS = "assemblyPaths";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_PATHS)
  private List<String> assemblyPaths;

  public static final String SERIALIZED_NAME_MARKED_FOR_DELETION = "markedForDeletion";
  @SerializedName(SERIALIZED_NAME_MARKED_FOR_DELETION)
  private Boolean markedForDeletion;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Module() {
  }

  public Module(
     Boolean active, 
     String fullName
  ) {
    this();
    this.active = active;
    this.fullName = fullName;
  }

  public Module enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

  /**
   * Get enable
   * @return enable
   */
  @javax.annotation.Nullable
  public Boolean getEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }


  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }



  public Module order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public Module id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Module name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }



  public Module description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Module type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Module _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }


  public Module author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public Module authorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
    return this;
  }

  /**
   * Get authorUrl
   * @return authorUrl
   */
  @javax.annotation.Nullable
  public String getAuthorUrl() {
    return authorUrl;
  }

  public void setAuthorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
  }


  public Module license(String license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public Module requireLicenseAcceptance(Boolean requireLicenseAcceptance) {
    this.requireLicenseAcceptance = requireLicenseAcceptance;
    return this;
  }

  /**
   * Get requireLicenseAcceptance
   * @return requireLicenseAcceptance
   */
  @javax.annotation.Nullable
  public Boolean getRequireLicenseAcceptance() {
    return requireLicenseAcceptance;
  }

  public void setRequireLicenseAcceptance(Boolean requireLicenseAcceptance) {
    this.requireLicenseAcceptance = requireLicenseAcceptance;
  }


  public Module repository(String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public Module path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Module icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public Module image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public Module nuSpecPath(String nuSpecPath) {
    this.nuSpecPath = nuSpecPath;
    return this;
  }

  /**
   * Get nuSpecPath
   * @return nuSpecPath
   */
  @javax.annotation.Nullable
  public String getNuSpecPath() {
    return nuSpecPath;
  }

  public void setNuSpecPath(String nuSpecPath) {
    this.nuSpecPath = nuSpecPath;
  }


  public Module manifest(String manifest) {
    this.manifest = manifest;
    return this;
  }

  /**
   * Get manifest
   * @return manifest
   */
  @javax.annotation.Nullable
  public String getManifest() {
    return manifest;
  }

  public void setManifest(String manifest) {
    this.manifest = manifest;
  }


  public Module documentation(String documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Get documentation
   * @return documentation
   */
  @javax.annotation.Nullable
  public String getDocumentation() {
    return documentation;
  }

  public void setDocumentation(String documentation) {
    this.documentation = documentation;
  }


  public Module website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public Module logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public Module swaggerSpec(ISwaggerSpec swaggerSpec) {
    this.swaggerSpec = swaggerSpec;
    return this;
  }

  /**
   * Get swaggerSpec
   * @return swaggerSpec
   */
  @javax.annotation.Nullable
  public ISwaggerSpec getSwaggerSpec() {
    return swaggerSpec;
  }

  public void setSwaggerSpec(ISwaggerSpec swaggerSpec) {
    this.swaggerSpec = swaggerSpec;
  }


  public Module swaggerSpecs(List<ISwaggerSpec> swaggerSpecs) {
    this.swaggerSpecs = swaggerSpecs;
    return this;
  }

  public Module addSwaggerSpecsItem(ISwaggerSpec swaggerSpecsItem) {
    if (this.swaggerSpecs == null) {
      this.swaggerSpecs = new ArrayList<>();
    }
    this.swaggerSpecs.add(swaggerSpecsItem);
    return this;
  }

  /**
   * Get swaggerSpecs
   * @return swaggerSpecs
   */
  @javax.annotation.Nullable
  public List<ISwaggerSpec> getSwaggerSpecs() {
    return swaggerSpecs;
  }

  public void setSwaggerSpecs(List<ISwaggerSpec> swaggerSpecs) {
    this.swaggerSpecs = swaggerSpecs;
  }


  public Module url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Module assemblyPaths(List<String> assemblyPaths) {
    this.assemblyPaths = assemblyPaths;
    return this;
  }

  public Module addAssemblyPathsItem(String assemblyPathsItem) {
    if (this.assemblyPaths == null) {
      this.assemblyPaths = new ArrayList<>();
    }
    this.assemblyPaths.add(assemblyPathsItem);
    return this;
  }

  /**
   * Get assemblyPaths
   * @return assemblyPaths
   */
  @javax.annotation.Nullable
  public List<String> getAssemblyPaths() {
    return assemblyPaths;
  }

  public void setAssemblyPaths(List<String> assemblyPaths) {
    this.assemblyPaths = assemblyPaths;
  }


  public Module markedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
    return this;
  }

  /**
   * Get markedForDeletion
   * @return markedForDeletion
   */
  @javax.annotation.Nullable
  public Boolean getMarkedForDeletion() {
    return markedForDeletion;
  }

  public void setMarkedForDeletion(Boolean markedForDeletion) {
    this.markedForDeletion = markedForDeletion;
  }


  public Module version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Module module = (Module) o;
    return Objects.equals(this.enable, module.enable) &&
        Objects.equals(this.active, module.active) &&
        Objects.equals(this.order, module.order) &&
        Objects.equals(this.id, module.id) &&
        Objects.equals(this.name, module.name) &&
        Objects.equals(this.fullName, module.fullName) &&
        Objects.equals(this.description, module.description) &&
        Objects.equals(this.type, module.type) &&
        Objects.equals(this._configuration, module._configuration) &&
        Objects.equals(this.author, module.author) &&
        Objects.equals(this.authorUrl, module.authorUrl) &&
        Objects.equals(this.license, module.license) &&
        Objects.equals(this.requireLicenseAcceptance, module.requireLicenseAcceptance) &&
        Objects.equals(this.repository, module.repository) &&
        Objects.equals(this.path, module.path) &&
        Objects.equals(this.icon, module.icon) &&
        Objects.equals(this.image, module.image) &&
        Objects.equals(this.nuSpecPath, module.nuSpecPath) &&
        Objects.equals(this.manifest, module.manifest) &&
        Objects.equals(this.documentation, module.documentation) &&
        Objects.equals(this.website, module.website) &&
        Objects.equals(this.logo, module.logo) &&
        Objects.equals(this.swaggerSpec, module.swaggerSpec) &&
        Objects.equals(this.swaggerSpecs, module.swaggerSpecs) &&
        Objects.equals(this.url, module.url) &&
        Objects.equals(this.assemblyPaths, module.assemblyPaths) &&
        Objects.equals(this.markedForDeletion, module.markedForDeletion) &&
        Objects.equals(this.version, module.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enable, active, order, id, name, fullName, description, type, _configuration, author, authorUrl, license, requireLicenseAcceptance, repository, path, icon, image, nuSpecPath, manifest, documentation, website, logo, swaggerSpec, swaggerSpecs, url, assemblyPaths, markedForDeletion, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Module {\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    authorUrl: ").append(toIndentedString(authorUrl)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    requireLicenseAcceptance: ").append(toIndentedString(requireLicenseAcceptance)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    nuSpecPath: ").append(toIndentedString(nuSpecPath)).append("\n");
    sb.append("    manifest: ").append(toIndentedString(manifest)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    swaggerSpec: ").append(toIndentedString(swaggerSpec)).append("\n");
    sb.append("    swaggerSpecs: ").append(toIndentedString(swaggerSpecs)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    assemblyPaths: ").append(toIndentedString(assemblyPaths)).append("\n");
    sb.append("    markedForDeletion: ").append(toIndentedString(markedForDeletion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enable");
    openapiFields.add("active");
    openapiFields.add("order");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("fullName");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("configuration");
    openapiFields.add("author");
    openapiFields.add("authorUrl");
    openapiFields.add("license");
    openapiFields.add("requireLicenseAcceptance");
    openapiFields.add("repository");
    openapiFields.add("path");
    openapiFields.add("icon");
    openapiFields.add("image");
    openapiFields.add("nuSpecPath");
    openapiFields.add("manifest");
    openapiFields.add("documentation");
    openapiFields.add("website");
    openapiFields.add("logo");
    openapiFields.add("swaggerSpec");
    openapiFields.add("swaggerSpecs");
    openapiFields.add("url");
    openapiFields.add("assemblyPaths");
    openapiFields.add("markedForDeletion");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Module
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Module.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Module is not found in the empty JSON string", Module.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Module.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Module` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) && !jsonObj.get("configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("authorUrl") != null && !jsonObj.get("authorUrl").isJsonNull()) && !jsonObj.get("authorUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorUrl").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("nuSpecPath") != null && !jsonObj.get("nuSpecPath").isJsonNull()) && !jsonObj.get("nuSpecPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nuSpecPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nuSpecPath").toString()));
      }
      if ((jsonObj.get("manifest") != null && !jsonObj.get("manifest").isJsonNull()) && !jsonObj.get("manifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifest").toString()));
      }
      if ((jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) && !jsonObj.get("documentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentation").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      // validate the optional field `swaggerSpec`
      if (jsonObj.get("swaggerSpec") != null && !jsonObj.get("swaggerSpec").isJsonNull()) {
        ISwaggerSpec.validateJsonElement(jsonObj.get("swaggerSpec"));
      }
      if (jsonObj.get("swaggerSpecs") != null && !jsonObj.get("swaggerSpecs").isJsonNull()) {
        JsonArray jsonArrayswaggerSpecs = jsonObj.getAsJsonArray("swaggerSpecs");
        if (jsonArrayswaggerSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("swaggerSpecs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `swaggerSpecs` to be an array in the JSON string but got `%s`", jsonObj.get("swaggerSpecs").toString()));
          }

          // validate the optional field `swaggerSpecs` (array)
          for (int i = 0; i < jsonArrayswaggerSpecs.size(); i++) {
            ISwaggerSpec.validateJsonElement(jsonArrayswaggerSpecs.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("assemblyPaths") != null && !jsonObj.get("assemblyPaths").isJsonNull() && !jsonObj.get("assemblyPaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyPaths` to be an array in the JSON string but got `%s`", jsonObj.get("assemblyPaths").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Module.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Module' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Module> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Module.class));

       return (TypeAdapter<T>) new TypeAdapter<Module>() {
           @Override
           public void write(JsonWriter out, Module value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Module read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Module given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Module
   * @throws IOException if the JSON string is invalid with respect to Module
   */
  public static Module fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Module.class);
  }

  /**
   * Convert an instance of Module to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

