/*
 * SystemService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BooleanEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.GeneralValidationFailureListEnvelope;
import org.openapitools.client.model.LicenseValidationRequest;
import org.openapitools.client.model.SuiteLicenseAssignmentDtoListEnvelope;
import org.openapitools.client.model.SuiteLicenseDtoEnvelope;
import org.openapitools.client.model.SuiteLicenseDtoListEnvelope;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LicensingApi
 */
@Disabled
public class LicensingApiTest {

    private final LicensingApi api = new LicensingApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesGetTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseDtoListEnvelope response = api.apiV2SystemServiceLicensingLicensesGet(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGetTest() throws ApiException {
        UUID licenseId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseAssignmentDtoListEnvelope response = api.apiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet(licenseId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesLicenseIdAttributesGetTest() throws ApiException {
        UUID licenseId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseAssignmentDtoListEnvelope response = api.apiV2SystemServiceLicensingLicensesLicenseIdAttributesGet(licenseId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGetTest() throws ApiException {
        UUID licenseId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseAssignmentDtoListEnvelope response = api.apiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet(licenseId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesLicenseIdGetTest() throws ApiException {
        UUID licenseId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseDtoEnvelope response = api.apiV2SystemServiceLicensingLicensesLicenseIdGet(licenseId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesLicenseIdQuotaGetTest() throws ApiException {
        UUID licenseId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SuiteLicenseAssignmentDtoListEnvelope response = api.apiV2SystemServiceLicensingLicensesLicenseIdQuotaGet(licenseId, tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesRedeemPostTest() throws ApiException {
        UUID tenantId = null;
        LicenseValidationRequest licenseValidationRequest = null;
        String apiVersion = null;
        String xApiVersion = null;
        BooleanEnvelope response = api.apiV2SystemServiceLicensingLicensesRedeemPost(tenantId, licenseValidationRequest, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV2SystemServiceLicensingLicensesValidatePostTest() throws ApiException {
        LicenseValidationRequest licenseValidationRequest = null;
        String apiVersion = null;
        String xApiVersion = null;
        GeneralValidationFailureListEnvelope response = api.apiV2SystemServiceLicensingLicensesValidatePost(licenseValidationRequest, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
