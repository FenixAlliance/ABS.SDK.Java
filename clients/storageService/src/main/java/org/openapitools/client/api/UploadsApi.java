/*
 * StorageService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import java.io.File;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UploadsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2StorageServiceUploadsPost
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param _abstract  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param _file  (optional)
     * @param iD  (optional)
     * @param timestamp  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2StorageServiceUploadsPostCall(UUID tenantId, String apiVersion, String xApiVersion, String notes, String title, String author, Boolean isFolder, String fileName, String _abstract, String keyWords, Boolean validResponse, String parentFileUploadId, String filePath, File _file, UUID iD, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/StorageService/Uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notes != null) {
            localVarFormParams.put("notes", notes);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (author != null) {
            localVarFormParams.put("author", author);
        }

        if (isFolder != null) {
            localVarFormParams.put("isFolder", isFolder);
        }

        if (fileName != null) {
            localVarFormParams.put("fileName", fileName);
        }

        if (_abstract != null) {
            localVarFormParams.put("abstract", _abstract);
        }

        if (keyWords != null) {
            localVarFormParams.put("keyWords", keyWords);
        }

        if (validResponse != null) {
            localVarFormParams.put("validResponse", validResponse);
        }

        if (parentFileUploadId != null) {
            localVarFormParams.put("parentFileUploadId", parentFileUploadId);
        }

        if (filePath != null) {
            localVarFormParams.put("filePath", filePath);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (iD != null) {
            localVarFormParams.put("iD", iD);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (xApiVersion != null) {
            localVarHeaderParams.put("x-api-version", localVarApiClient.parameterToString(xApiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2StorageServiceUploadsPostValidateBeforeCall(UUID tenantId, String apiVersion, String xApiVersion, String notes, String title, String author, Boolean isFolder, String fileName, String _abstract, String keyWords, Boolean validResponse, String parentFileUploadId, String filePath, File _file, UUID iD, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        return apiV2StorageServiceUploadsPostCall(tenantId, apiVersion, xApiVersion, notes, title, author, isFolder, fileName, _abstract, keyWords, validResponse, parentFileUploadId, filePath, _file, iD, timestamp, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param _abstract  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param _file  (optional)
     * @param iD  (optional)
     * @param timestamp  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2StorageServiceUploadsPost(UUID tenantId, String apiVersion, String xApiVersion, String notes, String title, String author, Boolean isFolder, String fileName, String _abstract, String keyWords, Boolean validResponse, String parentFileUploadId, String filePath, File _file, UUID iD, OffsetDateTime timestamp) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2StorageServiceUploadsPostWithHttpInfo(tenantId, apiVersion, xApiVersion, notes, title, author, isFolder, fileName, _abstract, keyWords, validResponse, parentFileUploadId, filePath, _file, iD, timestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param _abstract  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param _file  (optional)
     * @param iD  (optional)
     * @param timestamp  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2StorageServiceUploadsPostWithHttpInfo(UUID tenantId, String apiVersion, String xApiVersion, String notes, String title, String author, Boolean isFolder, String fileName, String _abstract, String keyWords, Boolean validResponse, String parentFileUploadId, String filePath, File _file, UUID iD, OffsetDateTime timestamp) throws ApiException {
        okhttp3.Call localVarCall = apiV2StorageServiceUploadsPostValidateBeforeCall(tenantId, apiVersion, xApiVersion, notes, title, author, isFolder, fileName, _abstract, keyWords, validResponse, parentFileUploadId, filePath, _file, iD, timestamp, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (optional)
     * @param apiVersion  (optional)
     * @param xApiVersion  (optional)
     * @param notes  (optional)
     * @param title  (optional)
     * @param author  (optional)
     * @param isFolder  (optional)
     * @param fileName  (optional)
     * @param _abstract  (optional)
     * @param keyWords  (optional)
     * @param validResponse  (optional)
     * @param parentFileUploadId  (optional)
     * @param filePath  (optional)
     * @param _file  (optional)
     * @param iD  (optional)
     * @param timestamp  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2StorageServiceUploadsPostAsync(UUID tenantId, String apiVersion, String xApiVersion, String notes, String title, String author, Boolean isFolder, String fileName, String _abstract, String keyWords, Boolean validResponse, String parentFileUploadId, String filePath, File _file, UUID iD, OffsetDateTime timestamp, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2StorageServiceUploadsPostValidateBeforeCall(tenantId, apiVersion, xApiVersion, notes, title, author, isFolder, fileName, _abstract, keyWords, validResponse, parentFileUploadId, filePath, _file, iD, timestamp, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
