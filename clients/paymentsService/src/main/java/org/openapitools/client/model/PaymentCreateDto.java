/*
 * PaymentsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentCreateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:37:00.731802400-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class PaymentCreateDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_EMISOR_WALLET_ID = "emisorWalletId";
  @SerializedName(SERIALIZED_NAME_EMISOR_WALLET_ID)
  private String emisorWalletId;

  public static final String SERIALIZED_NAME_RECEIVER_WALLET_ID = "receiverWalletId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_WALLET_ID)
  private String receiverWalletId;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_FOREX_RATE = "forexRate";
  @SerializedName(SERIALIZED_NAME_FOREX_RATE)
  private Double forexRate;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public static final String SERIALIZED_NAME_TOTAL_TAXES = "totalTaxes";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAXES)
  private Double totalTaxes;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DATA_LABEL = "dataLabel";
  @SerializedName(SERIALIZED_NAME_DATA_LABEL)
  private String dataLabel;

  public static final String SERIALIZED_NAME_DATA1 = "data1";
  @SerializedName(SERIALIZED_NAME_DATA1)
  private String data1;

  public static final String SERIALIZED_NAME_DATA1_LABEL = "data1Label";
  @SerializedName(SERIALIZED_NAME_DATA1_LABEL)
  private String data1Label;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;

  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private String authorization;

  public static final String SERIALIZED_NAME_REFERENCE_CODE = "referenceCode";
  @SerializedName(SERIALIZED_NAME_REFERENCE_CODE)
  private String referenceCode;

  public static final String SERIALIZED_NAME_CORRELATION_CODE = "correlationCode";
  @SerializedName(SERIALIZED_NAME_CORRELATION_CODE)
  private String correlationCode;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  /**
   * Gets or Sets onBehalfOf
   */
  @JsonAdapter(OnBehalfOfEnum.Adapter.class)
  public enum OnBehalfOfEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    OnBehalfOfEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnBehalfOfEnum fromValue(Integer value) {
      for (OnBehalfOfEnum b : OnBehalfOfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnBehalfOfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnBehalfOfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnBehalfOfEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return OnBehalfOfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      OnBehalfOfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private OnBehalfOfEnum onBehalfOf;

  /**
   * Gets or Sets paymentType
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    PaymentTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(Integer value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11);

    private Integer value;

    PaymentStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(Integer value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PaymentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PaymentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_BASE_COST = "baseCost";
  @SerializedName(SERIALIZED_NAME_BASE_COST)
  private Double baseCost;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIGNATURE_MISMATCH = "signatureMismatch";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_MISMATCH)
  private Boolean signatureMismatch;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "isExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_MARKED_FOR_REVISION = "markedForRevision";
  @SerializedName(SERIALIZED_NAME_MARKED_FOR_REVISION)
  private Boolean markedForRevision;

  public static final String SERIALIZED_NAME_FOREX_RATES_SNAPSHOT = "forexRatesSnapshot";
  @SerializedName(SERIALIZED_NAME_FOREX_RATES_SNAPSHOT)
  private String forexRatesSnapshot;

  public static final String SERIALIZED_NAME_OFFICIAL_ID = "officialId";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_ID)
  private String officialId;

  public static final String SERIALIZED_NAME_OFFICIAL_ID_EXPEDITION_DATE = "officialIdExpeditionDate";
  @SerializedName(SERIALIZED_NAME_OFFICIAL_ID_EXPEDITION_DATE)
  private OffsetDateTime officialIdExpeditionDate;

  public static final String SERIALIZED_NAME_FISCAL_IDENTIFICATION_TYPE_ID = "fiscalIdentificationTypeId";
  @SerializedName(SERIALIZED_NAME_FISCAL_IDENTIFICATION_TYPE_ID)
  private String fiscalIdentificationTypeId;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private String billingAddress;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_CELLPHONE = "cellphone";
  @SerializedName(SERIALIZED_NAME_CELLPHONE)
  private String cellphone;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_ENTITLEMENT_ID = "entitlementId";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_ID)
  private String entitlementId;

  public static final String SERIALIZED_NAME_ANTI_FRAUD_SCORE = "antiFraudScore";
  @SerializedName(SERIALIZED_NAME_ANTI_FRAUD_SCORE)
  private Double antiFraudScore;

  public static final String SERIALIZED_NAME_CALL_RECORD_U_R_L = "callRecordURL";
  @SerializedName(SERIALIZED_NAME_CALL_RECORD_U_R_L)
  private String callRecordURL;

  public static final String SERIALIZED_NAME_CALLED = "called";
  @SerializedName(SERIALIZED_NAME_CALLED)
  private Boolean called;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_PAYER_PICTURE_TIMESTAMP = "payerPictureTimestamp";
  @SerializedName(SERIALIZED_NAME_PAYER_PICTURE_TIMESTAMP)
  private String payerPictureTimestamp;

  public static final String SERIALIZED_NAME_PAYER_PICTURE = "payerPicture";
  @SerializedName(SERIALIZED_NAME_PAYER_PICTURE)
  private String payerPicture;

  public static final String SERIALIZED_NAME_IDENTIFICATION_PICTURE_TIMESTAMP = "identificationPictureTimestamp";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_PICTURE_TIMESTAMP)
  private String identificationPictureTimestamp;

  public static final String SERIALIZED_NAME_IDENTIFICATION_PICTURE = "identificationPicture";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_PICTURE)
  private String identificationPicture;

  public static final String SERIALIZED_NAME_IDENTIFICATION_BACK_PICTURE = "identificationBackPicture";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_BACK_PICTURE)
  private String identificationBackPicture;

  public static final String SERIALIZED_NAME_IDENTIFICATION_BACK_PICTURE_TIMESTAMP = "identificationBackPictureTimestamp";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_BACK_PICTURE_TIMESTAMP)
  private String identificationBackPictureTimestamp;

  public static final String SERIALIZED_NAME_IP_LOOKUP_ID = "ipLookupId";
  @SerializedName(SERIALIZED_NAME_IP_LOOKUP_ID)
  private String ipLookupId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ACCOUNTING_ENTRY_ID = "accountingEntryId";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_ENTRY_ID)
  private String accountingEntryId;

  public static final String SERIALIZED_NAME_PAYMENT_GATEWAY_ID = "paymentGatewayId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_GATEWAY_ID)
  private String paymentGatewayId;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bankAccountId";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private String bankAccountId;

  public static final String SERIALIZED_NAME_ENROLMENT_ID = "enrolmentId";
  @SerializedName(SERIALIZED_NAME_ENROLMENT_ID)
  private String enrolmentId;

  public static final String SERIALIZED_NAME_BANK_ID = "bankId";
  @SerializedName(SERIALIZED_NAME_BANK_ID)
  private String bankId;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN_ID = "paymentTokenId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN_ID)
  private String paymentTokenId;

  public static final String SERIALIZED_NAME_EMISOR_WALLET_ACCOUNT_ID = "emisorWalletAccountId";
  @SerializedName(SERIALIZED_NAME_EMISOR_WALLET_ACCOUNT_ID)
  private String emisorWalletAccountId;

  public static final String SERIALIZED_NAME_RECEIVER_WALLET_ACCOUNT_ID = "receiverWalletAccountId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_WALLET_ACCOUNT_ID)
  private String receiverWalletAccountId;

  public PaymentCreateDto() {
  }

  public PaymentCreateDto(
     UUID id, 
     OffsetDateTime timestamp
  ) {
    this();
    this.id = id;
    this.timestamp = timestamp;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  public PaymentCreateDto invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * Get invoiceId
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public PaymentCreateDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public PaymentCreateDto emisorWalletId(String emisorWalletId) {
    this.emisorWalletId = emisorWalletId;
    return this;
  }

  /**
   * Get emisorWalletId
   * @return emisorWalletId
   */
  @javax.annotation.Nullable
  public String getEmisorWalletId() {
    return emisorWalletId;
  }

  public void setEmisorWalletId(String emisorWalletId) {
    this.emisorWalletId = emisorWalletId;
  }


  public PaymentCreateDto receiverWalletId(String receiverWalletId) {
    this.receiverWalletId = receiverWalletId;
    return this;
  }

  /**
   * Get receiverWalletId
   * @return receiverWalletId
   */
  @javax.annotation.Nullable
  public String getReceiverWalletId() {
    return receiverWalletId;
  }

  public void setReceiverWalletId(String receiverWalletId) {
    this.receiverWalletId = receiverWalletId;
  }


  public PaymentCreateDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public PaymentCreateDto forexRate(Double forexRate) {
    this.forexRate = forexRate;
    return this;
  }

  /**
   * Get forexRate
   * @return forexRate
   */
  @javax.annotation.Nullable
  public Double getForexRate() {
    return forexRate;
  }

  public void setForexRate(Double forexRate) {
    this.forexRate = forexRate;
  }


  public PaymentCreateDto totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Get totalCost
   * @return totalCost
   */
  @javax.annotation.Nullable
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }


  public PaymentCreateDto totalTaxes(Double totalTaxes) {
    this.totalTaxes = totalTaxes;
    return this;
  }

  /**
   * Get totalTaxes
   * @return totalTaxes
   */
  @javax.annotation.Nullable
  public Double getTotalTaxes() {
    return totalTaxes;
  }

  public void setTotalTaxes(Double totalTaxes) {
    this.totalTaxes = totalTaxes;
  }


  public PaymentCreateDto closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public PaymentCreateDto data(String data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }


  public PaymentCreateDto dataLabel(String dataLabel) {
    this.dataLabel = dataLabel;
    return this;
  }

  /**
   * Get dataLabel
   * @return dataLabel
   */
  @javax.annotation.Nullable
  public String getDataLabel() {
    return dataLabel;
  }

  public void setDataLabel(String dataLabel) {
    this.dataLabel = dataLabel;
  }


  public PaymentCreateDto data1(String data1) {
    this.data1 = data1;
    return this;
  }

  /**
   * Get data1
   * @return data1
   */
  @javax.annotation.Nullable
  public String getData1() {
    return data1;
  }

  public void setData1(String data1) {
    this.data1 = data1;
  }


  public PaymentCreateDto data1Label(String data1Label) {
    this.data1Label = data1Label;
    return this;
  }

  /**
   * Get data1Label
   * @return data1Label
   */
  @javax.annotation.Nullable
  public String getData1Label() {
    return data1Label;
  }

  public void setData1Label(String data1Label) {
    this.data1Label = data1Label;
  }


  public PaymentCreateDto response(String response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public String getResponse() {
    return response;
  }

  public void setResponse(String response) {
    this.response = response;
  }


  public PaymentCreateDto authorization(String authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Get authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public String getAuthorization() {
    return authorization;
  }

  public void setAuthorization(String authorization) {
    this.authorization = authorization;
  }


  public PaymentCreateDto referenceCode(String referenceCode) {
    this.referenceCode = referenceCode;
    return this;
  }

  /**
   * Get referenceCode
   * @return referenceCode
   */
  @javax.annotation.Nullable
  public String getReferenceCode() {
    return referenceCode;
  }

  public void setReferenceCode(String referenceCode) {
    this.referenceCode = referenceCode;
  }


  public PaymentCreateDto correlationCode(String correlationCode) {
    this.correlationCode = correlationCode;
    return this;
  }

  /**
   * Get correlationCode
   * @return correlationCode
   */
  @javax.annotation.Nullable
  public String getCorrelationCode() {
    return correlationCode;
  }

  public void setCorrelationCode(String correlationCode) {
    this.correlationCode = correlationCode;
  }


  public PaymentCreateDto lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public PaymentCreateDto onBehalfOf(OnBehalfOfEnum onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public OnBehalfOfEnum getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(OnBehalfOfEnum onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public PaymentCreateDto paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public PaymentCreateDto paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * Get paymentStatus
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public PaymentCreateDto baseCost(Double baseCost) {
    this.baseCost = baseCost;
    return this;
  }

  /**
   * Get baseCost
   * @return baseCost
   */
  @javax.annotation.Nullable
  public Double getBaseCost() {
    return baseCost;
  }

  public void setBaseCost(Double baseCost) {
    this.baseCost = baseCost;
  }


  public PaymentCreateDto signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public PaymentCreateDto signatureMismatch(Boolean signatureMismatch) {
    this.signatureMismatch = signatureMismatch;
    return this;
  }

  /**
   * Get signatureMismatch
   * @return signatureMismatch
   */
  @javax.annotation.Nullable
  public Boolean getSignatureMismatch() {
    return signatureMismatch;
  }

  public void setSignatureMismatch(Boolean signatureMismatch) {
    this.signatureMismatch = signatureMismatch;
  }


  public PaymentCreateDto isExternal(Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

  /**
   * Get isExternal
   * @return isExternal
   */
  @javax.annotation.Nullable
  public Boolean getIsExternal() {
    return isExternal;
  }

  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public PaymentCreateDto markedForRevision(Boolean markedForRevision) {
    this.markedForRevision = markedForRevision;
    return this;
  }

  /**
   * Get markedForRevision
   * @return markedForRevision
   */
  @javax.annotation.Nullable
  public Boolean getMarkedForRevision() {
    return markedForRevision;
  }

  public void setMarkedForRevision(Boolean markedForRevision) {
    this.markedForRevision = markedForRevision;
  }


  public PaymentCreateDto forexRatesSnapshot(String forexRatesSnapshot) {
    this.forexRatesSnapshot = forexRatesSnapshot;
    return this;
  }

  /**
   * Get forexRatesSnapshot
   * @return forexRatesSnapshot
   */
  @javax.annotation.Nullable
  public String getForexRatesSnapshot() {
    return forexRatesSnapshot;
  }

  public void setForexRatesSnapshot(String forexRatesSnapshot) {
    this.forexRatesSnapshot = forexRatesSnapshot;
  }


  public PaymentCreateDto officialId(String officialId) {
    this.officialId = officialId;
    return this;
  }

  /**
   * Get officialId
   * @return officialId
   */
  @javax.annotation.Nullable
  public String getOfficialId() {
    return officialId;
  }

  public void setOfficialId(String officialId) {
    this.officialId = officialId;
  }


  public PaymentCreateDto officialIdExpeditionDate(OffsetDateTime officialIdExpeditionDate) {
    this.officialIdExpeditionDate = officialIdExpeditionDate;
    return this;
  }

  /**
   * Get officialIdExpeditionDate
   * @return officialIdExpeditionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOfficialIdExpeditionDate() {
    return officialIdExpeditionDate;
  }

  public void setOfficialIdExpeditionDate(OffsetDateTime officialIdExpeditionDate) {
    this.officialIdExpeditionDate = officialIdExpeditionDate;
  }


  public PaymentCreateDto fiscalIdentificationTypeId(String fiscalIdentificationTypeId) {
    this.fiscalIdentificationTypeId = fiscalIdentificationTypeId;
    return this;
  }

  /**
   * Get fiscalIdentificationTypeId
   * @return fiscalIdentificationTypeId
   */
  @javax.annotation.Nullable
  public String getFiscalIdentificationTypeId() {
    return fiscalIdentificationTypeId;
  }

  public void setFiscalIdentificationTypeId(String fiscalIdentificationTypeId) {
    this.fiscalIdentificationTypeId = fiscalIdentificationTypeId;
  }


  public PaymentCreateDto billingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public String getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(String billingAddress) {
    this.billingAddress = billingAddress;
  }


  public PaymentCreateDto phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public PaymentCreateDto cellphone(String cellphone) {
    this.cellphone = cellphone;
    return this;
  }

  /**
   * Get cellphone
   * @return cellphone
   */
  @javax.annotation.Nullable
  public String getCellphone() {
    return cellphone;
  }

  public void setCellphone(String cellphone) {
    this.cellphone = cellphone;
  }


  public PaymentCreateDto department(String department) {
    this.department = department;
    return this;
  }

  /**
   * Get department
   * @return department
   */
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }

  public void setDepartment(String department) {
    this.department = department;
  }


  public PaymentCreateDto city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public PaymentCreateDto countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * Get countryId
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public PaymentCreateDto locationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * Get locationId
   * @return locationId
   */
  @javax.annotation.Nullable
  public String getLocationId() {
    return locationId;
  }

  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public PaymentCreateDto entitlementId(String entitlementId) {
    this.entitlementId = entitlementId;
    return this;
  }

  /**
   * Get entitlementId
   * @return entitlementId
   */
  @javax.annotation.Nullable
  public String getEntitlementId() {
    return entitlementId;
  }

  public void setEntitlementId(String entitlementId) {
    this.entitlementId = entitlementId;
  }


  public PaymentCreateDto antiFraudScore(Double antiFraudScore) {
    this.antiFraudScore = antiFraudScore;
    return this;
  }

  /**
   * Get antiFraudScore
   * @return antiFraudScore
   */
  @javax.annotation.Nullable
  public Double getAntiFraudScore() {
    return antiFraudScore;
  }

  public void setAntiFraudScore(Double antiFraudScore) {
    this.antiFraudScore = antiFraudScore;
  }


  public PaymentCreateDto callRecordURL(String callRecordURL) {
    this.callRecordURL = callRecordURL;
    return this;
  }

  /**
   * Get callRecordURL
   * @return callRecordURL
   */
  @javax.annotation.Nullable
  public String getCallRecordURL() {
    return callRecordURL;
  }

  public void setCallRecordURL(String callRecordURL) {
    this.callRecordURL = callRecordURL;
  }


  public PaymentCreateDto called(Boolean called) {
    this.called = called;
    return this;
  }

  /**
   * Get called
   * @return called
   */
  @javax.annotation.Nullable
  public Boolean getCalled() {
    return called;
  }

  public void setCalled(Boolean called) {
    this.called = called;
  }


  public PaymentCreateDto verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Get verified
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public PaymentCreateDto payerPictureTimestamp(String payerPictureTimestamp) {
    this.payerPictureTimestamp = payerPictureTimestamp;
    return this;
  }

  /**
   * Get payerPictureTimestamp
   * @return payerPictureTimestamp
   */
  @javax.annotation.Nullable
  public String getPayerPictureTimestamp() {
    return payerPictureTimestamp;
  }

  public void setPayerPictureTimestamp(String payerPictureTimestamp) {
    this.payerPictureTimestamp = payerPictureTimestamp;
  }


  public PaymentCreateDto payerPicture(String payerPicture) {
    this.payerPicture = payerPicture;
    return this;
  }

  /**
   * Get payerPicture
   * @return payerPicture
   */
  @javax.annotation.Nullable
  public String getPayerPicture() {
    return payerPicture;
  }

  public void setPayerPicture(String payerPicture) {
    this.payerPicture = payerPicture;
  }


  public PaymentCreateDto identificationPictureTimestamp(String identificationPictureTimestamp) {
    this.identificationPictureTimestamp = identificationPictureTimestamp;
    return this;
  }

  /**
   * Get identificationPictureTimestamp
   * @return identificationPictureTimestamp
   */
  @javax.annotation.Nullable
  public String getIdentificationPictureTimestamp() {
    return identificationPictureTimestamp;
  }

  public void setIdentificationPictureTimestamp(String identificationPictureTimestamp) {
    this.identificationPictureTimestamp = identificationPictureTimestamp;
  }


  public PaymentCreateDto identificationPicture(String identificationPicture) {
    this.identificationPicture = identificationPicture;
    return this;
  }

  /**
   * Get identificationPicture
   * @return identificationPicture
   */
  @javax.annotation.Nullable
  public String getIdentificationPicture() {
    return identificationPicture;
  }

  public void setIdentificationPicture(String identificationPicture) {
    this.identificationPicture = identificationPicture;
  }


  public PaymentCreateDto identificationBackPicture(String identificationBackPicture) {
    this.identificationBackPicture = identificationBackPicture;
    return this;
  }

  /**
   * Get identificationBackPicture
   * @return identificationBackPicture
   */
  @javax.annotation.Nullable
  public String getIdentificationBackPicture() {
    return identificationBackPicture;
  }

  public void setIdentificationBackPicture(String identificationBackPicture) {
    this.identificationBackPicture = identificationBackPicture;
  }


  public PaymentCreateDto identificationBackPictureTimestamp(String identificationBackPictureTimestamp) {
    this.identificationBackPictureTimestamp = identificationBackPictureTimestamp;
    return this;
  }

  /**
   * Get identificationBackPictureTimestamp
   * @return identificationBackPictureTimestamp
   */
  @javax.annotation.Nullable
  public String getIdentificationBackPictureTimestamp() {
    return identificationBackPictureTimestamp;
  }

  public void setIdentificationBackPictureTimestamp(String identificationBackPictureTimestamp) {
    this.identificationBackPictureTimestamp = identificationBackPictureTimestamp;
  }


  public PaymentCreateDto ipLookupId(String ipLookupId) {
    this.ipLookupId = ipLookupId;
    return this;
  }

  /**
   * Get ipLookupId
   * @return ipLookupId
   */
  @javax.annotation.Nullable
  public String getIpLookupId() {
    return ipLookupId;
  }

  public void setIpLookupId(String ipLookupId) {
    this.ipLookupId = ipLookupId;
  }


  public PaymentCreateDto orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public PaymentCreateDto accountingEntryId(String accountingEntryId) {
    this.accountingEntryId = accountingEntryId;
    return this;
  }

  /**
   * Get accountingEntryId
   * @return accountingEntryId
   */
  @javax.annotation.Nullable
  public String getAccountingEntryId() {
    return accountingEntryId;
  }

  public void setAccountingEntryId(String accountingEntryId) {
    this.accountingEntryId = accountingEntryId;
  }


  public PaymentCreateDto paymentGatewayId(String paymentGatewayId) {
    this.paymentGatewayId = paymentGatewayId;
    return this;
  }

  /**
   * Get paymentGatewayId
   * @return paymentGatewayId
   */
  @javax.annotation.Nullable
  public String getPaymentGatewayId() {
    return paymentGatewayId;
  }

  public void setPaymentGatewayId(String paymentGatewayId) {
    this.paymentGatewayId = paymentGatewayId;
  }


  public PaymentCreateDto bankAccountId(String bankAccountId) {
    this.bankAccountId = bankAccountId;
    return this;
  }

  /**
   * Get bankAccountId
   * @return bankAccountId
   */
  @javax.annotation.Nullable
  public String getBankAccountId() {
    return bankAccountId;
  }

  public void setBankAccountId(String bankAccountId) {
    this.bankAccountId = bankAccountId;
  }


  public PaymentCreateDto enrolmentId(String enrolmentId) {
    this.enrolmentId = enrolmentId;
    return this;
  }

  /**
   * Get enrolmentId
   * @return enrolmentId
   */
  @javax.annotation.Nullable
  public String getEnrolmentId() {
    return enrolmentId;
  }

  public void setEnrolmentId(String enrolmentId) {
    this.enrolmentId = enrolmentId;
  }


  public PaymentCreateDto bankId(String bankId) {
    this.bankId = bankId;
    return this;
  }

  /**
   * Get bankId
   * @return bankId
   */
  @javax.annotation.Nullable
  public String getBankId() {
    return bankId;
  }

  public void setBankId(String bankId) {
    this.bankId = bankId;
  }


  public PaymentCreateDto paymentTokenId(String paymentTokenId) {
    this.paymentTokenId = paymentTokenId;
    return this;
  }

  /**
   * Get paymentTokenId
   * @return paymentTokenId
   */
  @javax.annotation.Nullable
  public String getPaymentTokenId() {
    return paymentTokenId;
  }

  public void setPaymentTokenId(String paymentTokenId) {
    this.paymentTokenId = paymentTokenId;
  }


  public PaymentCreateDto emisorWalletAccountId(String emisorWalletAccountId) {
    this.emisorWalletAccountId = emisorWalletAccountId;
    return this;
  }

  /**
   * Get emisorWalletAccountId
   * @return emisorWalletAccountId
   */
  @javax.annotation.Nullable
  public String getEmisorWalletAccountId() {
    return emisorWalletAccountId;
  }

  public void setEmisorWalletAccountId(String emisorWalletAccountId) {
    this.emisorWalletAccountId = emisorWalletAccountId;
  }


  public PaymentCreateDto receiverWalletAccountId(String receiverWalletAccountId) {
    this.receiverWalletAccountId = receiverWalletAccountId;
    return this;
  }

  /**
   * Get receiverWalletAccountId
   * @return receiverWalletAccountId
   */
  @javax.annotation.Nullable
  public String getReceiverWalletAccountId() {
    return receiverWalletAccountId;
  }

  public void setReceiverWalletAccountId(String receiverWalletAccountId) {
    this.receiverWalletAccountId = receiverWalletAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCreateDto paymentCreateDto = (PaymentCreateDto) o;
    return Objects.equals(this.id, paymentCreateDto.id) &&
        Objects.equals(this.timestamp, paymentCreateDto.timestamp) &&
        Objects.equals(this.invoiceId, paymentCreateDto.invoiceId) &&
        Objects.equals(this.tenantId, paymentCreateDto.tenantId) &&
        Objects.equals(this.emisorWalletId, paymentCreateDto.emisorWalletId) &&
        Objects.equals(this.receiverWalletId, paymentCreateDto.receiverWalletId) &&
        Objects.equals(this.currencyId, paymentCreateDto.currencyId) &&
        Objects.equals(this.forexRate, paymentCreateDto.forexRate) &&
        Objects.equals(this.totalCost, paymentCreateDto.totalCost) &&
        Objects.equals(this.totalTaxes, paymentCreateDto.totalTaxes) &&
        Objects.equals(this.closed, paymentCreateDto.closed) &&
        Objects.equals(this.data, paymentCreateDto.data) &&
        Objects.equals(this.dataLabel, paymentCreateDto.dataLabel) &&
        Objects.equals(this.data1, paymentCreateDto.data1) &&
        Objects.equals(this.data1Label, paymentCreateDto.data1Label) &&
        Objects.equals(this.response, paymentCreateDto.response) &&
        Objects.equals(this.authorization, paymentCreateDto.authorization) &&
        Objects.equals(this.referenceCode, paymentCreateDto.referenceCode) &&
        Objects.equals(this.correlationCode, paymentCreateDto.correlationCode) &&
        Objects.equals(this.lastUpdated, paymentCreateDto.lastUpdated) &&
        Objects.equals(this.onBehalfOf, paymentCreateDto.onBehalfOf) &&
        Objects.equals(this.paymentType, paymentCreateDto.paymentType) &&
        Objects.equals(this.paymentStatus, paymentCreateDto.paymentStatus) &&
        Objects.equals(this.baseCost, paymentCreateDto.baseCost) &&
        Objects.equals(this.signature, paymentCreateDto.signature) &&
        Objects.equals(this.signatureMismatch, paymentCreateDto.signatureMismatch) &&
        Objects.equals(this.isExternal, paymentCreateDto.isExternal) &&
        Objects.equals(this.markedForRevision, paymentCreateDto.markedForRevision) &&
        Objects.equals(this.forexRatesSnapshot, paymentCreateDto.forexRatesSnapshot) &&
        Objects.equals(this.officialId, paymentCreateDto.officialId) &&
        Objects.equals(this.officialIdExpeditionDate, paymentCreateDto.officialIdExpeditionDate) &&
        Objects.equals(this.fiscalIdentificationTypeId, paymentCreateDto.fiscalIdentificationTypeId) &&
        Objects.equals(this.billingAddress, paymentCreateDto.billingAddress) &&
        Objects.equals(this.phone, paymentCreateDto.phone) &&
        Objects.equals(this.cellphone, paymentCreateDto.cellphone) &&
        Objects.equals(this.department, paymentCreateDto.department) &&
        Objects.equals(this.city, paymentCreateDto.city) &&
        Objects.equals(this.countryId, paymentCreateDto.countryId) &&
        Objects.equals(this.locationId, paymentCreateDto.locationId) &&
        Objects.equals(this.entitlementId, paymentCreateDto.entitlementId) &&
        Objects.equals(this.antiFraudScore, paymentCreateDto.antiFraudScore) &&
        Objects.equals(this.callRecordURL, paymentCreateDto.callRecordURL) &&
        Objects.equals(this.called, paymentCreateDto.called) &&
        Objects.equals(this.verified, paymentCreateDto.verified) &&
        Objects.equals(this.payerPictureTimestamp, paymentCreateDto.payerPictureTimestamp) &&
        Objects.equals(this.payerPicture, paymentCreateDto.payerPicture) &&
        Objects.equals(this.identificationPictureTimestamp, paymentCreateDto.identificationPictureTimestamp) &&
        Objects.equals(this.identificationPicture, paymentCreateDto.identificationPicture) &&
        Objects.equals(this.identificationBackPicture, paymentCreateDto.identificationBackPicture) &&
        Objects.equals(this.identificationBackPictureTimestamp, paymentCreateDto.identificationBackPictureTimestamp) &&
        Objects.equals(this.ipLookupId, paymentCreateDto.ipLookupId) &&
        Objects.equals(this.orderId, paymentCreateDto.orderId) &&
        Objects.equals(this.accountingEntryId, paymentCreateDto.accountingEntryId) &&
        Objects.equals(this.paymentGatewayId, paymentCreateDto.paymentGatewayId) &&
        Objects.equals(this.bankAccountId, paymentCreateDto.bankAccountId) &&
        Objects.equals(this.enrolmentId, paymentCreateDto.enrolmentId) &&
        Objects.equals(this.bankId, paymentCreateDto.bankId) &&
        Objects.equals(this.paymentTokenId, paymentCreateDto.paymentTokenId) &&
        Objects.equals(this.emisorWalletAccountId, paymentCreateDto.emisorWalletAccountId) &&
        Objects.equals(this.receiverWalletAccountId, paymentCreateDto.receiverWalletAccountId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, invoiceId, tenantId, emisorWalletId, receiverWalletId, currencyId, forexRate, totalCost, totalTaxes, closed, data, dataLabel, data1, data1Label, response, authorization, referenceCode, correlationCode, lastUpdated, onBehalfOf, paymentType, paymentStatus, baseCost, signature, signatureMismatch, isExternal, markedForRevision, forexRatesSnapshot, officialId, officialIdExpeditionDate, fiscalIdentificationTypeId, billingAddress, phone, cellphone, department, city, countryId, locationId, entitlementId, antiFraudScore, callRecordURL, called, verified, payerPictureTimestamp, payerPicture, identificationPictureTimestamp, identificationPicture, identificationBackPicture, identificationBackPictureTimestamp, ipLookupId, orderId, accountingEntryId, paymentGatewayId, bankAccountId, enrolmentId, bankId, paymentTokenId, emisorWalletAccountId, receiverWalletAccountId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCreateDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    emisorWalletId: ").append(toIndentedString(emisorWalletId)).append("\n");
    sb.append("    receiverWalletId: ").append(toIndentedString(receiverWalletId)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    forexRate: ").append(toIndentedString(forexRate)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    totalTaxes: ").append(toIndentedString(totalTaxes)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataLabel: ").append(toIndentedString(dataLabel)).append("\n");
    sb.append("    data1: ").append(toIndentedString(data1)).append("\n");
    sb.append("    data1Label: ").append(toIndentedString(data1Label)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    referenceCode: ").append(toIndentedString(referenceCode)).append("\n");
    sb.append("    correlationCode: ").append(toIndentedString(correlationCode)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    baseCost: ").append(toIndentedString(baseCost)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signatureMismatch: ").append(toIndentedString(signatureMismatch)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    markedForRevision: ").append(toIndentedString(markedForRevision)).append("\n");
    sb.append("    forexRatesSnapshot: ").append(toIndentedString(forexRatesSnapshot)).append("\n");
    sb.append("    officialId: ").append(toIndentedString(officialId)).append("\n");
    sb.append("    officialIdExpeditionDate: ").append(toIndentedString(officialIdExpeditionDate)).append("\n");
    sb.append("    fiscalIdentificationTypeId: ").append(toIndentedString(fiscalIdentificationTypeId)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    cellphone: ").append(toIndentedString(cellphone)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    entitlementId: ").append(toIndentedString(entitlementId)).append("\n");
    sb.append("    antiFraudScore: ").append(toIndentedString(antiFraudScore)).append("\n");
    sb.append("    callRecordURL: ").append(toIndentedString(callRecordURL)).append("\n");
    sb.append("    called: ").append(toIndentedString(called)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    payerPictureTimestamp: ").append(toIndentedString(payerPictureTimestamp)).append("\n");
    sb.append("    payerPicture: ").append(toIndentedString(payerPicture)).append("\n");
    sb.append("    identificationPictureTimestamp: ").append(toIndentedString(identificationPictureTimestamp)).append("\n");
    sb.append("    identificationPicture: ").append(toIndentedString(identificationPicture)).append("\n");
    sb.append("    identificationBackPicture: ").append(toIndentedString(identificationBackPicture)).append("\n");
    sb.append("    identificationBackPictureTimestamp: ").append(toIndentedString(identificationBackPictureTimestamp)).append("\n");
    sb.append("    ipLookupId: ").append(toIndentedString(ipLookupId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    accountingEntryId: ").append(toIndentedString(accountingEntryId)).append("\n");
    sb.append("    paymentGatewayId: ").append(toIndentedString(paymentGatewayId)).append("\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    enrolmentId: ").append(toIndentedString(enrolmentId)).append("\n");
    sb.append("    bankId: ").append(toIndentedString(bankId)).append("\n");
    sb.append("    paymentTokenId: ").append(toIndentedString(paymentTokenId)).append("\n");
    sb.append("    emisorWalletAccountId: ").append(toIndentedString(emisorWalletAccountId)).append("\n");
    sb.append("    receiverWalletAccountId: ").append(toIndentedString(receiverWalletAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("invoiceId");
    openapiFields.add("tenantId");
    openapiFields.add("emisorWalletId");
    openapiFields.add("receiverWalletId");
    openapiFields.add("currencyId");
    openapiFields.add("forexRate");
    openapiFields.add("totalCost");
    openapiFields.add("totalTaxes");
    openapiFields.add("closed");
    openapiFields.add("data");
    openapiFields.add("dataLabel");
    openapiFields.add("data1");
    openapiFields.add("data1Label");
    openapiFields.add("response");
    openapiFields.add("authorization");
    openapiFields.add("referenceCode");
    openapiFields.add("correlationCode");
    openapiFields.add("lastUpdated");
    openapiFields.add("onBehalfOf");
    openapiFields.add("paymentType");
    openapiFields.add("paymentStatus");
    openapiFields.add("baseCost");
    openapiFields.add("signature");
    openapiFields.add("signatureMismatch");
    openapiFields.add("isExternal");
    openapiFields.add("markedForRevision");
    openapiFields.add("forexRatesSnapshot");
    openapiFields.add("officialId");
    openapiFields.add("officialIdExpeditionDate");
    openapiFields.add("fiscalIdentificationTypeId");
    openapiFields.add("billingAddress");
    openapiFields.add("phone");
    openapiFields.add("cellphone");
    openapiFields.add("department");
    openapiFields.add("city");
    openapiFields.add("countryId");
    openapiFields.add("locationId");
    openapiFields.add("entitlementId");
    openapiFields.add("antiFraudScore");
    openapiFields.add("callRecordURL");
    openapiFields.add("called");
    openapiFields.add("verified");
    openapiFields.add("payerPictureTimestamp");
    openapiFields.add("payerPicture");
    openapiFields.add("identificationPictureTimestamp");
    openapiFields.add("identificationPicture");
    openapiFields.add("identificationBackPicture");
    openapiFields.add("identificationBackPictureTimestamp");
    openapiFields.add("ipLookupId");
    openapiFields.add("orderId");
    openapiFields.add("accountingEntryId");
    openapiFields.add("paymentGatewayId");
    openapiFields.add("bankAccountId");
    openapiFields.add("enrolmentId");
    openapiFields.add("bankId");
    openapiFields.add("paymentTokenId");
    openapiFields.add("emisorWalletAccountId");
    openapiFields.add("receiverWalletAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentCreateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentCreateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCreateDto is not found in the empty JSON string", PaymentCreateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentCreateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentCreateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("emisorWalletId") != null && !jsonObj.get("emisorWalletId").isJsonNull()) && !jsonObj.get("emisorWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emisorWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emisorWalletId").toString()));
      }
      if ((jsonObj.get("receiverWalletId") != null && !jsonObj.get("receiverWalletId").isJsonNull()) && !jsonObj.get("receiverWalletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverWalletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverWalletId").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("dataLabel") != null && !jsonObj.get("dataLabel").isJsonNull()) && !jsonObj.get("dataLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataLabel").toString()));
      }
      if ((jsonObj.get("data1") != null && !jsonObj.get("data1").isJsonNull()) && !jsonObj.get("data1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data1").toString()));
      }
      if ((jsonObj.get("data1Label") != null && !jsonObj.get("data1Label").isJsonNull()) && !jsonObj.get("data1Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data1Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data1Label").toString()));
      }
      if ((jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) && !jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
      if ((jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) && !jsonObj.get("authorization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization").toString()));
      }
      if ((jsonObj.get("referenceCode") != null && !jsonObj.get("referenceCode").isJsonNull()) && !jsonObj.get("referenceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceCode").toString()));
      }
      if ((jsonObj.get("correlationCode") != null && !jsonObj.get("correlationCode").isJsonNull()) && !jsonObj.get("correlationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationCode").toString()));
      }
      // validate the optional field `onBehalfOf`
      if (jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) {
        OnBehalfOfEnum.validateJsonElement(jsonObj.get("onBehalfOf"));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        PaymentTypeEnum.validateJsonElement(jsonObj.get("paymentType"));
      }
      // validate the optional field `paymentStatus`
      if (jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) {
        PaymentStatusEnum.validateJsonElement(jsonObj.get("paymentStatus"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("forexRatesSnapshot") != null && !jsonObj.get("forexRatesSnapshot").isJsonNull()) && !jsonObj.get("forexRatesSnapshot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forexRatesSnapshot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forexRatesSnapshot").toString()));
      }
      if ((jsonObj.get("officialId") != null && !jsonObj.get("officialId").isJsonNull()) && !jsonObj.get("officialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officialId").toString()));
      }
      if ((jsonObj.get("fiscalIdentificationTypeId") != null && !jsonObj.get("fiscalIdentificationTypeId").isJsonNull()) && !jsonObj.get("fiscalIdentificationTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fiscalIdentificationTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fiscalIdentificationTypeId").toString()));
      }
      if ((jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) && !jsonObj.get("billingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("cellphone") != null && !jsonObj.get("cellphone").isJsonNull()) && !jsonObj.get("cellphone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cellphone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cellphone").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("countryId") != null && !jsonObj.get("countryId").isJsonNull()) && !jsonObj.get("countryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryId").toString()));
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("entitlementId") != null && !jsonObj.get("entitlementId").isJsonNull()) && !jsonObj.get("entitlementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitlementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitlementId").toString()));
      }
      if ((jsonObj.get("callRecordURL") != null && !jsonObj.get("callRecordURL").isJsonNull()) && !jsonObj.get("callRecordURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callRecordURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callRecordURL").toString()));
      }
      if ((jsonObj.get("payerPictureTimestamp") != null && !jsonObj.get("payerPictureTimestamp").isJsonNull()) && !jsonObj.get("payerPictureTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payerPictureTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payerPictureTimestamp").toString()));
      }
      if ((jsonObj.get("payerPicture") != null && !jsonObj.get("payerPicture").isJsonNull()) && !jsonObj.get("payerPicture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payerPicture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payerPicture").toString()));
      }
      if ((jsonObj.get("identificationPictureTimestamp") != null && !jsonObj.get("identificationPictureTimestamp").isJsonNull()) && !jsonObj.get("identificationPictureTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationPictureTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationPictureTimestamp").toString()));
      }
      if ((jsonObj.get("identificationPicture") != null && !jsonObj.get("identificationPicture").isJsonNull()) && !jsonObj.get("identificationPicture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationPicture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationPicture").toString()));
      }
      if ((jsonObj.get("identificationBackPicture") != null && !jsonObj.get("identificationBackPicture").isJsonNull()) && !jsonObj.get("identificationBackPicture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationBackPicture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationBackPicture").toString()));
      }
      if ((jsonObj.get("identificationBackPictureTimestamp") != null && !jsonObj.get("identificationBackPictureTimestamp").isJsonNull()) && !jsonObj.get("identificationBackPictureTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationBackPictureTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationBackPictureTimestamp").toString()));
      }
      if ((jsonObj.get("ipLookupId") != null && !jsonObj.get("ipLookupId").isJsonNull()) && !jsonObj.get("ipLookupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipLookupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipLookupId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("accountingEntryId") != null && !jsonObj.get("accountingEntryId").isJsonNull()) && !jsonObj.get("accountingEntryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountingEntryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountingEntryId").toString()));
      }
      if ((jsonObj.get("paymentGatewayId") != null && !jsonObj.get("paymentGatewayId").isJsonNull()) && !jsonObj.get("paymentGatewayId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentGatewayId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentGatewayId").toString()));
      }
      if ((jsonObj.get("bankAccountId") != null && !jsonObj.get("bankAccountId").isJsonNull()) && !jsonObj.get("bankAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountId").toString()));
      }
      if ((jsonObj.get("enrolmentId") != null && !jsonObj.get("enrolmentId").isJsonNull()) && !jsonObj.get("enrolmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrolmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrolmentId").toString()));
      }
      if ((jsonObj.get("bankId") != null && !jsonObj.get("bankId").isJsonNull()) && !jsonObj.get("bankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankId").toString()));
      }
      if ((jsonObj.get("paymentTokenId") != null && !jsonObj.get("paymentTokenId").isJsonNull()) && !jsonObj.get("paymentTokenId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentTokenId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentTokenId").toString()));
      }
      if ((jsonObj.get("emisorWalletAccountId") != null && !jsonObj.get("emisorWalletAccountId").isJsonNull()) && !jsonObj.get("emisorWalletAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emisorWalletAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emisorWalletAccountId").toString()));
      }
      if ((jsonObj.get("receiverWalletAccountId") != null && !jsonObj.get("receiverWalletAccountId").isJsonNull()) && !jsonObj.get("receiverWalletAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverWalletAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverWalletAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCreateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCreateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCreateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCreateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCreateDto>() {
           @Override
           public void write(JsonWriter out, PaymentCreateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCreateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentCreateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentCreateDto
   * @throws IOException if the JSON string is invalid with respect to PaymentCreateDto
   */
  public static PaymentCreateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCreateDto.class);
  }

  /**
   * Convert an instance of PaymentCreateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

