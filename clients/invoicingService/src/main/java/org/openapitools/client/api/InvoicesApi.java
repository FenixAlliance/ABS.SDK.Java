/*
 * InvoicingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedInvoiceDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.InvoiceAdjustmentCreateDto;
import org.openapitools.client.model.InvoiceAdjustmentDtoEnvelope;
import org.openapitools.client.model.InvoiceAdjustmentDtoListEnvelope;
import org.openapitools.client.model.InvoiceAdjustmentUpdateDto;
import org.openapitools.client.model.InvoiceCreateDto;
import org.openapitools.client.model.InvoiceDtoEnvelope;
import org.openapitools.client.model.InvoiceDtoListEnvelope;
import org.openapitools.client.model.InvoiceLineAppliedTaxCreateDto;
import org.openapitools.client.model.InvoiceLineAppliedTaxDtoListEnvelope;
import org.openapitools.client.model.InvoiceLineAppliedTaxUpdateDto;
import org.openapitools.client.model.InvoiceLineCreateDto;
import org.openapitools.client.model.InvoiceLineDtoEnvelope;
import org.openapitools.client.model.InvoiceLineDtoListEnvelope;
import org.openapitools.client.model.InvoiceLineUpdateDto;
import org.openapitools.client.model.InvoiceReferenceCreateDto;
import org.openapitools.client.model.InvoiceReferenceDtoEnvelope;
import org.openapitools.client.model.InvoiceReferenceDtoListEnvelope;
import org.openapitools.client.model.InvoiceReferenceUpdateDto;
import org.openapitools.client.model.InvoiceUpdateDto;
import org.openapitools.client.model.MoneyEnvelope;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV2InvoicingServiceInvoicesCountGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesCountGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesCountGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesCountGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesCountGet(UUID tenantId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesCountGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesCountGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesCountGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesCountGetAsync(UUID tenantId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesCountGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesDiscountsAggregatePost
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesDiscountsAggregatePostCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/DiscountsAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyId", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesDiscountsAggregatePostValidateBeforeCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling apiV2InvoicingServiceInvoicesDiscountsAggregatePost(Async)");
        }

        return apiV2InvoicingServiceInvoicesDiscountsAggregatePostCall(UUID, currencyId, _callback);

    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return MoneyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MoneyEnvelope apiV2InvoicingServiceInvoicesDiscountsAggregatePost(List<UUID> UUID, String currencyId) throws ApiException {
        ApiResponse<MoneyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesDiscountsAggregatePostWithHttpInfo(UUID, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return ApiResponse&lt;MoneyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoneyEnvelope> apiV2InvoicingServiceInvoicesDiscountsAggregatePostWithHttpInfo(List<UUID> UUID, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesDiscountsAggregatePostValidateBeforeCall(UUID, currencyId, null);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesDiscountsAggregatePostAsync(List<UUID> UUID, String currencyId, final ApiCallback<MoneyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesDiscountsAggregatePostValidateBeforeCall(UUID, currencyId, _callback);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesExtendedCountGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesExtendedCountGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/Extended/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesExtendedCountGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesExtendedCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesExtendedCountGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesExtendedCountGet(UUID tenantId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesExtendedCountGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesExtendedCountGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesExtendedCountGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesExtendedCountGetAsync(UUID tenantId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesExtendedCountGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesExtendedGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesExtendedGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/Extended";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesExtendedGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesExtendedGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesExtendedGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ExtendedInvoiceDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedInvoiceDtoListEnvelope apiV2InvoicingServiceInvoicesExtendedGet(UUID tenantId) throws ApiException {
        ApiResponse<ExtendedInvoiceDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesExtendedGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;ExtendedInvoiceDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedInvoiceDtoListEnvelope> apiV2InvoicingServiceInvoicesExtendedGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesExtendedGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<ExtendedInvoiceDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesExtendedGetAsync(UUID tenantId, final ApiCallback<ExtendedInvoiceDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesExtendedGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<ExtendedInvoiceDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesGet
     * @param tenantId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesGetCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesGetValidateBeforeCall(UUID tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesGetCall(tenantId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return InvoiceDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDtoListEnvelope apiV2InvoicingServiceInvoicesGet(UUID tenantId) throws ApiException {
        ApiResponse<InvoiceDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesGetWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @return ApiResponse&lt;InvoiceDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDtoListEnvelope> apiV2InvoicingServiceInvoicesGetWithHttpInfo(UUID tenantId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesGetValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<InvoiceDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesGetAsync(UUID tenantId, final ApiCallback<InvoiceDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesGetValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/GlobalSurchargesAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyId", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostValidateBeforeCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost(Async)");
        }

        return apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostCall(UUID, currencyId, _callback);

    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return MoneyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MoneyEnvelope apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost(List<UUID> UUID, String currencyId) throws ApiException {
        ApiResponse<MoneyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostWithHttpInfo(UUID, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return ApiResponse&lt;MoneyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoneyEnvelope> apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostWithHttpInfo(List<UUID> UUID, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostValidateBeforeCall(UUID, currencyId, null);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostAsync(List<UUID> UUID, String currencyId, final ApiCallback<MoneyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePostValidateBeforeCall(UUID, currencyId, _callback);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/Count"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return InvoiceAdjustmentDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceAdjustmentDtoListEnvelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<InvoiceAdjustmentDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;InvoiceAdjustmentDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceAdjustmentDtoListEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<InvoiceAdjustmentDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceAdjustmentId" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(Async)");
        }

        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteCall(tenantId, invoiceId, invoiceAdjustmentId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteWithHttpInfo(tenantId, invoiceId, invoiceAdjustmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteAsync(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceAdjustmentId" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(Async)");
        }

        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetCall(tenantId, invoiceId, invoiceAdjustmentId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @return InvoiceAdjustmentDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceAdjustmentDtoEnvelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId) throws ApiException {
        ApiResponse<InvoiceAdjustmentDtoEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetWithHttpInfo(tenantId, invoiceId, invoiceAdjustmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @return ApiResponse&lt;InvoiceAdjustmentDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceAdjustmentDtoEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, null);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetAsync(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, final ApiCallback<InvoiceAdjustmentDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGetValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceAdjustmentDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param invoiceAdjustmentUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, InvoiceAdjustmentUpdateDto invoiceAdjustmentUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments/{invoiceAdjustmentId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceAdjustmentId" + "}", localVarApiClient.escapeString(invoiceAdjustmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, InvoiceAdjustmentUpdateDto invoiceAdjustmentUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(Async)");
        }

        // verify the required parameter 'invoiceAdjustmentId' is set
        if (invoiceAdjustmentId == null) {
            throw new ApiException("Missing the required parameter 'invoiceAdjustmentId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutCall(tenantId, invoiceId, invoiceAdjustmentId, invoiceAdjustmentUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param invoiceAdjustmentUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, InvoiceAdjustmentUpdateDto invoiceAdjustmentUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutWithHttpInfo(tenantId, invoiceId, invoiceAdjustmentId, invoiceAdjustmentUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param invoiceAdjustmentUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, InvoiceAdjustmentUpdateDto invoiceAdjustmentUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, invoiceAdjustmentUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentId  (required)
     * @param invoiceAdjustmentUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutAsync(UUID tenantId, UUID invoiceId, UUID invoiceAdjustmentId, InvoiceAdjustmentUpdateDto invoiceAdjustmentUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPutValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentId, invoiceAdjustmentUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostCall(UUID tenantId, UUID invoiceId, InvoiceAdjustmentCreateDto invoiceAdjustmentCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceAdjustmentCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Adjustments"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostValidateBeforeCall(UUID tenantId, UUID invoiceId, InvoiceAdjustmentCreateDto invoiceAdjustmentCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostCall(tenantId, invoiceId, invoiceAdjustmentCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost(UUID tenantId, UUID invoiceId, InvoiceAdjustmentCreateDto invoiceAdjustmentCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostWithHttpInfo(tenantId, invoiceId, invoiceAdjustmentCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostWithHttpInfo(UUID tenantId, UUID invoiceId, InvoiceAdjustmentCreateDto invoiceAdjustmentCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceAdjustmentCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostAsync(UUID tenantId, UUID invoiceId, InvoiceAdjustmentCreateDto invoiceAdjustmentCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPostValidateBeforeCall(tenantId, invoiceId, invoiceAdjustmentCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdCalculatePut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Calculate"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdCalculatePut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdCalculatePut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdCalculatePut(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutAsync(UUID tenantId, UUID invoiceId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdCalculatePutValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdDelete
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdDeleteCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdDeleteValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdDelete(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdDelete(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdDeleteCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdDelete(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdDeleteWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdDeleteWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdDeleteValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdDeleteAsync(UUID tenantId, UUID invoiceId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdDeleteValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdExtendedGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Extended"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdExtendedGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdExtendedGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return InvoiceDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDtoEnvelope apiV2InvoicingServiceInvoicesInvoiceIdExtendedGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<InvoiceDtoEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;InvoiceDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDtoEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<InvoiceDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdExtendedGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/Count"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesCountGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param itemId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesGetCall(UUID tenantId, UUID invoiceId, UUID itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesGetCall(tenantId, invoiceId, itemId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param itemId  (optional)
     * @return InvoiceLineDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceLineDtoListEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesGet(UUID tenantId, UUID invoiceId, UUID itemId) throws ApiException {
        ApiResponse<InvoiceLineDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesGetWithHttpInfo(tenantId, invoiceId, itemId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param itemId  (optional)
     * @return ApiResponse&lt;InvoiceLineDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceLineDtoListEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID itemId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesGetValidateBeforeCall(tenantId, invoiceId, itemId, null);
        Type localVarReturnType = new TypeToken<InvoiceLineDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param itemId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesGetAsync(UUID tenantId, UUID invoiceId, UUID itemId, final ApiCallback<InvoiceLineDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesGetValidateBeforeCall(tenantId, invoiceId, itemId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceLineDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Calculate"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutCall(tenantId, invoiceId, invoiceLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutWithHttpInfo(tenantId, invoiceId, invoiceLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteCall(tenantId, invoiceId, invoiceLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteWithHttpInfo(tenantId, invoiceId, invoiceLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceLineId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceLineId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetCall(tenantId, invoiceId, invoiceLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return InvoiceLineDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceLineDtoEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        ApiResponse<InvoiceLineDtoEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetWithHttpInfo(tenantId, invoiceId, invoiceLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return ApiResponse&lt;InvoiceLineDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceLineDtoEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, null);
        Type localVarReturnType = new TypeToken<InvoiceLineDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback<InvoiceLineDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceLineDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineUpdateDto invoiceLineUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceLineUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineUpdateDto invoiceLineUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutCall(tenantId, invoiceId, invoiceLineId, invoiceLineUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineUpdateDto invoiceLineUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutWithHttpInfo(tenantId, invoiceId, invoiceLineId, invoiceLineUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineUpdateDto invoiceLineUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineUpdateDto invoiceLineUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/Count"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetCall(tenantId, invoiceId, invoiceLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetWithHttpInfo(tenantId, invoiceId, invoiceLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetCall(tenantId, invoiceId, invoiceLineId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return InvoiceLineAppliedTaxDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceLineAppliedTaxDtoListEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        ApiResponse<InvoiceLineAppliedTaxDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetWithHttpInfo(tenantId, invoiceId, invoiceLineId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @return ApiResponse&lt;InvoiceLineAppliedTaxDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceLineAppliedTaxDtoListEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, null);
        Type localVarReturnType = new TypeToken<InvoiceLineAppliedTaxDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, final ApiCallback<InvoiceLineAppliedTaxDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGetValidateBeforeCall(tenantId, invoiceId, invoiceLineId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceLineAppliedTaxDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()))
            .replace("{" + "invoiceLineTaxId" + "}", localVarApiClient.escapeString(invoiceLineTaxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(Async)");
        }

        // verify the required parameter 'invoiceLineTaxId' is set
        if (invoiceLineTaxId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineTaxId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteWithHttpInfo(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param invoiceLineAppliedTaxUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, InvoiceLineAppliedTaxUpdateDto invoiceLineAppliedTaxUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceLineAppliedTaxUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes/{invoiceLineTaxId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()))
            .replace("{" + "invoiceLineTaxId" + "}", localVarApiClient.escapeString(invoiceLineTaxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, InvoiceLineAppliedTaxUpdateDto invoiceLineAppliedTaxUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(Async)");
        }

        // verify the required parameter 'invoiceLineTaxId' is set
        if (invoiceLineTaxId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineTaxId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, invoiceLineAppliedTaxUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param invoiceLineAppliedTaxUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, InvoiceLineAppliedTaxUpdateDto invoiceLineAppliedTaxUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutWithHttpInfo(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, invoiceLineAppliedTaxUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param invoiceLineAppliedTaxUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, InvoiceLineAppliedTaxUpdateDto invoiceLineAppliedTaxUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, invoiceLineAppliedTaxUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineTaxId  (required)
     * @param invoiceLineAppliedTaxUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, UUID invoiceLineTaxId, InvoiceLineAppliedTaxUpdateDto invoiceLineAppliedTaxUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPutValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineTaxId, invoiceLineAppliedTaxUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineAppliedTaxCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineAppliedTaxCreateDto invoiceLineAppliedTaxCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceLineAppliedTaxCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines/{invoiceLineId}/Taxes"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceLineId" + "}", localVarApiClient.escapeString(invoiceLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineAppliedTaxCreateDto invoiceLineAppliedTaxCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(Async)");
        }

        // verify the required parameter 'invoiceLineId' is set
        if (invoiceLineId == null) {
            throw new ApiException("Missing the required parameter 'invoiceLineId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostCall(tenantId, invoiceId, invoiceLineId, invoiceLineAppliedTaxCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineAppliedTaxCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineAppliedTaxCreateDto invoiceLineAppliedTaxCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostWithHttpInfo(tenantId, invoiceId, invoiceLineId, invoiceLineAppliedTaxCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineAppliedTaxCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineAppliedTaxCreateDto invoiceLineAppliedTaxCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineAppliedTaxCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineId  (required)
     * @param invoiceLineAppliedTaxCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostAsync(UUID tenantId, UUID invoiceId, UUID invoiceLineId, InvoiceLineAppliedTaxCreateDto invoiceLineAppliedTaxCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPostValidateBeforeCall(tenantId, invoiceId, invoiceLineId, invoiceLineAppliedTaxCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdLinesPost
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesPostCall(UUID tenantId, UUID invoiceId, InvoiceLineCreateDto invoiceLineCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceLineCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Lines"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesPostValidateBeforeCall(UUID tenantId, UUID invoiceId, InvoiceLineCreateDto invoiceLineCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesPost(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdLinesPost(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdLinesPostCall(tenantId, invoiceId, invoiceLineCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdLinesPost(UUID tenantId, UUID invoiceId, InvoiceLineCreateDto invoiceLineCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdLinesPostWithHttpInfo(tenantId, invoiceId, invoiceLineCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdLinesPostWithHttpInfo(UUID tenantId, UUID invoiceId, InvoiceLineCreateDto invoiceLineCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesPostValidateBeforeCall(tenantId, invoiceId, invoiceLineCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceLineCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdLinesPostAsync(UUID tenantId, UUID invoiceId, InvoiceLineCreateDto invoiceLineCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdLinesPostValidateBeforeCall(tenantId, invoiceId, invoiceLineCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetCall(UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Payments/Count"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetValidateBeforeCall(UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetCall(invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param invoiceId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet(UUID invoiceId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetWithHttpInfo(UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetAsync(UUID invoiceId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGetValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetCall(UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/Payments"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetValidateBeforeCall(UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetCall(invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param invoiceId  (required)
     * @return InvoiceDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDtoListEnvelope apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet(UUID invoiceId) throws ApiException {
        ApiResponse<InvoiceDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param invoiceId  (required)
     * @return ApiResponse&lt;InvoiceDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDtoListEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetWithHttpInfo(UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetAsync(UUID invoiceId, final ApiCallback<InvoiceDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPaymentsGetValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdPut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPutCall(UUID tenantId, UUID invoiceId, InvoiceUpdateDto invoiceUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPutValidateBeforeCall(UUID tenantId, UUID invoiceId, InvoiceUpdateDto invoiceUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdPut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdPut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdPutCall(tenantId, invoiceId, invoiceUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdPut(UUID tenantId, UUID invoiceId, InvoiceUpdateDto invoiceUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdPutWithHttpInfo(tenantId, invoiceId, invoiceUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdPutWithHttpInfo(UUID tenantId, UUID invoiceId, InvoiceUpdateDto invoiceUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPutValidateBeforeCall(tenantId, invoiceId, invoiceUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdPutAsync(UUID tenantId, UUID invoiceId, InvoiceUpdateDto invoiceUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdPutValidateBeforeCall(tenantId, invoiceId, invoiceUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/Count"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return Int32Envelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Int32Envelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<Int32Envelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Int32Envelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Int32Envelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<Int32Envelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Int32Envelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return InvoiceReferenceDtoListEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceReferenceDtoListEnvelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesGet(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<InvoiceReferenceDtoListEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;InvoiceReferenceDtoListEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceReferenceDtoListEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceReferenceDtoListEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetAsync(UUID tenantId, UUID invoiceId, final ApiCallback<InvoiceReferenceDtoListEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesGetValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceReferenceDtoListEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceReferenceId" + "}", localVarApiClient.escapeString(invoiceReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(Async)");
        }

        // verify the required parameter 'invoiceReferenceId' is set
        if (invoiceReferenceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceReferenceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteCall(tenantId, invoiceId, invoiceReferenceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteWithHttpInfo(tenantId, invoiceId, invoiceReferenceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteAsync(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDeleteValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceReferenceId" + "}", localVarApiClient.escapeString(invoiceReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(Async)");
        }

        // verify the required parameter 'invoiceReferenceId' is set
        if (invoiceReferenceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceReferenceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetCall(tenantId, invoiceId, invoiceReferenceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @return InvoiceReferenceDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceReferenceDtoEnvelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId) throws ApiException {
        ApiResponse<InvoiceReferenceDtoEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetWithHttpInfo(tenantId, invoiceId, invoiceReferenceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @return ApiResponse&lt;InvoiceReferenceDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceReferenceDtoEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, null);
        Type localVarReturnType = new TypeToken<InvoiceReferenceDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetAsync(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, final ApiCallback<InvoiceReferenceDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGetValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceReferenceDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param invoiceReferenceUpdateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, InvoiceReferenceUpdateDto invoiceReferenceUpdateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceReferenceUpdateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References/{invoiceReferenceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()))
            .replace("{" + "invoiceReferenceId" + "}", localVarApiClient.escapeString(invoiceReferenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutValidateBeforeCall(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, InvoiceReferenceUpdateDto invoiceReferenceUpdateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(Async)");
        }

        // verify the required parameter 'invoiceReferenceId' is set
        if (invoiceReferenceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceReferenceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutCall(tenantId, invoiceId, invoiceReferenceId, invoiceReferenceUpdateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param invoiceReferenceUpdateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, InvoiceReferenceUpdateDto invoiceReferenceUpdateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutWithHttpInfo(tenantId, invoiceId, invoiceReferenceId, invoiceReferenceUpdateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param invoiceReferenceUpdateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutWithHttpInfo(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, InvoiceReferenceUpdateDto invoiceReferenceUpdateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, invoiceReferenceUpdateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceId  (required)
     * @param invoiceReferenceUpdateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutAsync(UUID tenantId, UUID invoiceId, UUID invoiceReferenceId, InvoiceReferenceUpdateDto invoiceReferenceUpdateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPutValidateBeforeCall(tenantId, invoiceId, invoiceReferenceId, invoiceReferenceUpdateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesInvoiceIdReferencesPost
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostCall(UUID tenantId, UUID invoiceId, InvoiceReferenceCreateDto invoiceReferenceCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceReferenceCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}/References"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostValidateBeforeCall(UUID tenantId, UUID invoiceId, InvoiceReferenceCreateDto invoiceReferenceCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesPost(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling apiV2InvoicingServiceInvoicesInvoiceIdReferencesPost(Async)");
        }

        return apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostCall(tenantId, invoiceId, invoiceReferenceCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesInvoiceIdReferencesPost(UUID tenantId, UUID invoiceId, InvoiceReferenceCreateDto invoiceReferenceCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostWithHttpInfo(tenantId, invoiceId, invoiceReferenceCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostWithHttpInfo(UUID tenantId, UUID invoiceId, InvoiceReferenceCreateDto invoiceReferenceCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostValidateBeforeCall(tenantId, invoiceId, invoiceReferenceCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param invoiceReferenceCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostAsync(UUID tenantId, UUID invoiceId, InvoiceReferenceCreateDto invoiceReferenceCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesInvoiceIdReferencesPostValidateBeforeCall(tenantId, invoiceId, invoiceReferenceCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesPost
     * @param tenantId  (required)
     * @param invoiceCreateDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesPostCall(UUID tenantId, InvoiceCreateDto invoiceCreateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceCreateDto;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesPostValidateBeforeCall(UUID tenantId, InvoiceCreateDto invoiceCreateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling apiV2InvoicingServiceInvoicesPost(Async)");
        }

        return apiV2InvoicingServiceInvoicesPostCall(tenantId, invoiceCreateDto, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceCreateDto  (optional)
     * @return EmptyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EmptyEnvelope apiV2InvoicingServiceInvoicesPost(UUID tenantId, InvoiceCreateDto invoiceCreateDto) throws ApiException {
        ApiResponse<EmptyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesPostWithHttpInfo(tenantId, invoiceCreateDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceCreateDto  (optional)
     * @return ApiResponse&lt;EmptyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyEnvelope> apiV2InvoicingServiceInvoicesPostWithHttpInfo(UUID tenantId, InvoiceCreateDto invoiceCreateDto) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesPostValidateBeforeCall(tenantId, invoiceCreateDto, null);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceCreateDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesPostAsync(UUID tenantId, InvoiceCreateDto invoiceCreateDto, final ApiCallback<EmptyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesPostValidateBeforeCall(tenantId, invoiceCreateDto, _callback);
        Type localVarReturnType = new TypeToken<EmptyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesTaxBasesAggregatePost
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTaxBasesAggregatePostCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/TaxBasesAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyId", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesTaxBasesAggregatePostValidateBeforeCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling apiV2InvoicingServiceInvoicesTaxBasesAggregatePost(Async)");
        }

        return apiV2InvoicingServiceInvoicesTaxBasesAggregatePostCall(UUID, currencyId, _callback);

    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return MoneyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MoneyEnvelope apiV2InvoicingServiceInvoicesTaxBasesAggregatePost(List<UUID> UUID, String currencyId) throws ApiException {
        ApiResponse<MoneyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesTaxBasesAggregatePostWithHttpInfo(UUID, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return ApiResponse&lt;MoneyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoneyEnvelope> apiV2InvoicingServiceInvoicesTaxBasesAggregatePostWithHttpInfo(List<UUID> UUID, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTaxBasesAggregatePostValidateBeforeCall(UUID, currencyId, null);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTaxBasesAggregatePostAsync(List<UUID> UUID, String currencyId, final ApiCallback<MoneyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTaxBasesAggregatePostValidateBeforeCall(UUID, currencyId, _callback);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesTaxesAggregatePost
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTaxesAggregatePostCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/TaxesAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyId", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesTaxesAggregatePostValidateBeforeCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling apiV2InvoicingServiceInvoicesTaxesAggregatePost(Async)");
        }

        return apiV2InvoicingServiceInvoicesTaxesAggregatePostCall(UUID, currencyId, _callback);

    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return MoneyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MoneyEnvelope apiV2InvoicingServiceInvoicesTaxesAggregatePost(List<UUID> UUID, String currencyId) throws ApiException {
        ApiResponse<MoneyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesTaxesAggregatePostWithHttpInfo(UUID, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return ApiResponse&lt;MoneyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoneyEnvelope> apiV2InvoicingServiceInvoicesTaxesAggregatePostWithHttpInfo(List<UUID> UUID, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTaxesAggregatePostValidateBeforeCall(UUID, currencyId, null);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTaxesAggregatePostAsync(List<UUID> UUID, String currencyId, final ApiCallback<MoneyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTaxesAggregatePostValidateBeforeCall(UUID, currencyId, _callback);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InvoicingServiceInvoicesTotalsAggregatePost
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTotalsAggregatePostCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/TotalsAggregate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyId", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InvoicingServiceInvoicesTotalsAggregatePostValidateBeforeCall(List<UUID> UUID, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling apiV2InvoicingServiceInvoicesTotalsAggregatePost(Async)");
        }

        return apiV2InvoicingServiceInvoicesTotalsAggregatePostCall(UUID, currencyId, _callback);

    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return MoneyEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MoneyEnvelope apiV2InvoicingServiceInvoicesTotalsAggregatePost(List<UUID> UUID, String currencyId) throws ApiException {
        ApiResponse<MoneyEnvelope> localVarResp = apiV2InvoicingServiceInvoicesTotalsAggregatePostWithHttpInfo(UUID, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @return ApiResponse&lt;MoneyEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoneyEnvelope> apiV2InvoicingServiceInvoicesTotalsAggregatePostWithHttpInfo(List<UUID> UUID, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTotalsAggregatePostValidateBeforeCall(UUID, currencyId, null);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param UUID  (required)
     * @param currencyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InvoicingServiceInvoicesTotalsAggregatePostAsync(List<UUID> UUID, String currencyId, final ApiCallback<MoneyEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InvoicingServiceInvoicesTotalsAggregatePostValidateBeforeCall(UUID, currencyId, _callback);
        Type localVarReturnType = new TypeToken<MoneyEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvoiceAsync
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsyncCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/InvoicingService/Invoices/{invoiceId}"
            .replace("{" + "invoiceId" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceAsyncValidateBeforeCall(UUID tenantId, UUID invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getInvoiceAsync(Async)");
        }

        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getInvoiceAsync(Async)");
        }

        return getInvoiceAsyncCall(tenantId, invoiceId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return InvoiceDtoEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDtoEnvelope getInvoiceAsync(UUID tenantId, UUID invoiceId) throws ApiException {
        ApiResponse<InvoiceDtoEnvelope> localVarResp = getInvoiceAsyncWithHttpInfo(tenantId, invoiceId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @return ApiResponse&lt;InvoiceDtoEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDtoEnvelope> getInvoiceAsyncWithHttpInfo(UUID tenantId, UUID invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceAsyncValidateBeforeCall(tenantId, invoiceId, null);
        Type localVarReturnType = new TypeToken<InvoiceDtoEnvelope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsyncAsync(UUID tenantId, UUID invoiceId, final ApiCallback<InvoiceDtoEnvelope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceAsyncValidateBeforeCall(tenantId, invoiceId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDtoEnvelope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
