/*
 * InvoicingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.InvoiceAdjustmentDto;
import org.openapitools.client.model.InvoiceItemRecordDto;
import org.openapitools.client.model.InvoiceReferenceDto;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceCreateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:31.930950900-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class InvoiceCreateDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_PRICE_LIST_ID = "priceListId";
  @SerializedName(SERIALIZED_NAME_PRICE_LIST_ID)
  private String priceListId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENROLLMENT_ID = "enrollmentId";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ID)
  private String enrollmentId;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ID = "individualId";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ID)
  private String individualId;

  public static final String SERIALIZED_NAME_PAYMENT_TERM_ID = "paymentTermId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TERM_ID)
  private String paymentTermId;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_FOREX_RATE = "forexRate";
  @SerializedName(SERIALIZED_NAME_FOREX_RATE)
  private Double forexRate;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billingEmail";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_STATE_ID = "stateId";
  @SerializedName(SERIALIZED_NAME_STATE_ID)
  private String stateId;

  public static final String SERIALIZED_NAME_CITY_ID = "cityId";
  @SerializedName(SERIALIZED_NAME_CITY_ID)
  private String cityId;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_CUSTOMER_NOTES = "customerNotes";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NOTES)
  private String customerNotes;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ENUMERATION = "enumeration";
  @SerializedName(SERIALIZED_NAME_ENUMERATION)
  private String enumeration;

  public static final String SERIALIZED_NAME_PAYMENT_MODE_ID = "paymentModeId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MODE_ID)
  private String paymentModeId;

  public static final String SERIALIZED_NAME_RECEIVER_TENANT_ID = "receiverTenantId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TENANT_ID)
  private String receiverTenantId;

  public static final String SERIALIZED_NAME_ENUMERATION_RANGE_ID = "enumerationRangeId";
  @SerializedName(SERIALIZED_NAME_ENUMERATION_RANGE_ID)
  private String enumerationRangeId;

  public static final String SERIALIZED_NAME_EMISOR_BILLING_PROFILE_ID = "emisorBillingProfileId";
  @SerializedName(SERIALIZED_NAME_EMISOR_BILLING_PROFILE_ID)
  private String emisorBillingProfileId;

  public static final String SERIALIZED_NAME_RECEIVER_BILLING_PROFILE_ID = "receiverBillingProfileId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_BILLING_PROFILE_ID)
  private String receiverBillingProfileId;

  public static final String SERIALIZED_NAME_EMISOR_WALLET_ACCOUNT_ID = "emisorWalletAccountId";
  @SerializedName(SERIALIZED_NAME_EMISOR_WALLET_ACCOUNT_ID)
  private String emisorWalletAccountId;

  public static final String SERIALIZED_NAME_RECEIVER_WALLET_ACCOUNT_ID = "receiverWalletAccountId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_WALLET_ACCOUNT_ID)
  private String receiverWalletAccountId;

  public static final String SERIALIZED_NAME_PAYMENT_DUE = "paymentDue";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DUE)
  private OffsetDateTime paymentDue;

  /**
   * Gets or Sets invoiceType
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    InvoiceTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(Integer value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return InvoiceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      InvoiceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoiceType";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  /**
   * Gets or Sets documentType
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    DocumentTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(Integer value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  /**
   * Gets or Sets invoiceStatus
   */
  @JsonAdapter(InvoiceStatusEnum.Adapter.class)
  public enum InvoiceStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    InvoiceStatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceStatusEnum fromValue(Integer value) {
      for (InvoiceStatusEnum b : InvoiceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceStatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return InvoiceStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      InvoiceStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_STATUS = "invoiceStatus";
  @SerializedName(SERIALIZED_NAME_INVOICE_STATUS)
  private InvoiceStatusEnum invoiceStatus;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public static final String SERIALIZED_NAME_INVOICE_REFERENCES = "invoiceReferences";
  @SerializedName(SERIALIZED_NAME_INVOICE_REFERENCES)
  private List<InvoiceReferenceDto> invoiceReferences;

  public static final String SERIALIZED_NAME_INVOICE_ITEM_RECORDS = "invoiceItemRecords";
  @SerializedName(SERIALIZED_NAME_INVOICE_ITEM_RECORDS)
  private List<InvoiceItemRecordDto> invoiceItemRecords;

  public static final String SERIALIZED_NAME_INVOICE_ADJUSTMENTS = "invoiceAdjustments";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADJUSTMENTS)
  private List<InvoiceAdjustmentDto> invoiceAdjustments;

  public InvoiceCreateDto() {
  }

  public InvoiceCreateDto(
     UUID id, 
     OffsetDateTime timestamp
  ) {
    this();
    this.id = id;
    this.timestamp = timestamp;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }



  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  public InvoiceCreateDto closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Get closed
   * @return closed
   */
  @javax.annotation.Nullable
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public InvoiceCreateDto title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public InvoiceCreateDto userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public InvoiceCreateDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public InvoiceCreateDto priceListId(String priceListId) {
    this.priceListId = priceListId;
    return this;
  }

  /**
   * Get priceListId
   * @return priceListId
   */
  @javax.annotation.Nullable
  public String getPriceListId() {
    return priceListId;
  }

  public void setPriceListId(String priceListId) {
    this.priceListId = priceListId;
  }


  public InvoiceCreateDto description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InvoiceCreateDto enrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
    return this;
  }

  /**
   * Get enrollmentId
   * @return enrollmentId
   */
  @javax.annotation.Nullable
  public String getEnrollmentId() {
    return enrollmentId;
  }

  public void setEnrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
  }


  public InvoiceCreateDto individualId(String individualId) {
    this.individualId = individualId;
    return this;
  }

  /**
   * Get individualId
   * @return individualId
   */
  @javax.annotation.Nullable
  public String getIndividualId() {
    return individualId;
  }

  public void setIndividualId(String individualId) {
    this.individualId = individualId;
  }


  public InvoiceCreateDto paymentTermId(String paymentTermId) {
    this.paymentTermId = paymentTermId;
    return this;
  }

  /**
   * Get paymentTermId
   * @return paymentTermId
   */
  @javax.annotation.Nullable
  public String getPaymentTermId() {
    return paymentTermId;
  }

  public void setPaymentTermId(String paymentTermId) {
    this.paymentTermId = paymentTermId;
  }


  public InvoiceCreateDto organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public InvoiceCreateDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public InvoiceCreateDto forexRate(Double forexRate) {
    this.forexRate = forexRate;
    return this;
  }

  /**
   * Get forexRate
   * @return forexRate
   */
  @javax.annotation.Nullable
  public Double getForexRate() {
    return forexRate;
  }

  public void setForexRate(Double forexRate) {
    this.forexRate = forexRate;
  }


  public InvoiceCreateDto firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public InvoiceCreateDto lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public InvoiceCreateDto companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public InvoiceCreateDto billingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
    return this;
  }

  /**
   * Get billingEmail
   * @return billingEmail
   */
  @javax.annotation.Nullable
  public String getBillingEmail() {
    return billingEmail;
  }

  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public InvoiceCreateDto addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public InvoiceCreateDto addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public InvoiceCreateDto postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public InvoiceCreateDto countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * Get countryId
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public InvoiceCreateDto stateId(String stateId) {
    this.stateId = stateId;
    return this;
  }

  /**
   * Get stateId
   * @return stateId
   */
  @javax.annotation.Nullable
  public String getStateId() {
    return stateId;
  }

  public void setStateId(String stateId) {
    this.stateId = stateId;
  }


  public InvoiceCreateDto cityId(String cityId) {
    this.cityId = cityId;
    return this;
  }

  /**
   * Get cityId
   * @return cityId
   */
  @javax.annotation.Nullable
  public String getCityId() {
    return cityId;
  }

  public void setCityId(String cityId) {
    this.cityId = cityId;
  }


  public InvoiceCreateDto paid(Boolean paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Get paid
   * @return paid
   */
  @javax.annotation.Nullable
  public Boolean getPaid() {
    return paid;
  }

  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public InvoiceCreateDto number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public InvoiceCreateDto notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public InvoiceCreateDto customerNotes(String customerNotes) {
    this.customerNotes = customerNotes;
    return this;
  }

  /**
   * Get customerNotes
   * @return customerNotes
   */
  @javax.annotation.Nullable
  public String getCustomerNotes() {
    return customerNotes;
  }

  public void setCustomerNotes(String customerNotes) {
    this.customerNotes = customerNotes;
  }


  public InvoiceCreateDto orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public InvoiceCreateDto enumeration(String enumeration) {
    this.enumeration = enumeration;
    return this;
  }

  /**
   * Get enumeration
   * @return enumeration
   */
  @javax.annotation.Nullable
  public String getEnumeration() {
    return enumeration;
  }

  public void setEnumeration(String enumeration) {
    this.enumeration = enumeration;
  }


  public InvoiceCreateDto paymentModeId(String paymentModeId) {
    this.paymentModeId = paymentModeId;
    return this;
  }

  /**
   * Get paymentModeId
   * @return paymentModeId
   */
  @javax.annotation.Nullable
  public String getPaymentModeId() {
    return paymentModeId;
  }

  public void setPaymentModeId(String paymentModeId) {
    this.paymentModeId = paymentModeId;
  }


  public InvoiceCreateDto receiverTenantId(String receiverTenantId) {
    this.receiverTenantId = receiverTenantId;
    return this;
  }

  /**
   * Get receiverTenantId
   * @return receiverTenantId
   */
  @javax.annotation.Nullable
  public String getReceiverTenantId() {
    return receiverTenantId;
  }

  public void setReceiverTenantId(String receiverTenantId) {
    this.receiverTenantId = receiverTenantId;
  }


  public InvoiceCreateDto enumerationRangeId(String enumerationRangeId) {
    this.enumerationRangeId = enumerationRangeId;
    return this;
  }

  /**
   * Get enumerationRangeId
   * @return enumerationRangeId
   */
  @javax.annotation.Nullable
  public String getEnumerationRangeId() {
    return enumerationRangeId;
  }

  public void setEnumerationRangeId(String enumerationRangeId) {
    this.enumerationRangeId = enumerationRangeId;
  }


  public InvoiceCreateDto emisorBillingProfileId(String emisorBillingProfileId) {
    this.emisorBillingProfileId = emisorBillingProfileId;
    return this;
  }

  /**
   * Get emisorBillingProfileId
   * @return emisorBillingProfileId
   */
  @javax.annotation.Nullable
  public String getEmisorBillingProfileId() {
    return emisorBillingProfileId;
  }

  public void setEmisorBillingProfileId(String emisorBillingProfileId) {
    this.emisorBillingProfileId = emisorBillingProfileId;
  }


  public InvoiceCreateDto receiverBillingProfileId(String receiverBillingProfileId) {
    this.receiverBillingProfileId = receiverBillingProfileId;
    return this;
  }

  /**
   * Get receiverBillingProfileId
   * @return receiverBillingProfileId
   */
  @javax.annotation.Nullable
  public String getReceiverBillingProfileId() {
    return receiverBillingProfileId;
  }

  public void setReceiverBillingProfileId(String receiverBillingProfileId) {
    this.receiverBillingProfileId = receiverBillingProfileId;
  }


  public InvoiceCreateDto emisorWalletAccountId(String emisorWalletAccountId) {
    this.emisorWalletAccountId = emisorWalletAccountId;
    return this;
  }

  /**
   * Get emisorWalletAccountId
   * @return emisorWalletAccountId
   */
  @javax.annotation.Nullable
  public String getEmisorWalletAccountId() {
    return emisorWalletAccountId;
  }

  public void setEmisorWalletAccountId(String emisorWalletAccountId) {
    this.emisorWalletAccountId = emisorWalletAccountId;
  }


  public InvoiceCreateDto receiverWalletAccountId(String receiverWalletAccountId) {
    this.receiverWalletAccountId = receiverWalletAccountId;
    return this;
  }

  /**
   * Get receiverWalletAccountId
   * @return receiverWalletAccountId
   */
  @javax.annotation.Nullable
  public String getReceiverWalletAccountId() {
    return receiverWalletAccountId;
  }

  public void setReceiverWalletAccountId(String receiverWalletAccountId) {
    this.receiverWalletAccountId = receiverWalletAccountId;
  }


  public InvoiceCreateDto paymentDue(OffsetDateTime paymentDue) {
    this.paymentDue = paymentDue;
    return this;
  }

  /**
   * Get paymentDue
   * @return paymentDue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaymentDue() {
    return paymentDue;
  }

  public void setPaymentDue(OffsetDateTime paymentDue) {
    this.paymentDue = paymentDue;
  }


  public InvoiceCreateDto invoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
    return this;
  }

  /**
   * Get invoiceType
   * @return invoiceType
   */
  @javax.annotation.Nullable
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }

  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }


  public InvoiceCreateDto documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Get documentType
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public InvoiceCreateDto invoiceStatus(InvoiceStatusEnum invoiceStatus) {
    this.invoiceStatus = invoiceStatus;
    return this;
  }

  /**
   * Get invoiceStatus
   * @return invoiceStatus
   */
  @javax.annotation.Nullable
  public InvoiceStatusEnum getInvoiceStatus() {
    return invoiceStatus;
  }

  public void setInvoiceStatus(InvoiceStatusEnum invoiceStatus) {
    this.invoiceStatus = invoiceStatus;
  }


  public InvoiceCreateDto validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Get validFrom
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public InvoiceCreateDto validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Get validTo
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }


  public InvoiceCreateDto invoiceReferences(List<InvoiceReferenceDto> invoiceReferences) {
    this.invoiceReferences = invoiceReferences;
    return this;
  }

  public InvoiceCreateDto addInvoiceReferencesItem(InvoiceReferenceDto invoiceReferencesItem) {
    if (this.invoiceReferences == null) {
      this.invoiceReferences = new ArrayList<>();
    }
    this.invoiceReferences.add(invoiceReferencesItem);
    return this;
  }

  /**
   * Get invoiceReferences
   * @return invoiceReferences
   */
  @javax.annotation.Nullable
  public List<InvoiceReferenceDto> getInvoiceReferences() {
    return invoiceReferences;
  }

  public void setInvoiceReferences(List<InvoiceReferenceDto> invoiceReferences) {
    this.invoiceReferences = invoiceReferences;
  }


  public InvoiceCreateDto invoiceItemRecords(List<InvoiceItemRecordDto> invoiceItemRecords) {
    this.invoiceItemRecords = invoiceItemRecords;
    return this;
  }

  public InvoiceCreateDto addInvoiceItemRecordsItem(InvoiceItemRecordDto invoiceItemRecordsItem) {
    if (this.invoiceItemRecords == null) {
      this.invoiceItemRecords = new ArrayList<>();
    }
    this.invoiceItemRecords.add(invoiceItemRecordsItem);
    return this;
  }

  /**
   * Get invoiceItemRecords
   * @return invoiceItemRecords
   */
  @javax.annotation.Nullable
  public List<InvoiceItemRecordDto> getInvoiceItemRecords() {
    return invoiceItemRecords;
  }

  public void setInvoiceItemRecords(List<InvoiceItemRecordDto> invoiceItemRecords) {
    this.invoiceItemRecords = invoiceItemRecords;
  }


  public InvoiceCreateDto invoiceAdjustments(List<InvoiceAdjustmentDto> invoiceAdjustments) {
    this.invoiceAdjustments = invoiceAdjustments;
    return this;
  }

  public InvoiceCreateDto addInvoiceAdjustmentsItem(InvoiceAdjustmentDto invoiceAdjustmentsItem) {
    if (this.invoiceAdjustments == null) {
      this.invoiceAdjustments = new ArrayList<>();
    }
    this.invoiceAdjustments.add(invoiceAdjustmentsItem);
    return this;
  }

  /**
   * Get invoiceAdjustments
   * @return invoiceAdjustments
   */
  @javax.annotation.Nullable
  public List<InvoiceAdjustmentDto> getInvoiceAdjustments() {
    return invoiceAdjustments;
  }

  public void setInvoiceAdjustments(List<InvoiceAdjustmentDto> invoiceAdjustments) {
    this.invoiceAdjustments = invoiceAdjustments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceCreateDto invoiceCreateDto = (InvoiceCreateDto) o;
    return Objects.equals(this.id, invoiceCreateDto.id) &&
        Objects.equals(this.timestamp, invoiceCreateDto.timestamp) &&
        Objects.equals(this.closed, invoiceCreateDto.closed) &&
        Objects.equals(this.title, invoiceCreateDto.title) &&
        Objects.equals(this.userId, invoiceCreateDto.userId) &&
        Objects.equals(this.tenantId, invoiceCreateDto.tenantId) &&
        Objects.equals(this.priceListId, invoiceCreateDto.priceListId) &&
        Objects.equals(this.description, invoiceCreateDto.description) &&
        Objects.equals(this.enrollmentId, invoiceCreateDto.enrollmentId) &&
        Objects.equals(this.individualId, invoiceCreateDto.individualId) &&
        Objects.equals(this.paymentTermId, invoiceCreateDto.paymentTermId) &&
        Objects.equals(this.organizationId, invoiceCreateDto.organizationId) &&
        Objects.equals(this.currencyId, invoiceCreateDto.currencyId) &&
        Objects.equals(this.forexRate, invoiceCreateDto.forexRate) &&
        Objects.equals(this.firstName, invoiceCreateDto.firstName) &&
        Objects.equals(this.lastName, invoiceCreateDto.lastName) &&
        Objects.equals(this.companyName, invoiceCreateDto.companyName) &&
        Objects.equals(this.billingEmail, invoiceCreateDto.billingEmail) &&
        Objects.equals(this.addressLine1, invoiceCreateDto.addressLine1) &&
        Objects.equals(this.addressLine2, invoiceCreateDto.addressLine2) &&
        Objects.equals(this.postalCode, invoiceCreateDto.postalCode) &&
        Objects.equals(this.countryId, invoiceCreateDto.countryId) &&
        Objects.equals(this.stateId, invoiceCreateDto.stateId) &&
        Objects.equals(this.cityId, invoiceCreateDto.cityId) &&
        Objects.equals(this.paid, invoiceCreateDto.paid) &&
        Objects.equals(this.number, invoiceCreateDto.number) &&
        Objects.equals(this.notes, invoiceCreateDto.notes) &&
        Objects.equals(this.customerNotes, invoiceCreateDto.customerNotes) &&
        Objects.equals(this.orderId, invoiceCreateDto.orderId) &&
        Objects.equals(this.enumeration, invoiceCreateDto.enumeration) &&
        Objects.equals(this.paymentModeId, invoiceCreateDto.paymentModeId) &&
        Objects.equals(this.receiverTenantId, invoiceCreateDto.receiverTenantId) &&
        Objects.equals(this.enumerationRangeId, invoiceCreateDto.enumerationRangeId) &&
        Objects.equals(this.emisorBillingProfileId, invoiceCreateDto.emisorBillingProfileId) &&
        Objects.equals(this.receiverBillingProfileId, invoiceCreateDto.receiverBillingProfileId) &&
        Objects.equals(this.emisorWalletAccountId, invoiceCreateDto.emisorWalletAccountId) &&
        Objects.equals(this.receiverWalletAccountId, invoiceCreateDto.receiverWalletAccountId) &&
        Objects.equals(this.paymentDue, invoiceCreateDto.paymentDue) &&
        Objects.equals(this.invoiceType, invoiceCreateDto.invoiceType) &&
        Objects.equals(this.documentType, invoiceCreateDto.documentType) &&
        Objects.equals(this.invoiceStatus, invoiceCreateDto.invoiceStatus) &&
        Objects.equals(this.validFrom, invoiceCreateDto.validFrom) &&
        Objects.equals(this.validTo, invoiceCreateDto.validTo) &&
        Objects.equals(this.invoiceReferences, invoiceCreateDto.invoiceReferences) &&
        Objects.equals(this.invoiceItemRecords, invoiceCreateDto.invoiceItemRecords) &&
        Objects.equals(this.invoiceAdjustments, invoiceCreateDto.invoiceAdjustments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, closed, title, userId, tenantId, priceListId, description, enrollmentId, individualId, paymentTermId, organizationId, currencyId, forexRate, firstName, lastName, companyName, billingEmail, addressLine1, addressLine2, postalCode, countryId, stateId, cityId, paid, number, notes, customerNotes, orderId, enumeration, paymentModeId, receiverTenantId, enumerationRangeId, emisorBillingProfileId, receiverBillingProfileId, emisorWalletAccountId, receiverWalletAccountId, paymentDue, invoiceType, documentType, invoiceStatus, validFrom, validTo, invoiceReferences, invoiceItemRecords, invoiceAdjustments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceCreateDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    priceListId: ").append(toIndentedString(priceListId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    sb.append("    individualId: ").append(toIndentedString(individualId)).append("\n");
    sb.append("    paymentTermId: ").append(toIndentedString(paymentTermId)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    forexRate: ").append(toIndentedString(forexRate)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("    cityId: ").append(toIndentedString(cityId)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    customerNotes: ").append(toIndentedString(customerNotes)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    enumeration: ").append(toIndentedString(enumeration)).append("\n");
    sb.append("    paymentModeId: ").append(toIndentedString(paymentModeId)).append("\n");
    sb.append("    receiverTenantId: ").append(toIndentedString(receiverTenantId)).append("\n");
    sb.append("    enumerationRangeId: ").append(toIndentedString(enumerationRangeId)).append("\n");
    sb.append("    emisorBillingProfileId: ").append(toIndentedString(emisorBillingProfileId)).append("\n");
    sb.append("    receiverBillingProfileId: ").append(toIndentedString(receiverBillingProfileId)).append("\n");
    sb.append("    emisorWalletAccountId: ").append(toIndentedString(emisorWalletAccountId)).append("\n");
    sb.append("    receiverWalletAccountId: ").append(toIndentedString(receiverWalletAccountId)).append("\n");
    sb.append("    paymentDue: ").append(toIndentedString(paymentDue)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    invoiceStatus: ").append(toIndentedString(invoiceStatus)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("    invoiceReferences: ").append(toIndentedString(invoiceReferences)).append("\n");
    sb.append("    invoiceItemRecords: ").append(toIndentedString(invoiceItemRecords)).append("\n");
    sb.append("    invoiceAdjustments: ").append(toIndentedString(invoiceAdjustments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("closed");
    openapiFields.add("title");
    openapiFields.add("userId");
    openapiFields.add("tenantId");
    openapiFields.add("priceListId");
    openapiFields.add("description");
    openapiFields.add("enrollmentId");
    openapiFields.add("individualId");
    openapiFields.add("paymentTermId");
    openapiFields.add("organizationId");
    openapiFields.add("currencyId");
    openapiFields.add("forexRate");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("companyName");
    openapiFields.add("billingEmail");
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("postalCode");
    openapiFields.add("countryId");
    openapiFields.add("stateId");
    openapiFields.add("cityId");
    openapiFields.add("paid");
    openapiFields.add("number");
    openapiFields.add("notes");
    openapiFields.add("customerNotes");
    openapiFields.add("orderId");
    openapiFields.add("enumeration");
    openapiFields.add("paymentModeId");
    openapiFields.add("receiverTenantId");
    openapiFields.add("enumerationRangeId");
    openapiFields.add("emisorBillingProfileId");
    openapiFields.add("receiverBillingProfileId");
    openapiFields.add("emisorWalletAccountId");
    openapiFields.add("receiverWalletAccountId");
    openapiFields.add("paymentDue");
    openapiFields.add("invoiceType");
    openapiFields.add("documentType");
    openapiFields.add("invoiceStatus");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");
    openapiFields.add("invoiceReferences");
    openapiFields.add("invoiceItemRecords");
    openapiFields.add("invoiceAdjustments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceCreateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceCreateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceCreateDto is not found in the empty JSON string", InvoiceCreateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceCreateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceCreateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("priceListId") != null && !jsonObj.get("priceListId").isJsonNull()) && !jsonObj.get("priceListId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceListId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceListId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("enrollmentId") != null && !jsonObj.get("enrollmentId").isJsonNull()) && !jsonObj.get("enrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentId").toString()));
      }
      if ((jsonObj.get("individualId") != null && !jsonObj.get("individualId").isJsonNull()) && !jsonObj.get("individualId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `individualId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("individualId").toString()));
      }
      if ((jsonObj.get("paymentTermId") != null && !jsonObj.get("paymentTermId").isJsonNull()) && !jsonObj.get("paymentTermId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentTermId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentTermId").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("billingEmail") != null && !jsonObj.get("billingEmail").isJsonNull()) && !jsonObj.get("billingEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingEmail").toString()));
      }
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("countryId") != null && !jsonObj.get("countryId").isJsonNull()) && !jsonObj.get("countryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryId").toString()));
      }
      if ((jsonObj.get("stateId") != null && !jsonObj.get("stateId").isJsonNull()) && !jsonObj.get("stateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateId").toString()));
      }
      if ((jsonObj.get("cityId") != null && !jsonObj.get("cityId").isJsonNull()) && !jsonObj.get("cityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityId").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("customerNotes") != null && !jsonObj.get("customerNotes").isJsonNull()) && !jsonObj.get("customerNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerNotes").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("enumeration") != null && !jsonObj.get("enumeration").isJsonNull()) && !jsonObj.get("enumeration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumeration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enumeration").toString()));
      }
      if ((jsonObj.get("paymentModeId") != null && !jsonObj.get("paymentModeId").isJsonNull()) && !jsonObj.get("paymentModeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentModeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentModeId").toString()));
      }
      if ((jsonObj.get("receiverTenantId") != null && !jsonObj.get("receiverTenantId").isJsonNull()) && !jsonObj.get("receiverTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverTenantId").toString()));
      }
      if ((jsonObj.get("enumerationRangeId") != null && !jsonObj.get("enumerationRangeId").isJsonNull()) && !jsonObj.get("enumerationRangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumerationRangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enumerationRangeId").toString()));
      }
      if ((jsonObj.get("emisorBillingProfileId") != null && !jsonObj.get("emisorBillingProfileId").isJsonNull()) && !jsonObj.get("emisorBillingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emisorBillingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emisorBillingProfileId").toString()));
      }
      if ((jsonObj.get("receiverBillingProfileId") != null && !jsonObj.get("receiverBillingProfileId").isJsonNull()) && !jsonObj.get("receiverBillingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverBillingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverBillingProfileId").toString()));
      }
      if ((jsonObj.get("emisorWalletAccountId") != null && !jsonObj.get("emisorWalletAccountId").isJsonNull()) && !jsonObj.get("emisorWalletAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emisorWalletAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emisorWalletAccountId").toString()));
      }
      if ((jsonObj.get("receiverWalletAccountId") != null && !jsonObj.get("receiverWalletAccountId").isJsonNull()) && !jsonObj.get("receiverWalletAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverWalletAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverWalletAccountId").toString()));
      }
      // validate the optional field `invoiceType`
      if (jsonObj.get("invoiceType") != null && !jsonObj.get("invoiceType").isJsonNull()) {
        InvoiceTypeEnum.validateJsonElement(jsonObj.get("invoiceType"));
      }
      // validate the optional field `documentType`
      if (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      }
      // validate the optional field `invoiceStatus`
      if (jsonObj.get("invoiceStatus") != null && !jsonObj.get("invoiceStatus").isJsonNull()) {
        InvoiceStatusEnum.validateJsonElement(jsonObj.get("invoiceStatus"));
      }
      if (jsonObj.get("invoiceReferences") != null && !jsonObj.get("invoiceReferences").isJsonNull()) {
        JsonArray jsonArrayinvoiceReferences = jsonObj.getAsJsonArray("invoiceReferences");
        if (jsonArrayinvoiceReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoiceReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoiceReferences` to be an array in the JSON string but got `%s`", jsonObj.get("invoiceReferences").toString()));
          }

          // validate the optional field `invoiceReferences` (array)
          for (int i = 0; i < jsonArrayinvoiceReferences.size(); i++) {
            InvoiceReferenceDto.validateJsonElement(jsonArrayinvoiceReferences.get(i));
          };
        }
      }
      if (jsonObj.get("invoiceItemRecords") != null && !jsonObj.get("invoiceItemRecords").isJsonNull()) {
        JsonArray jsonArrayinvoiceItemRecords = jsonObj.getAsJsonArray("invoiceItemRecords");
        if (jsonArrayinvoiceItemRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoiceItemRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoiceItemRecords` to be an array in the JSON string but got `%s`", jsonObj.get("invoiceItemRecords").toString()));
          }

          // validate the optional field `invoiceItemRecords` (array)
          for (int i = 0; i < jsonArrayinvoiceItemRecords.size(); i++) {
            InvoiceItemRecordDto.validateJsonElement(jsonArrayinvoiceItemRecords.get(i));
          };
        }
      }
      if (jsonObj.get("invoiceAdjustments") != null && !jsonObj.get("invoiceAdjustments").isJsonNull()) {
        JsonArray jsonArrayinvoiceAdjustments = jsonObj.getAsJsonArray("invoiceAdjustments");
        if (jsonArrayinvoiceAdjustments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoiceAdjustments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoiceAdjustments` to be an array in the JSON string but got `%s`", jsonObj.get("invoiceAdjustments").toString()));
          }

          // validate the optional field `invoiceAdjustments` (array)
          for (int i = 0; i < jsonArrayinvoiceAdjustments.size(); i++) {
            InvoiceAdjustmentDto.validateJsonElement(jsonArrayinvoiceAdjustments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceCreateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceCreateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceCreateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceCreateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceCreateDto>() {
           @Override
           public void write(JsonWriter out, InvoiceCreateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceCreateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceCreateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceCreateDto
   * @throws IOException if the JSON string is invalid with respect to InvoiceCreateDto
   */
  public static InvoiceCreateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceCreateDto.class);
  }

  /**
   * Convert an instance of InvoiceCreateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

