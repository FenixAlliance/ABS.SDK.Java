/*
 * InvoicingService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceLineAppliedTaxDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:31.930950900-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class InvoiceLineAppliedTaxDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_ENROLLMENT_ID = "enrollmentId";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ID)
  private String enrollmentId;

  public static final String SERIALIZED_NAME_INVOICE_LINE_ID = "invoiceLineId";
  @SerializedName(SERIALIZED_NAME_INVOICE_LINE_ID)
  private String invoiceLineId;

  public static final String SERIALIZED_NAME_TAX_POLICY_ID = "taxPolicyId";
  @SerializedName(SERIALIZED_NAME_TAX_POLICY_ID)
  private String taxPolicyId;

  public static final String SERIALIZED_NAME_ITEM_PRICE_ID = "itemPriceId";
  @SerializedName(SERIALIZED_NAME_ITEM_PRICE_ID)
  private String itemPriceId;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_TAX_AMOUNT_IN_USD = "taxAmountInUsd";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT_IN_USD)
  private Double taxAmountInUsd;

  public static final String SERIALIZED_NAME_TAX_BASE_AMOUNT_IN_USD = "taxBaseAmountInUsd";
  @SerializedName(SERIALIZED_NAME_TAX_BASE_AMOUNT_IN_USD)
  private Double taxBaseAmountInUsd;

  public static final String SERIALIZED_NAME_TAX_POLICY_NAME = "taxPolicyName";
  @SerializedName(SERIALIZED_NAME_TAX_POLICY_NAME)
  private String taxPolicyName;

  public static final String SERIALIZED_NAME_TAX_POLICY_DESCRIPTION = "taxPolicyDescription";
  @SerializedName(SERIALIZED_NAME_TAX_POLICY_DESCRIPTION)
  private String taxPolicyDescription;

  public InvoiceLineAppliedTaxDto() {
  }

  public InvoiceLineAppliedTaxDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public InvoiceLineAppliedTaxDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public InvoiceLineAppliedTaxDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public InvoiceLineAppliedTaxDto invoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * Get invoiceId
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public InvoiceLineAppliedTaxDto enrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
    return this;
  }

  /**
   * Get enrollmentId
   * @return enrollmentId
   */
  @javax.annotation.Nullable
  public String getEnrollmentId() {
    return enrollmentId;
  }

  public void setEnrollmentId(String enrollmentId) {
    this.enrollmentId = enrollmentId;
  }


  public InvoiceLineAppliedTaxDto invoiceLineId(String invoiceLineId) {
    this.invoiceLineId = invoiceLineId;
    return this;
  }

  /**
   * Get invoiceLineId
   * @return invoiceLineId
   */
  @javax.annotation.Nullable
  public String getInvoiceLineId() {
    return invoiceLineId;
  }

  public void setInvoiceLineId(String invoiceLineId) {
    this.invoiceLineId = invoiceLineId;
  }


  public InvoiceLineAppliedTaxDto taxPolicyId(String taxPolicyId) {
    this.taxPolicyId = taxPolicyId;
    return this;
  }

  /**
   * Get taxPolicyId
   * @return taxPolicyId
   */
  @javax.annotation.Nullable
  public String getTaxPolicyId() {
    return taxPolicyId;
  }

  public void setTaxPolicyId(String taxPolicyId) {
    this.taxPolicyId = taxPolicyId;
  }


  public InvoiceLineAppliedTaxDto itemPriceId(String itemPriceId) {
    this.itemPriceId = itemPriceId;
    return this;
  }

  /**
   * Get itemPriceId
   * @return itemPriceId
   */
  @javax.annotation.Nullable
  public String getItemPriceId() {
    return itemPriceId;
  }

  public void setItemPriceId(String itemPriceId) {
    this.itemPriceId = itemPriceId;
  }


  public InvoiceLineAppliedTaxDto itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public InvoiceLineAppliedTaxDto taxAmountInUsd(Double taxAmountInUsd) {
    this.taxAmountInUsd = taxAmountInUsd;
    return this;
  }

  /**
   * Get taxAmountInUsd
   * @return taxAmountInUsd
   */
  @javax.annotation.Nullable
  public Double getTaxAmountInUsd() {
    return taxAmountInUsd;
  }

  public void setTaxAmountInUsd(Double taxAmountInUsd) {
    this.taxAmountInUsd = taxAmountInUsd;
  }


  public InvoiceLineAppliedTaxDto taxBaseAmountInUsd(Double taxBaseAmountInUsd) {
    this.taxBaseAmountInUsd = taxBaseAmountInUsd;
    return this;
  }

  /**
   * Get taxBaseAmountInUsd
   * @return taxBaseAmountInUsd
   */
  @javax.annotation.Nullable
  public Double getTaxBaseAmountInUsd() {
    return taxBaseAmountInUsd;
  }

  public void setTaxBaseAmountInUsd(Double taxBaseAmountInUsd) {
    this.taxBaseAmountInUsd = taxBaseAmountInUsd;
  }


  public InvoiceLineAppliedTaxDto taxPolicyName(String taxPolicyName) {
    this.taxPolicyName = taxPolicyName;
    return this;
  }

  /**
   * Get taxPolicyName
   * @return taxPolicyName
   */
  @javax.annotation.Nullable
  public String getTaxPolicyName() {
    return taxPolicyName;
  }

  public void setTaxPolicyName(String taxPolicyName) {
    this.taxPolicyName = taxPolicyName;
  }


  public InvoiceLineAppliedTaxDto taxPolicyDescription(String taxPolicyDescription) {
    this.taxPolicyDescription = taxPolicyDescription;
    return this;
  }

  /**
   * Get taxPolicyDescription
   * @return taxPolicyDescription
   */
  @javax.annotation.Nullable
  public String getTaxPolicyDescription() {
    return taxPolicyDescription;
  }

  public void setTaxPolicyDescription(String taxPolicyDescription) {
    this.taxPolicyDescription = taxPolicyDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceLineAppliedTaxDto invoiceLineAppliedTaxDto = (InvoiceLineAppliedTaxDto) o;
    return Objects.equals(this.id, invoiceLineAppliedTaxDto.id) &&
        Objects.equals(this.timestamp, invoiceLineAppliedTaxDto.timestamp) &&
        Objects.equals(this.tenantId, invoiceLineAppliedTaxDto.tenantId) &&
        Objects.equals(this.invoiceId, invoiceLineAppliedTaxDto.invoiceId) &&
        Objects.equals(this.enrollmentId, invoiceLineAppliedTaxDto.enrollmentId) &&
        Objects.equals(this.invoiceLineId, invoiceLineAppliedTaxDto.invoiceLineId) &&
        Objects.equals(this.taxPolicyId, invoiceLineAppliedTaxDto.taxPolicyId) &&
        Objects.equals(this.itemPriceId, invoiceLineAppliedTaxDto.itemPriceId) &&
        Objects.equals(this.itemId, invoiceLineAppliedTaxDto.itemId) &&
        Objects.equals(this.taxAmountInUsd, invoiceLineAppliedTaxDto.taxAmountInUsd) &&
        Objects.equals(this.taxBaseAmountInUsd, invoiceLineAppliedTaxDto.taxBaseAmountInUsd) &&
        Objects.equals(this.taxPolicyName, invoiceLineAppliedTaxDto.taxPolicyName) &&
        Objects.equals(this.taxPolicyDescription, invoiceLineAppliedTaxDto.taxPolicyDescription);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, tenantId, invoiceId, enrollmentId, invoiceLineId, taxPolicyId, itemPriceId, itemId, taxAmountInUsd, taxBaseAmountInUsd, taxPolicyName, taxPolicyDescription);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceLineAppliedTaxDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    sb.append("    invoiceLineId: ").append(toIndentedString(invoiceLineId)).append("\n");
    sb.append("    taxPolicyId: ").append(toIndentedString(taxPolicyId)).append("\n");
    sb.append("    itemPriceId: ").append(toIndentedString(itemPriceId)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    taxAmountInUsd: ").append(toIndentedString(taxAmountInUsd)).append("\n");
    sb.append("    taxBaseAmountInUsd: ").append(toIndentedString(taxBaseAmountInUsd)).append("\n");
    sb.append("    taxPolicyName: ").append(toIndentedString(taxPolicyName)).append("\n");
    sb.append("    taxPolicyDescription: ").append(toIndentedString(taxPolicyDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("tenantId");
    openapiFields.add("invoiceId");
    openapiFields.add("enrollmentId");
    openapiFields.add("invoiceLineId");
    openapiFields.add("taxPolicyId");
    openapiFields.add("itemPriceId");
    openapiFields.add("itemId");
    openapiFields.add("taxAmountInUsd");
    openapiFields.add("taxBaseAmountInUsd");
    openapiFields.add("taxPolicyName");
    openapiFields.add("taxPolicyDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceLineAppliedTaxDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceLineAppliedTaxDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceLineAppliedTaxDto is not found in the empty JSON string", InvoiceLineAppliedTaxDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceLineAppliedTaxDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceLineAppliedTaxDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("enrollmentId") != null && !jsonObj.get("enrollmentId").isJsonNull()) && !jsonObj.get("enrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentId").toString()));
      }
      if ((jsonObj.get("invoiceLineId") != null && !jsonObj.get("invoiceLineId").isJsonNull()) && !jsonObj.get("invoiceLineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceLineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceLineId").toString()));
      }
      if ((jsonObj.get("taxPolicyId") != null && !jsonObj.get("taxPolicyId").isJsonNull()) && !jsonObj.get("taxPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxPolicyId").toString()));
      }
      if ((jsonObj.get("itemPriceId") != null && !jsonObj.get("itemPriceId").isJsonNull()) && !jsonObj.get("itemPriceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemPriceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemPriceId").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("taxPolicyName") != null && !jsonObj.get("taxPolicyName").isJsonNull()) && !jsonObj.get("taxPolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxPolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxPolicyName").toString()));
      }
      if ((jsonObj.get("taxPolicyDescription") != null && !jsonObj.get("taxPolicyDescription").isJsonNull()) && !jsonObj.get("taxPolicyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxPolicyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxPolicyDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceLineAppliedTaxDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceLineAppliedTaxDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceLineAppliedTaxDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceLineAppliedTaxDto.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceLineAppliedTaxDto>() {
           @Override
           public void write(JsonWriter out, InvoiceLineAppliedTaxDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceLineAppliedTaxDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceLineAppliedTaxDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceLineAppliedTaxDto
   * @throws IOException if the JSON string is invalid with respect to InvoiceLineAppliedTaxDto
   */
  public static InvoiceLineAppliedTaxDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceLineAppliedTaxDto.class);
  }

  /**
   * Convert an instance of InvoiceLineAppliedTaxDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

