/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressDtoListEnvelope;
import org.openapitools.client.model.CartDtoEnvelope;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedTenantDtoListEnvelope;
import org.openapitools.client.model.ExtendedTenantEnrolmentDtoListEnvelope;
import org.openapitools.client.model.ExtendedUserDtoEnvelope;
import java.io.File;
import org.openapitools.client.model.FollowRecordDtoListEnvelope;
import org.openapitools.client.model.Int32Envelope;
import org.openapitools.client.model.NotificationDtoListEnvelope;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.SocialProfileDtoEnvelope;
import org.openapitools.client.model.TenantDtoListEnvelope;
import org.openapitools.client.model.TenantEnrolmentDtoEnvelope;
import org.openapitools.client.model.TenantEnrolmentDtoListEnvelope;
import org.openapitools.client.model.TenantInvitationDtoListEnvelope;
import org.openapitools.client.model.UserDtoEnvelope;
import org.openapitools.client.model.UserSettingsDtoEnvelope;
import org.openapitools.client.model.UserSettingsUpdateDto;
import org.openapitools.client.model.UserUpdateDto;
import org.openapitools.client.model.WalletDtoEnvelope;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Count the social profiles that follow the current user
     *
     * Count the social profiles that follow the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countCurrentUserFollowersAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.countCurrentUserFollowersAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Count the social profiles that the current user follows
     *
     * Count the social profiles that the current user follows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countCurrentUserFollowsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.countCurrentUserFollowsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Count the notifications for the current user
     *
     * Count the notifications for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countCurrentUserNotificationsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.countCurrentUserNotificationsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Count the tenants that the current user is enrolled in
     *
     * Count the tenants that the current user is enrolled in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countCurrentUserTenantsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        Int32Envelope response = api.countCurrentUserTenantsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of addresses for the current user
     *
     * Get the list of addresses for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserAddressesAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        AddressDtoListEnvelope response = api.getCurrentUserAddressesAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Gets the current user
     *
     * Get the currently acting user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        UserDtoEnvelope response = api.getCurrentUserAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the current user&#39;s avatar
     *
     * Get the current user&#39;s avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserAvatarAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        File response = api.getCurrentUserAvatarAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the current user&#39;s cart
     *
     * Get the current user&#39;s cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserCartAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        CartDtoEnvelope response = api.getCurrentUserCartAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of enrollments for the current user
     *
     * Get the list of enrollments for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserEnrollmentsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        TenantEnrolmentDtoListEnvelope response = api.getCurrentUserEnrollmentsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of enrollments for the current user
     *
     * Get the list of enrollments for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserEnrollmentsExtendedAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedTenantEnrolmentDtoListEnvelope response = api.getCurrentUserEnrollmentsExtendedAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the social profiles that follow the current user
     *
     * Get the social profiles that follow the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserFollowersAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        FollowRecordDtoListEnvelope response = api.getCurrentUserFollowersAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the social profiles that the current user follows
     *
     * Get the social profiles that the current user follows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserFollowsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        FollowRecordDtoListEnvelope response = api.getCurrentUserFollowsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of tenant enrollment invitations for the current user
     *
     * Get the list of tenant enrollment invitations for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserInvitationAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        TenantInvitationDtoListEnvelope response = api.getCurrentUserInvitationAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of notifications for the current user
     *
     * Get the list of notifications for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserNotificationsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        NotificationDtoListEnvelope response = api.getCurrentUserNotificationsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the settings for the current user
     *
     * Get the settings for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserSettingsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        UserSettingsDtoEnvelope response = api.getCurrentUserSettingsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the current user&#39;s social profile
     *
     * Get the current user&#39;s social profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserSocialProfileAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        SocialProfileDtoEnvelope response = api.getCurrentUserSocialProfileAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the tenants that the current user is enrolled in
     *
     * Get the tenants that the current user is enrolled in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTenantsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        TenantDtoListEnvelope response = api.getCurrentUserTenantsAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the tenants that the current user is enrolled in
     *
     * Get the tenants that the current user is enrolled in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTenantsExtendedAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedTenantDtoListEnvelope response = api.getCurrentUserTenantsExtendedAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the current user&#39;s billing profile
     *
     * Get the current user&#39;s billing profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserWalletAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        WalletDtoEnvelope response = api.getCurrentUserWalletAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get the current user&#39;s extended profile
     *
     * Get the current user&#39;s extended profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedCurrentUserAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedUserDtoEnvelope response = api.getExtendedCurrentUserAsync(apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a single TenantEnrollment by its ID
     *
     * Get a single TenantEnrollment by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantEnrollmentAsyncTest() throws ApiException {
        String enrollmentId = null;
        String apiVersion = null;
        String xApiVersion = null;
        Object body = null;
        TenantEnrolmentDtoEnvelope response = api.getTenantEnrollmentAsync(enrollmentId, apiVersion, xApiVersion, body);
        // TODO: test validations
    }

    /**
     * Partially update the current user&#39;s profile
     *
     * Partially update the current user&#39;s profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchCurrentUserAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        List<Operation> operation = null;
        EmptyEnvelope response = api.patchCurrentUserAsync(apiVersion, xApiVersion, operation);
        // TODO: test validations
    }

    /**
     * Update the current user&#39;s avatar
     *
     * Update the current user&#39;s avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAvatarAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        File avatar = null;
        EmptyEnvelope response = api.updateAvatarAsync(apiVersion, xApiVersion, avatar);
        // TODO: test validations
    }

    /**
     * Update the current user&#39;s profile
     *
     * Update the current user&#39;s profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrentUserAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        UserUpdateDto userUpdateDto = null;
        EmptyEnvelope response = api.updateCurrentUserAsync(apiVersion, xApiVersion, userUpdateDto);
        // TODO: test validations
    }

    /**
     * Update the settings for the current user
     *
     * Update the settings for the current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrentUserSettingsAsyncTest() throws ApiException {
        String apiVersion = null;
        String xApiVersion = null;
        UserSettingsUpdateDto userSettingsUpdateDto = null;
        UserSettingsDtoEnvelope response = api.updateCurrentUserSettingsAsync(apiVersion, xApiVersion, userSettingsUpdateDto);
        // TODO: test validations
    }

}
