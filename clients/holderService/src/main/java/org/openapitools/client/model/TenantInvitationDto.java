/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TenantInvitationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:07.227137-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class TenantInvitationDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_REVOKED = "revoked";
  @SerializedName(SERIALIZED_NAME_REVOKED)
  private Boolean revoked;

  public static final String SERIALIZED_NAME_REDEEMED = "redeemed";
  @SerializedName(SERIALIZED_NAME_REDEEMED)
  private Boolean redeemed;

  public static final String SERIALIZED_NAME_REDEEMED_TIMESTAMP = "redeemedTimestamp";
  @SerializedName(SERIALIZED_NAME_REDEEMED_TIMESTAMP)
  private OffsetDateTime redeemedTimestamp;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_CREATOR_ENROLLMENT_ID = "creatorEnrollmentId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ENROLLMENT_ID)
  private String creatorEnrollmentId;

  public static final String SERIALIZED_NAME_RELATED_ENROLLMENT_ID = "relatedEnrollmentId";
  @SerializedName(SERIALIZED_NAME_RELATED_ENROLLMENT_ID)
  private String relatedEnrollmentId;

  public TenantInvitationDto() {
  }

  public TenantInvitationDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TenantInvitationDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public TenantInvitationDto tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public TenantInvitationDto revoked(Boolean revoked) {
    this.revoked = revoked;
    return this;
  }

  /**
   * Get revoked
   * @return revoked
   */
  @javax.annotation.Nullable
  public Boolean getRevoked() {
    return revoked;
  }

  public void setRevoked(Boolean revoked) {
    this.revoked = revoked;
  }


  public TenantInvitationDto redeemed(Boolean redeemed) {
    this.redeemed = redeemed;
    return this;
  }

  /**
   * Get redeemed
   * @return redeemed
   */
  @javax.annotation.Nullable
  public Boolean getRedeemed() {
    return redeemed;
  }

  public void setRedeemed(Boolean redeemed) {
    this.redeemed = redeemed;
  }


  public TenantInvitationDto redeemedTimestamp(OffsetDateTime redeemedTimestamp) {
    this.redeemedTimestamp = redeemedTimestamp;
    return this;
  }

  /**
   * Get redeemedTimestamp
   * @return redeemedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRedeemedTimestamp() {
    return redeemedTimestamp;
  }

  public void setRedeemedTimestamp(OffsetDateTime redeemedTimestamp) {
    this.redeemedTimestamp = redeemedTimestamp;
  }


  public TenantInvitationDto userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Get userEmail
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public TenantInvitationDto creatorEnrollmentId(String creatorEnrollmentId) {
    this.creatorEnrollmentId = creatorEnrollmentId;
    return this;
  }

  /**
   * Get creatorEnrollmentId
   * @return creatorEnrollmentId
   */
  @javax.annotation.Nullable
  public String getCreatorEnrollmentId() {
    return creatorEnrollmentId;
  }

  public void setCreatorEnrollmentId(String creatorEnrollmentId) {
    this.creatorEnrollmentId = creatorEnrollmentId;
  }


  public TenantInvitationDto relatedEnrollmentId(String relatedEnrollmentId) {
    this.relatedEnrollmentId = relatedEnrollmentId;
    return this;
  }

  /**
   * Get relatedEnrollmentId
   * @return relatedEnrollmentId
   */
  @javax.annotation.Nullable
  public String getRelatedEnrollmentId() {
    return relatedEnrollmentId;
  }

  public void setRelatedEnrollmentId(String relatedEnrollmentId) {
    this.relatedEnrollmentId = relatedEnrollmentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantInvitationDto tenantInvitationDto = (TenantInvitationDto) o;
    return Objects.equals(this.id, tenantInvitationDto.id) &&
        Objects.equals(this.timestamp, tenantInvitationDto.timestamp) &&
        Objects.equals(this.tenantId, tenantInvitationDto.tenantId) &&
        Objects.equals(this.revoked, tenantInvitationDto.revoked) &&
        Objects.equals(this.redeemed, tenantInvitationDto.redeemed) &&
        Objects.equals(this.redeemedTimestamp, tenantInvitationDto.redeemedTimestamp) &&
        Objects.equals(this.userEmail, tenantInvitationDto.userEmail) &&
        Objects.equals(this.creatorEnrollmentId, tenantInvitationDto.creatorEnrollmentId) &&
        Objects.equals(this.relatedEnrollmentId, tenantInvitationDto.relatedEnrollmentId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, tenantId, revoked, redeemed, redeemedTimestamp, userEmail, creatorEnrollmentId, relatedEnrollmentId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantInvitationDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("    redeemed: ").append(toIndentedString(redeemed)).append("\n");
    sb.append("    redeemedTimestamp: ").append(toIndentedString(redeemedTimestamp)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    creatorEnrollmentId: ").append(toIndentedString(creatorEnrollmentId)).append("\n");
    sb.append("    relatedEnrollmentId: ").append(toIndentedString(relatedEnrollmentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("tenantId");
    openapiFields.add("revoked");
    openapiFields.add("redeemed");
    openapiFields.add("redeemedTimestamp");
    openapiFields.add("userEmail");
    openapiFields.add("creatorEnrollmentId");
    openapiFields.add("relatedEnrollmentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TenantInvitationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenantInvitationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenantInvitationDto is not found in the empty JSON string", TenantInvitationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenantInvitationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenantInvitationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("creatorEnrollmentId") != null && !jsonObj.get("creatorEnrollmentId").isJsonNull()) && !jsonObj.get("creatorEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorEnrollmentId").toString()));
      }
      if ((jsonObj.get("relatedEnrollmentId") != null && !jsonObj.get("relatedEnrollmentId").isJsonNull()) && !jsonObj.get("relatedEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedEnrollmentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenantInvitationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenantInvitationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenantInvitationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenantInvitationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TenantInvitationDto>() {
           @Override
           public void write(JsonWriter out, TenantInvitationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenantInvitationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TenantInvitationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TenantInvitationDto
   * @throws IOException if the JSON string is invalid with respect to TenantInvitationDto
   */
  public static TenantInvitationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenantInvitationDto.class);
  }

  /**
   * Convert an instance of TenantInvitationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

