/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WalletDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:07.227137-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class WalletDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_CRYPTO_BALANCE = "cryptoBalance";
  @SerializedName(SERIALIZED_NAME_CRYPTO_BALANCE)
  private Double cryptoBalance;

  public static final String SERIALIZED_NAME_TEST_MODE = "testMode";
  @SerializedName(SERIALIZED_NAME_TEST_MODE)
  private Boolean testMode;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_FOREX_RATE = "forexRate";
  @SerializedName(SERIALIZED_NAME_FOREX_RATE)
  private Double forexRate;

  public static final String SERIALIZED_NAME_BALANCE_IN_USD = "balanceInUsd";
  @SerializedName(SERIALIZED_NAME_BALANCE_IN_USD)
  private Double balanceInUsd;

  public static final String SERIALIZED_NAME_MAIN_NET_ETHER_BALANCE = "mainNetEtherBalance";
  @SerializedName(SERIALIZED_NAME_MAIN_NET_ETHER_BALANCE)
  private Double mainNetEtherBalance;

  public static final String SERIALIZED_NAME_ETHEREUM_ADDRESS = "ethereumAddress";
  @SerializedName(SERIALIZED_NAME_ETHEREUM_ADDRESS)
  private String ethereumAddress;

  public static final String SERIALIZED_NAME_ETHEREUM_PUBLIC_KEY = "ethereumPublicKey";
  @SerializedName(SERIALIZED_NAME_ETHEREUM_PUBLIC_KEY)
  private String ethereumPublicKey;

  public static final String SERIALIZED_NAME_ETHEREUM_PRIVATE_KEY = "ethereumPrivateKey";
  @SerializedName(SERIALIZED_NAME_ETHEREUM_PRIVATE_KEY)
  private String ethereumPrivateKey;

  public static final String SERIALIZED_NAME_ROLLING_RESERVE_PERCENT = "rollingReservePercent";
  @SerializedName(SERIALIZED_NAME_ROLLING_RESERVE_PERCENT)
  private Double rollingReservePercent;

  public WalletDto() {
  }

  public WalletDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WalletDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public WalletDto balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public WalletDto cryptoBalance(Double cryptoBalance) {
    this.cryptoBalance = cryptoBalance;
    return this;
  }

  /**
   * Get cryptoBalance
   * @return cryptoBalance
   */
  @javax.annotation.Nullable
  public Double getCryptoBalance() {
    return cryptoBalance;
  }

  public void setCryptoBalance(Double cryptoBalance) {
    this.cryptoBalance = cryptoBalance;
  }


  public WalletDto testMode(Boolean testMode) {
    this.testMode = testMode;
    return this;
  }

  /**
   * Get testMode
   * @return testMode
   */
  @javax.annotation.Nullable
  public Boolean getTestMode() {
    return testMode;
  }

  public void setTestMode(Boolean testMode) {
    this.testMode = testMode;
  }


  public WalletDto verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Get verified
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public WalletDto type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public WalletDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public WalletDto forexRate(Double forexRate) {
    this.forexRate = forexRate;
    return this;
  }

  /**
   * Get forexRate
   * @return forexRate
   */
  @javax.annotation.Nullable
  public Double getForexRate() {
    return forexRate;
  }

  public void setForexRate(Double forexRate) {
    this.forexRate = forexRate;
  }


  public WalletDto balanceInUsd(Double balanceInUsd) {
    this.balanceInUsd = balanceInUsd;
    return this;
  }

  /**
   * Get balanceInUsd
   * @return balanceInUsd
   */
  @javax.annotation.Nullable
  public Double getBalanceInUsd() {
    return balanceInUsd;
  }

  public void setBalanceInUsd(Double balanceInUsd) {
    this.balanceInUsd = balanceInUsd;
  }


  public WalletDto mainNetEtherBalance(Double mainNetEtherBalance) {
    this.mainNetEtherBalance = mainNetEtherBalance;
    return this;
  }

  /**
   * Get mainNetEtherBalance
   * @return mainNetEtherBalance
   */
  @javax.annotation.Nullable
  public Double getMainNetEtherBalance() {
    return mainNetEtherBalance;
  }

  public void setMainNetEtherBalance(Double mainNetEtherBalance) {
    this.mainNetEtherBalance = mainNetEtherBalance;
  }


  public WalletDto ethereumAddress(String ethereumAddress) {
    this.ethereumAddress = ethereumAddress;
    return this;
  }

  /**
   * Get ethereumAddress
   * @return ethereumAddress
   */
  @javax.annotation.Nullable
  public String getEthereumAddress() {
    return ethereumAddress;
  }

  public void setEthereumAddress(String ethereumAddress) {
    this.ethereumAddress = ethereumAddress;
  }


  public WalletDto ethereumPublicKey(String ethereumPublicKey) {
    this.ethereumPublicKey = ethereumPublicKey;
    return this;
  }

  /**
   * Get ethereumPublicKey
   * @return ethereumPublicKey
   */
  @javax.annotation.Nullable
  public String getEthereumPublicKey() {
    return ethereumPublicKey;
  }

  public void setEthereumPublicKey(String ethereumPublicKey) {
    this.ethereumPublicKey = ethereumPublicKey;
  }


  public WalletDto ethereumPrivateKey(String ethereumPrivateKey) {
    this.ethereumPrivateKey = ethereumPrivateKey;
    return this;
  }

  /**
   * Get ethereumPrivateKey
   * @return ethereumPrivateKey
   */
  @javax.annotation.Nullable
  public String getEthereumPrivateKey() {
    return ethereumPrivateKey;
  }

  public void setEthereumPrivateKey(String ethereumPrivateKey) {
    this.ethereumPrivateKey = ethereumPrivateKey;
  }


  public WalletDto rollingReservePercent(Double rollingReservePercent) {
    this.rollingReservePercent = rollingReservePercent;
    return this;
  }

  /**
   * Get rollingReservePercent
   * @return rollingReservePercent
   */
  @javax.annotation.Nullable
  public Double getRollingReservePercent() {
    return rollingReservePercent;
  }

  public void setRollingReservePercent(Double rollingReservePercent) {
    this.rollingReservePercent = rollingReservePercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletDto walletDto = (WalletDto) o;
    return Objects.equals(this.id, walletDto.id) &&
        Objects.equals(this.timestamp, walletDto.timestamp) &&
        Objects.equals(this.balance, walletDto.balance) &&
        Objects.equals(this.cryptoBalance, walletDto.cryptoBalance) &&
        Objects.equals(this.testMode, walletDto.testMode) &&
        Objects.equals(this.verified, walletDto.verified) &&
        Objects.equals(this.type, walletDto.type) &&
        Objects.equals(this.currencyId, walletDto.currencyId) &&
        Objects.equals(this.forexRate, walletDto.forexRate) &&
        Objects.equals(this.balanceInUsd, walletDto.balanceInUsd) &&
        Objects.equals(this.mainNetEtherBalance, walletDto.mainNetEtherBalance) &&
        Objects.equals(this.ethereumAddress, walletDto.ethereumAddress) &&
        Objects.equals(this.ethereumPublicKey, walletDto.ethereumPublicKey) &&
        Objects.equals(this.ethereumPrivateKey, walletDto.ethereumPrivateKey) &&
        Objects.equals(this.rollingReservePercent, walletDto.rollingReservePercent);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, balance, cryptoBalance, testMode, verified, type, currencyId, forexRate, balanceInUsd, mainNetEtherBalance, ethereumAddress, ethereumPublicKey, ethereumPrivateKey, rollingReservePercent);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    cryptoBalance: ").append(toIndentedString(cryptoBalance)).append("\n");
    sb.append("    testMode: ").append(toIndentedString(testMode)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    forexRate: ").append(toIndentedString(forexRate)).append("\n");
    sb.append("    balanceInUsd: ").append(toIndentedString(balanceInUsd)).append("\n");
    sb.append("    mainNetEtherBalance: ").append(toIndentedString(mainNetEtherBalance)).append("\n");
    sb.append("    ethereumAddress: ").append(toIndentedString(ethereumAddress)).append("\n");
    sb.append("    ethereumPublicKey: ").append(toIndentedString(ethereumPublicKey)).append("\n");
    sb.append("    ethereumPrivateKey: ").append(toIndentedString(ethereumPrivateKey)).append("\n");
    sb.append("    rollingReservePercent: ").append(toIndentedString(rollingReservePercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("balance");
    openapiFields.add("cryptoBalance");
    openapiFields.add("testMode");
    openapiFields.add("verified");
    openapiFields.add("type");
    openapiFields.add("currencyId");
    openapiFields.add("forexRate");
    openapiFields.add("balanceInUsd");
    openapiFields.add("mainNetEtherBalance");
    openapiFields.add("ethereumAddress");
    openapiFields.add("ethereumPublicKey");
    openapiFields.add("ethereumPrivateKey");
    openapiFields.add("rollingReservePercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WalletDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WalletDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalletDto is not found in the empty JSON string", WalletDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WalletDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalletDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("ethereumAddress") != null && !jsonObj.get("ethereumAddress").isJsonNull()) && !jsonObj.get("ethereumAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethereumAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethereumAddress").toString()));
      }
      if ((jsonObj.get("ethereumPublicKey") != null && !jsonObj.get("ethereumPublicKey").isJsonNull()) && !jsonObj.get("ethereumPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethereumPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethereumPublicKey").toString()));
      }
      if ((jsonObj.get("ethereumPrivateKey") != null && !jsonObj.get("ethereumPrivateKey").isJsonNull()) && !jsonObj.get("ethereumPrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethereumPrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethereumPrivateKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalletDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalletDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalletDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalletDto.class));

       return (TypeAdapter<T>) new TypeAdapter<WalletDto>() {
           @Override
           public void write(JsonWriter out, WalletDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalletDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WalletDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WalletDto
   * @throws IOException if the JSON string is invalid with respect to WalletDto
   */
  public static WalletDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalletDto.class);
  }

  /**
   * Convert an instance of WalletDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

