/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:07.227137-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class NotificationDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private Boolean read;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SOCIAL_PROFILE_I_D = "socialProfileID";
  @SerializedName(SERIALIZED_NAME_SOCIAL_PROFILE_I_D)
  private String socialProfileID;

  public static final String SERIALIZED_NAME_READ_TIMESTAMP = "readTimestamp";
  @SerializedName(SERIALIZED_NAME_READ_TIMESTAMP)
  private OffsetDateTime readTimestamp;

  public static final String SERIALIZED_NAME_ISSUED_TIMESTAMP = "issuedTimestamp";
  @SerializedName(SERIALIZED_NAME_ISSUED_TIMESTAMP)
  private OffsetDateTime issuedTimestamp;

  public NotificationDto() {
  }

  public NotificationDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public NotificationDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public NotificationDto read(Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nullable
  public Boolean getRead() {
    return read;
  }

  public void setRead(Boolean read) {
    this.read = read;
  }


  public NotificationDto icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public NotificationDto message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NotificationDto redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public NotificationDto socialProfileID(String socialProfileID) {
    this.socialProfileID = socialProfileID;
    return this;
  }

  /**
   * Get socialProfileID
   * @return socialProfileID
   */
  @javax.annotation.Nullable
  public String getSocialProfileID() {
    return socialProfileID;
  }

  public void setSocialProfileID(String socialProfileID) {
    this.socialProfileID = socialProfileID;
  }


  public NotificationDto readTimestamp(OffsetDateTime readTimestamp) {
    this.readTimestamp = readTimestamp;
    return this;
  }

  /**
   * Get readTimestamp
   * @return readTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReadTimestamp() {
    return readTimestamp;
  }

  public void setReadTimestamp(OffsetDateTime readTimestamp) {
    this.readTimestamp = readTimestamp;
  }


  public NotificationDto issuedTimestamp(OffsetDateTime issuedTimestamp) {
    this.issuedTimestamp = issuedTimestamp;
    return this;
  }

  /**
   * Get issuedTimestamp
   * @return issuedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIssuedTimestamp() {
    return issuedTimestamp;
  }

  public void setIssuedTimestamp(OffsetDateTime issuedTimestamp) {
    this.issuedTimestamp = issuedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationDto notificationDto = (NotificationDto) o;
    return Objects.equals(this.id, notificationDto.id) &&
        Objects.equals(this.timestamp, notificationDto.timestamp) &&
        Objects.equals(this.read, notificationDto.read) &&
        Objects.equals(this.icon, notificationDto.icon) &&
        Objects.equals(this.message, notificationDto.message) &&
        Objects.equals(this.redirectUrl, notificationDto.redirectUrl) &&
        Objects.equals(this.socialProfileID, notificationDto.socialProfileID) &&
        Objects.equals(this.readTimestamp, notificationDto.readTimestamp) &&
        Objects.equals(this.issuedTimestamp, notificationDto.issuedTimestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, read, icon, message, redirectUrl, socialProfileID, readTimestamp, issuedTimestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    socialProfileID: ").append(toIndentedString(socialProfileID)).append("\n");
    sb.append("    readTimestamp: ").append(toIndentedString(readTimestamp)).append("\n");
    sb.append("    issuedTimestamp: ").append(toIndentedString(issuedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("read");
    openapiFields.add("icon");
    openapiFields.add("message");
    openapiFields.add("redirectUrl");
    openapiFields.add("socialProfileID");
    openapiFields.add("readTimestamp");
    openapiFields.add("issuedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationDto is not found in the empty JSON string", NotificationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("socialProfileID") != null && !jsonObj.get("socialProfileID").isJsonNull()) && !jsonObj.get("socialProfileID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialProfileID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialProfileID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationDto>() {
           @Override
           public void write(JsonWriter out, NotificationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationDto
   * @throws IOException if the JSON string is invalid with respect to NotificationDto
   */
  public static NotificationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationDto.class);
  }

  /**
   * Convert an instance of NotificationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

