/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:07.227137-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class UserDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_QUALIFIED_NAME = "qualifiedName";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_NAME)
  private String qualifiedName;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "publicName";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_COVER_URL = "coverUrl";
  @SerializedName(SERIALIZED_NAME_COVER_URL)
  private String coverUrl;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatarUrl";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_GIT_HUB_URL = "gitHubUrl";
  @SerializedName(SERIALIZED_NAME_GIT_HUB_URL)
  private String gitHubUrl;

  public static final String SERIALIZED_NAME_COUNTRY_ID = "countryId";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ID)
  private String countryId;

  public static final String SERIALIZED_NAME_TIMEZONE_ID = "timezoneId";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_ID)
  private String timezoneId;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public static final String SERIALIZED_NAME_TWITTER_URL = "twitterUrl";
  @SerializedName(SERIALIZED_NAME_TWITTER_URL)
  private String twitterUrl;

  public static final String SERIALIZED_NAME_YOU_TUBE_URL = "youTubeUrl";
  @SerializedName(SERIALIZED_NAME_YOU_TUBE_URL)
  private String youTubeUrl;

  public static final String SERIALIZED_NAME_LINKED_IN_URL = "linkedInUrl";
  @SerializedName(SERIALIZED_NAME_LINKED_IN_URL)
  private String linkedInUrl;

  public static final String SERIALIZED_NAME_FACEBOOK_URL = "facebookUrl";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_URL)
  private String facebookUrl;

  public static final String SERIALIZED_NAME_INSTAGRAM_URL = "instagramUrl";
  @SerializedName(SERIALIZED_NAME_INSTAGRAM_URL)
  private String instagramUrl;

  public static final String SERIALIZED_NAME_SOCIAL_PROFILE_ID = "socialProfileId";
  @SerializedName(SERIALIZED_NAME_SOCIAL_PROFILE_ID)
  private String socialProfileId;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private OffsetDateTime birthday;

  public static final String SERIALIZED_NAME_ID_PROVIDER = "idProvider";
  @SerializedName(SERIALIZED_NAME_ID_PROVIDER)
  private String idProvider;

  public static final String SERIALIZED_NAME_LANGUAGE_ID = "languageId";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_ID)
  private String languageId;

  /**
   * Gets or Sets gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    GenderEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(Integer value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_CITY_ID = "cityId";
  @SerializedName(SERIALIZED_NAME_CITY_ID)
  private String cityId;

  public static final String SERIALIZED_NAME_STATE_ID = "stateId";
  @SerializedName(SERIALIZED_NAME_STATE_ID)
  private String stateId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_SOCIAL_FEED_ID = "socialFeedId";
  @SerializedName(SERIALIZED_NAME_SOCIAL_FEED_ID)
  private String socialFeedId;

  public static final String SERIALIZED_NAME_CURRENT_TENANT_ID = "currentTenantId";
  @SerializedName(SERIALIZED_NAME_CURRENT_TENANT_ID)
  private String currentTenantId;

  public static final String SERIALIZED_NAME_CURRENT_ENROLLMENT_ID = "currentEnrollmentId";
  @SerializedName(SERIALIZED_NAME_CURRENT_ENROLLMENT_ID)
  private String currentEnrollmentId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CART_ID = "cartId";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_WALLET_ID = "walletId";
  @SerializedName(SERIALIZED_NAME_WALLET_ID)
  private String walletId;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_CURRENCY_ID = "currencyId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ID)
  private String currencyId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PUBLIC_IDENTIFIER = "publicIdentifier";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IDENTIFIER)
  private String publicIdentifier;

  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER = "identityProvider";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER)
  private String identityProvider;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_CONFIRMED = "phoneNumberConfirmed";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_CONFIRMED)
  private Boolean phoneNumberConfirmed;

  public static final String SERIALIZED_NAME_EMAIL_CONFIRMED = "emailConfirmed";
  @SerializedName(SERIALIZED_NAME_EMAIL_CONFIRMED)
  private Boolean emailConfirmed;

  /**
   * Gets or Sets availability
   */
  @JsonAdapter(AvailabilityEnum.Adapter.class)
  public enum AvailabilityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    AvailabilityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityEnum fromValue(Integer value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AvailabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      AvailabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private AvailabilityEnum availability;

  public static final String SERIALIZED_NAME_LOCKOUT_ENABLED = "lockoutEnabled";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_ENABLED)
  private Boolean lockoutEnabled;

  public static final String SERIALIZED_NAME_LOCKOUT_END = "lockoutEnd";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_END)
  private OffsetDateTime lockoutEnd;

  public static final String SERIALIZED_NAME_ENROLLMENTS_COUNT = "enrollmentsCount";
  @SerializedName(SERIALIZED_NAME_ENROLLMENTS_COUNT)
  private Integer enrollmentsCount;

  /**
   * Gets or Sets siteTheme
   */
  @JsonAdapter(SiteThemeEnum.Adapter.class)
  public enum SiteThemeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    SiteThemeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SiteThemeEnum fromValue(Integer value) {
      for (SiteThemeEnum b : SiteThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SiteThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SiteThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SiteThemeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SiteThemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SiteThemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SITE_THEME = "siteTheme";
  @SerializedName(SERIALIZED_NAME_SITE_THEME)
  private SiteThemeEnum siteTheme;

  public UserDto() {
  }

  public UserDto(
     String fullName
  ) {
    this();
    this.fullName = fullName;
  }

  public UserDto id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserDto timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }



  public UserDto qualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
    return this;
  }

  /**
   * Get qualifiedName
   * @return qualifiedName
   */
  @javax.annotation.Nullable
  public String getQualifiedName() {
    return qualifiedName;
  }

  public void setQualifiedName(String qualifiedName) {
    this.qualifiedName = qualifiedName;
  }


  public UserDto publicName(String publicName) {
    this.publicName = publicName;
    return this;
  }

  /**
   * Get publicName
   * @return publicName
   */
  @javax.annotation.Nullable
  public String getPublicName() {
    return publicName;
  }

  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public UserDto lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserDto firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserDto coverUrl(String coverUrl) {
    this.coverUrl = coverUrl;
    return this;
  }

  /**
   * Get coverUrl
   * @return coverUrl
   */
  @javax.annotation.Nullable
  public String getCoverUrl() {
    return coverUrl;
  }

  public void setCoverUrl(String coverUrl) {
    this.coverUrl = coverUrl;
  }


  public UserDto avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public UserDto gitHubUrl(String gitHubUrl) {
    this.gitHubUrl = gitHubUrl;
    return this;
  }

  /**
   * Get gitHubUrl
   * @return gitHubUrl
   */
  @javax.annotation.Nullable
  public String getGitHubUrl() {
    return gitHubUrl;
  }

  public void setGitHubUrl(String gitHubUrl) {
    this.gitHubUrl = gitHubUrl;
  }


  public UserDto countryId(String countryId) {
    this.countryId = countryId;
    return this;
  }

  /**
   * Get countryId
   * @return countryId
   */
  @javax.annotation.Nullable
  public String getCountryId() {
    return countryId;
  }

  public void setCountryId(String countryId) {
    this.countryId = countryId;
  }


  public UserDto timezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
    return this;
  }

  /**
   * Get timezoneId
   * @return timezoneId
   */
  @javax.annotation.Nullable
  public String getTimezoneId() {
    return timezoneId;
  }

  public void setTimezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
  }


  public UserDto websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Get websiteUrl
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }


  public UserDto twitterUrl(String twitterUrl) {
    this.twitterUrl = twitterUrl;
    return this;
  }

  /**
   * Get twitterUrl
   * @return twitterUrl
   */
  @javax.annotation.Nullable
  public String getTwitterUrl() {
    return twitterUrl;
  }

  public void setTwitterUrl(String twitterUrl) {
    this.twitterUrl = twitterUrl;
  }


  public UserDto youTubeUrl(String youTubeUrl) {
    this.youTubeUrl = youTubeUrl;
    return this;
  }

  /**
   * Get youTubeUrl
   * @return youTubeUrl
   */
  @javax.annotation.Nullable
  public String getYouTubeUrl() {
    return youTubeUrl;
  }

  public void setYouTubeUrl(String youTubeUrl) {
    this.youTubeUrl = youTubeUrl;
  }


  public UserDto linkedInUrl(String linkedInUrl) {
    this.linkedInUrl = linkedInUrl;
    return this;
  }

  /**
   * Get linkedInUrl
   * @return linkedInUrl
   */
  @javax.annotation.Nullable
  public String getLinkedInUrl() {
    return linkedInUrl;
  }

  public void setLinkedInUrl(String linkedInUrl) {
    this.linkedInUrl = linkedInUrl;
  }


  public UserDto facebookUrl(String facebookUrl) {
    this.facebookUrl = facebookUrl;
    return this;
  }

  /**
   * Get facebookUrl
   * @return facebookUrl
   */
  @javax.annotation.Nullable
  public String getFacebookUrl() {
    return facebookUrl;
  }

  public void setFacebookUrl(String facebookUrl) {
    this.facebookUrl = facebookUrl;
  }


  public UserDto instagramUrl(String instagramUrl) {
    this.instagramUrl = instagramUrl;
    return this;
  }

  /**
   * Get instagramUrl
   * @return instagramUrl
   */
  @javax.annotation.Nullable
  public String getInstagramUrl() {
    return instagramUrl;
  }

  public void setInstagramUrl(String instagramUrl) {
    this.instagramUrl = instagramUrl;
  }


  public UserDto socialProfileId(String socialProfileId) {
    this.socialProfileId = socialProfileId;
    return this;
  }

  /**
   * Get socialProfileId
   * @return socialProfileId
   */
  @javax.annotation.Nullable
  public String getSocialProfileId() {
    return socialProfileId;
  }

  public void setSocialProfileId(String socialProfileId) {
    this.socialProfileId = socialProfileId;
  }


  public UserDto birthday(OffsetDateTime birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Get birthday
   * @return birthday
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBirthday() {
    return birthday;
  }

  public void setBirthday(OffsetDateTime birthday) {
    this.birthday = birthday;
  }


  public UserDto idProvider(String idProvider) {
    this.idProvider = idProvider;
    return this;
  }

  /**
   * Get idProvider
   * @return idProvider
   */
  @javax.annotation.Nullable
  public String getIdProvider() {
    return idProvider;
  }

  public void setIdProvider(String idProvider) {
    this.idProvider = idProvider;
  }


  public UserDto languageId(String languageId) {
    this.languageId = languageId;
    return this;
  }

  /**
   * Get languageId
   * @return languageId
   */
  @javax.annotation.Nullable
  public String getLanguageId() {
    return languageId;
  }

  public void setLanguageId(String languageId) {
    this.languageId = languageId;
  }


  public UserDto gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public UserDto cityId(String cityId) {
    this.cityId = cityId;
    return this;
  }

  /**
   * Get cityId
   * @return cityId
   */
  @javax.annotation.Nullable
  public String getCityId() {
    return cityId;
  }

  public void setCityId(String cityId) {
    this.cityId = cityId;
  }


  public UserDto stateId(String stateId) {
    this.stateId = stateId;
    return this;
  }

  /**
   * Get stateId
   * @return stateId
   */
  @javax.annotation.Nullable
  public String getStateId() {
    return stateId;
  }

  public void setStateId(String stateId) {
    this.stateId = stateId;
  }


  public UserDto email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserDto about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public UserDto jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Get jobTitle
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public UserDto socialFeedId(String socialFeedId) {
    this.socialFeedId = socialFeedId;
    return this;
  }

  /**
   * Get socialFeedId
   * @return socialFeedId
   */
  @javax.annotation.Nullable
  public String getSocialFeedId() {
    return socialFeedId;
  }

  public void setSocialFeedId(String socialFeedId) {
    this.socialFeedId = socialFeedId;
  }


  public UserDto currentTenantId(String currentTenantId) {
    this.currentTenantId = currentTenantId;
    return this;
  }

  /**
   * Get currentTenantId
   * @return currentTenantId
   */
  @javax.annotation.Nullable
  public String getCurrentTenantId() {
    return currentTenantId;
  }

  public void setCurrentTenantId(String currentTenantId) {
    this.currentTenantId = currentTenantId;
  }


  public UserDto currentEnrollmentId(String currentEnrollmentId) {
    this.currentEnrollmentId = currentEnrollmentId;
    return this;
  }

  /**
   * Get currentEnrollmentId
   * @return currentEnrollmentId
   */
  @javax.annotation.Nullable
  public String getCurrentEnrollmentId() {
    return currentEnrollmentId;
  }

  public void setCurrentEnrollmentId(String currentEnrollmentId) {
    this.currentEnrollmentId = currentEnrollmentId;
  }


  public UserDto status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public UserDto cartId(String cartId) {
    this.cartId = cartId;
    return this;
  }

  /**
   * Get cartId
   * @return cartId
   */
  @javax.annotation.Nullable
  public String getCartId() {
    return cartId;
  }

  public void setCartId(String cartId) {
    this.cartId = cartId;
  }


  public UserDto walletId(String walletId) {
    this.walletId = walletId;
    return this;
  }

  /**
   * Get walletId
   * @return walletId
   */
  @javax.annotation.Nullable
  public String getWalletId() {
    return walletId;
  }

  public void setWalletId(String walletId) {
    this.walletId = walletId;
  }


  public UserDto userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public UserDto currencyId(String currencyId) {
    this.currencyId = currencyId;
    return this;
  }

  /**
   * Get currencyId
   * @return currencyId
   */
  @javax.annotation.Nullable
  public String getCurrencyId() {
    return currencyId;
  }

  public void setCurrencyId(String currencyId) {
    this.currencyId = currencyId;
  }


  public UserDto phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public UserDto publicIdentifier(String publicIdentifier) {
    this.publicIdentifier = publicIdentifier;
    return this;
  }

  /**
   * Get publicIdentifier
   * @return publicIdentifier
   */
  @javax.annotation.Nullable
  public String getPublicIdentifier() {
    return publicIdentifier;
  }

  public void setPublicIdentifier(String publicIdentifier) {
    this.publicIdentifier = publicIdentifier;
  }


  public UserDto identityProvider(String identityProvider) {
    this.identityProvider = identityProvider;
    return this;
  }

  /**
   * Get identityProvider
   * @return identityProvider
   */
  @javax.annotation.Nullable
  public String getIdentityProvider() {
    return identityProvider;
  }

  public void setIdentityProvider(String identityProvider) {
    this.identityProvider = identityProvider;
  }


  public UserDto phoneNumberConfirmed(Boolean phoneNumberConfirmed) {
    this.phoneNumberConfirmed = phoneNumberConfirmed;
    return this;
  }

  /**
   * Get phoneNumberConfirmed
   * @return phoneNumberConfirmed
   */
  @javax.annotation.Nullable
  public Boolean getPhoneNumberConfirmed() {
    return phoneNumberConfirmed;
  }

  public void setPhoneNumberConfirmed(Boolean phoneNumberConfirmed) {
    this.phoneNumberConfirmed = phoneNumberConfirmed;
  }


  public UserDto emailConfirmed(Boolean emailConfirmed) {
    this.emailConfirmed = emailConfirmed;
    return this;
  }

  /**
   * Get emailConfirmed
   * @return emailConfirmed
   */
  @javax.annotation.Nullable
  public Boolean getEmailConfirmed() {
    return emailConfirmed;
  }

  public void setEmailConfirmed(Boolean emailConfirmed) {
    this.emailConfirmed = emailConfirmed;
  }


  public UserDto availability(AvailabilityEnum availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Get availability
   * @return availability
   */
  @javax.annotation.Nullable
  public AvailabilityEnum getAvailability() {
    return availability;
  }

  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  public UserDto lockoutEnabled(Boolean lockoutEnabled) {
    this.lockoutEnabled = lockoutEnabled;
    return this;
  }

  /**
   * Get lockoutEnabled
   * @return lockoutEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLockoutEnabled() {
    return lockoutEnabled;
  }

  public void setLockoutEnabled(Boolean lockoutEnabled) {
    this.lockoutEnabled = lockoutEnabled;
  }


  public UserDto lockoutEnd(OffsetDateTime lockoutEnd) {
    this.lockoutEnd = lockoutEnd;
    return this;
  }

  /**
   * Get lockoutEnd
   * @return lockoutEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLockoutEnd() {
    return lockoutEnd;
  }

  public void setLockoutEnd(OffsetDateTime lockoutEnd) {
    this.lockoutEnd = lockoutEnd;
  }


  public UserDto enrollmentsCount(Integer enrollmentsCount) {
    this.enrollmentsCount = enrollmentsCount;
    return this;
  }

  /**
   * Get enrollmentsCount
   * @return enrollmentsCount
   */
  @javax.annotation.Nullable
  public Integer getEnrollmentsCount() {
    return enrollmentsCount;
  }

  public void setEnrollmentsCount(Integer enrollmentsCount) {
    this.enrollmentsCount = enrollmentsCount;
  }


  public UserDto siteTheme(SiteThemeEnum siteTheme) {
    this.siteTheme = siteTheme;
    return this;
  }

  /**
   * Get siteTheme
   * @return siteTheme
   */
  @javax.annotation.Nullable
  public SiteThemeEnum getSiteTheme() {
    return siteTheme;
  }

  public void setSiteTheme(SiteThemeEnum siteTheme) {
    this.siteTheme = siteTheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDto userDto = (UserDto) o;
    return Objects.equals(this.id, userDto.id) &&
        Objects.equals(this.timestamp, userDto.timestamp) &&
        Objects.equals(this.fullName, userDto.fullName) &&
        Objects.equals(this.qualifiedName, userDto.qualifiedName) &&
        Objects.equals(this.publicName, userDto.publicName) &&
        Objects.equals(this.lastName, userDto.lastName) &&
        Objects.equals(this.firstName, userDto.firstName) &&
        Objects.equals(this.coverUrl, userDto.coverUrl) &&
        Objects.equals(this.avatarUrl, userDto.avatarUrl) &&
        Objects.equals(this.gitHubUrl, userDto.gitHubUrl) &&
        Objects.equals(this.countryId, userDto.countryId) &&
        Objects.equals(this.timezoneId, userDto.timezoneId) &&
        Objects.equals(this.websiteUrl, userDto.websiteUrl) &&
        Objects.equals(this.twitterUrl, userDto.twitterUrl) &&
        Objects.equals(this.youTubeUrl, userDto.youTubeUrl) &&
        Objects.equals(this.linkedInUrl, userDto.linkedInUrl) &&
        Objects.equals(this.facebookUrl, userDto.facebookUrl) &&
        Objects.equals(this.instagramUrl, userDto.instagramUrl) &&
        Objects.equals(this.socialProfileId, userDto.socialProfileId) &&
        Objects.equals(this.birthday, userDto.birthday) &&
        Objects.equals(this.idProvider, userDto.idProvider) &&
        Objects.equals(this.languageId, userDto.languageId) &&
        Objects.equals(this.gender, userDto.gender) &&
        Objects.equals(this.cityId, userDto.cityId) &&
        Objects.equals(this.stateId, userDto.stateId) &&
        Objects.equals(this.email, userDto.email) &&
        Objects.equals(this.about, userDto.about) &&
        Objects.equals(this.jobTitle, userDto.jobTitle) &&
        Objects.equals(this.socialFeedId, userDto.socialFeedId) &&
        Objects.equals(this.currentTenantId, userDto.currentTenantId) &&
        Objects.equals(this.currentEnrollmentId, userDto.currentEnrollmentId) &&
        Objects.equals(this.status, userDto.status) &&
        Objects.equals(this.cartId, userDto.cartId) &&
        Objects.equals(this.walletId, userDto.walletId) &&
        Objects.equals(this.userName, userDto.userName) &&
        Objects.equals(this.currencyId, userDto.currencyId) &&
        Objects.equals(this.phoneNumber, userDto.phoneNumber) &&
        Objects.equals(this.publicIdentifier, userDto.publicIdentifier) &&
        Objects.equals(this.identityProvider, userDto.identityProvider) &&
        Objects.equals(this.phoneNumberConfirmed, userDto.phoneNumberConfirmed) &&
        Objects.equals(this.emailConfirmed, userDto.emailConfirmed) &&
        Objects.equals(this.availability, userDto.availability) &&
        Objects.equals(this.lockoutEnabled, userDto.lockoutEnabled) &&
        Objects.equals(this.lockoutEnd, userDto.lockoutEnd) &&
        Objects.equals(this.enrollmentsCount, userDto.enrollmentsCount) &&
        Objects.equals(this.siteTheme, userDto.siteTheme);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, fullName, qualifiedName, publicName, lastName, firstName, coverUrl, avatarUrl, gitHubUrl, countryId, timezoneId, websiteUrl, twitterUrl, youTubeUrl, linkedInUrl, facebookUrl, instagramUrl, socialProfileId, birthday, idProvider, languageId, gender, cityId, stateId, email, about, jobTitle, socialFeedId, currentTenantId, currentEnrollmentId, status, cartId, walletId, userName, currencyId, phoneNumber, publicIdentifier, identityProvider, phoneNumberConfirmed, emailConfirmed, availability, lockoutEnabled, lockoutEnd, enrollmentsCount, siteTheme);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    qualifiedName: ").append(toIndentedString(qualifiedName)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    coverUrl: ").append(toIndentedString(coverUrl)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    gitHubUrl: ").append(toIndentedString(gitHubUrl)).append("\n");
    sb.append("    countryId: ").append(toIndentedString(countryId)).append("\n");
    sb.append("    timezoneId: ").append(toIndentedString(timezoneId)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    twitterUrl: ").append(toIndentedString(twitterUrl)).append("\n");
    sb.append("    youTubeUrl: ").append(toIndentedString(youTubeUrl)).append("\n");
    sb.append("    linkedInUrl: ").append(toIndentedString(linkedInUrl)).append("\n");
    sb.append("    facebookUrl: ").append(toIndentedString(facebookUrl)).append("\n");
    sb.append("    instagramUrl: ").append(toIndentedString(instagramUrl)).append("\n");
    sb.append("    socialProfileId: ").append(toIndentedString(socialProfileId)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    idProvider: ").append(toIndentedString(idProvider)).append("\n");
    sb.append("    languageId: ").append(toIndentedString(languageId)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    cityId: ").append(toIndentedString(cityId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    socialFeedId: ").append(toIndentedString(socialFeedId)).append("\n");
    sb.append("    currentTenantId: ").append(toIndentedString(currentTenantId)).append("\n");
    sb.append("    currentEnrollmentId: ").append(toIndentedString(currentEnrollmentId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    walletId: ").append(toIndentedString(walletId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    publicIdentifier: ").append(toIndentedString(publicIdentifier)).append("\n");
    sb.append("    identityProvider: ").append(toIndentedString(identityProvider)).append("\n");
    sb.append("    phoneNumberConfirmed: ").append(toIndentedString(phoneNumberConfirmed)).append("\n");
    sb.append("    emailConfirmed: ").append(toIndentedString(emailConfirmed)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    lockoutEnabled: ").append(toIndentedString(lockoutEnabled)).append("\n");
    sb.append("    lockoutEnd: ").append(toIndentedString(lockoutEnd)).append("\n");
    sb.append("    enrollmentsCount: ").append(toIndentedString(enrollmentsCount)).append("\n");
    sb.append("    siteTheme: ").append(toIndentedString(siteTheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("fullName");
    openapiFields.add("qualifiedName");
    openapiFields.add("publicName");
    openapiFields.add("lastName");
    openapiFields.add("firstName");
    openapiFields.add("coverUrl");
    openapiFields.add("avatarUrl");
    openapiFields.add("gitHubUrl");
    openapiFields.add("countryId");
    openapiFields.add("timezoneId");
    openapiFields.add("websiteUrl");
    openapiFields.add("twitterUrl");
    openapiFields.add("youTubeUrl");
    openapiFields.add("linkedInUrl");
    openapiFields.add("facebookUrl");
    openapiFields.add("instagramUrl");
    openapiFields.add("socialProfileId");
    openapiFields.add("birthday");
    openapiFields.add("idProvider");
    openapiFields.add("languageId");
    openapiFields.add("gender");
    openapiFields.add("cityId");
    openapiFields.add("stateId");
    openapiFields.add("email");
    openapiFields.add("about");
    openapiFields.add("jobTitle");
    openapiFields.add("socialFeedId");
    openapiFields.add("currentTenantId");
    openapiFields.add("currentEnrollmentId");
    openapiFields.add("status");
    openapiFields.add("cartId");
    openapiFields.add("walletId");
    openapiFields.add("userName");
    openapiFields.add("currencyId");
    openapiFields.add("phoneNumber");
    openapiFields.add("publicIdentifier");
    openapiFields.add("identityProvider");
    openapiFields.add("phoneNumberConfirmed");
    openapiFields.add("emailConfirmed");
    openapiFields.add("availability");
    openapiFields.add("lockoutEnabled");
    openapiFields.add("lockoutEnd");
    openapiFields.add("enrollmentsCount");
    openapiFields.add("siteTheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDto is not found in the empty JSON string", UserDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("qualifiedName") != null && !jsonObj.get("qualifiedName").isJsonNull()) && !jsonObj.get("qualifiedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qualifiedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qualifiedName").toString()));
      }
      if ((jsonObj.get("publicName") != null && !jsonObj.get("publicName").isJsonNull()) && !jsonObj.get("publicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("coverUrl") != null && !jsonObj.get("coverUrl").isJsonNull()) && !jsonObj.get("coverUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverUrl").toString()));
      }
      if ((jsonObj.get("avatarUrl") != null && !jsonObj.get("avatarUrl").isJsonNull()) && !jsonObj.get("avatarUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarUrl").toString()));
      }
      if ((jsonObj.get("gitHubUrl") != null && !jsonObj.get("gitHubUrl").isJsonNull()) && !jsonObj.get("gitHubUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitHubUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitHubUrl").toString()));
      }
      if ((jsonObj.get("countryId") != null && !jsonObj.get("countryId").isJsonNull()) && !jsonObj.get("countryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryId").toString()));
      }
      if ((jsonObj.get("timezoneId") != null && !jsonObj.get("timezoneId").isJsonNull()) && !jsonObj.get("timezoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezoneId").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
      if ((jsonObj.get("twitterUrl") != null && !jsonObj.get("twitterUrl").isJsonNull()) && !jsonObj.get("twitterUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitterUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitterUrl").toString()));
      }
      if ((jsonObj.get("youTubeUrl") != null && !jsonObj.get("youTubeUrl").isJsonNull()) && !jsonObj.get("youTubeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `youTubeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("youTubeUrl").toString()));
      }
      if ((jsonObj.get("linkedInUrl") != null && !jsonObj.get("linkedInUrl").isJsonNull()) && !jsonObj.get("linkedInUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedInUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedInUrl").toString()));
      }
      if ((jsonObj.get("facebookUrl") != null && !jsonObj.get("facebookUrl").isJsonNull()) && !jsonObj.get("facebookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facebookUrl").toString()));
      }
      if ((jsonObj.get("instagramUrl") != null && !jsonObj.get("instagramUrl").isJsonNull()) && !jsonObj.get("instagramUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instagramUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instagramUrl").toString()));
      }
      if ((jsonObj.get("socialProfileId") != null && !jsonObj.get("socialProfileId").isJsonNull()) && !jsonObj.get("socialProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialProfileId").toString()));
      }
      if ((jsonObj.get("idProvider") != null && !jsonObj.get("idProvider").isJsonNull()) && !jsonObj.get("idProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idProvider").toString()));
      }
      if ((jsonObj.get("languageId") != null && !jsonObj.get("languageId").isJsonNull()) && !jsonObj.get("languageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageId").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("cityId") != null && !jsonObj.get("cityId").isJsonNull()) && !jsonObj.get("cityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityId").toString()));
      }
      if ((jsonObj.get("stateId") != null && !jsonObj.get("stateId").isJsonNull()) && !jsonObj.get("stateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if ((jsonObj.get("socialFeedId") != null && !jsonObj.get("socialFeedId").isJsonNull()) && !jsonObj.get("socialFeedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialFeedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialFeedId").toString()));
      }
      if ((jsonObj.get("currentTenantId") != null && !jsonObj.get("currentTenantId").isJsonNull()) && !jsonObj.get("currentTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentTenantId").toString()));
      }
      if ((jsonObj.get("currentEnrollmentId") != null && !jsonObj.get("currentEnrollmentId").isJsonNull()) && !jsonObj.get("currentEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentEnrollmentId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("cartId") != null && !jsonObj.get("cartId").isJsonNull()) && !jsonObj.get("cartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartId").toString()));
      }
      if ((jsonObj.get("walletId") != null && !jsonObj.get("walletId").isJsonNull()) && !jsonObj.get("walletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletId").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("currencyId") != null && !jsonObj.get("currencyId").isJsonNull()) && !jsonObj.get("currencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyId").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("publicIdentifier") != null && !jsonObj.get("publicIdentifier").isJsonNull()) && !jsonObj.get("publicIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIdentifier").toString()));
      }
      if ((jsonObj.get("identityProvider") != null && !jsonObj.get("identityProvider").isJsonNull()) && !jsonObj.get("identityProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityProvider").toString()));
      }
      // validate the optional field `availability`
      if (jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) {
        AvailabilityEnum.validateJsonElement(jsonObj.get("availability"));
      }
      // validate the optional field `siteTheme`
      if (jsonObj.get("siteTheme") != null && !jsonObj.get("siteTheme").isJsonNull()) {
        SiteThemeEnum.validateJsonElement(jsonObj.get("siteTheme"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDto>() {
           @Override
           public void write(JsonWriter out, UserDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDto
   * @throws IOException if the JSON string is invalid with respect to UserDto
   */
  public static UserDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDto.class);
  }

  /**
   * Convert an instance of UserDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

