/*
 * HolderService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserSettingsUpdateDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-05T15:36:07.227137-05:00[America/Bogota]", comments = "Generator version: 7.9.0")
public class UserSettingsUpdateDto {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_CURRENCY_FORMAT = "currencyFormat";
  @SerializedName(SERIALIZED_NAME_CURRENCY_FORMAT)
  private String currencyFormat;

  public static final String SERIALIZED_NAME_DATE_TIME_FORMAT = "dateTimeFormat";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FORMAT)
  private String dateTimeFormat;

  /**
   * Gets or Sets siteTheme
   */
  @JsonAdapter(SiteThemeEnum.Adapter.class)
  public enum SiteThemeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    SiteThemeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SiteThemeEnum fromValue(Integer value) {
      for (SiteThemeEnum b : SiteThemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SiteThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SiteThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SiteThemeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SiteThemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SiteThemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SITE_THEME = "siteTheme";
  @SerializedName(SERIALIZED_NAME_SITE_THEME)
  private SiteThemeEnum siteTheme;

  public UserSettingsUpdateDto() {
  }

  public UserSettingsUpdateDto pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * minimum: 0
   * maximum: 1000
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public UserSettingsUpdateDto dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nonnull
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public UserSettingsUpdateDto currencyFormat(String currencyFormat) {
    this.currencyFormat = currencyFormat;
    return this;
  }

  /**
   * Get currencyFormat
   * @return currencyFormat
   */
  @javax.annotation.Nonnull
  public String getCurrencyFormat() {
    return currencyFormat;
  }

  public void setCurrencyFormat(String currencyFormat) {
    this.currencyFormat = currencyFormat;
  }


  public UserSettingsUpdateDto dateTimeFormat(String dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
    return this;
  }

  /**
   * Get dateTimeFormat
   * @return dateTimeFormat
   */
  @javax.annotation.Nonnull
  public String getDateTimeFormat() {
    return dateTimeFormat;
  }

  public void setDateTimeFormat(String dateTimeFormat) {
    this.dateTimeFormat = dateTimeFormat;
  }


  public UserSettingsUpdateDto siteTheme(SiteThemeEnum siteTheme) {
    this.siteTheme = siteTheme;
    return this;
  }

  /**
   * Get siteTheme
   * @return siteTheme
   */
  @javax.annotation.Nonnull
  public SiteThemeEnum getSiteTheme() {
    return siteTheme;
  }

  public void setSiteTheme(SiteThemeEnum siteTheme) {
    this.siteTheme = siteTheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSettingsUpdateDto userSettingsUpdateDto = (UserSettingsUpdateDto) o;
    return Objects.equals(this.pageSize, userSettingsUpdateDto.pageSize) &&
        Objects.equals(this.dateFormat, userSettingsUpdateDto.dateFormat) &&
        Objects.equals(this.currencyFormat, userSettingsUpdateDto.currencyFormat) &&
        Objects.equals(this.dateTimeFormat, userSettingsUpdateDto.dateTimeFormat) &&
        Objects.equals(this.siteTheme, userSettingsUpdateDto.siteTheme);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, dateFormat, currencyFormat, dateTimeFormat, siteTheme);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSettingsUpdateDto {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    currencyFormat: ").append(toIndentedString(currencyFormat)).append("\n");
    sb.append("    dateTimeFormat: ").append(toIndentedString(dateTimeFormat)).append("\n");
    sb.append("    siteTheme: ").append(toIndentedString(siteTheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageSize");
    openapiFields.add("dateFormat");
    openapiFields.add("currencyFormat");
    openapiFields.add("dateTimeFormat");
    openapiFields.add("siteTheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dateFormat");
    openapiRequiredFields.add("currencyFormat");
    openapiRequiredFields.add("dateTimeFormat");
    openapiRequiredFields.add("siteTheme");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSettingsUpdateDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSettingsUpdateDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSettingsUpdateDto is not found in the empty JSON string", UserSettingsUpdateDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSettingsUpdateDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSettingsUpdateDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserSettingsUpdateDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFormat").toString()));
      }
      if (!jsonObj.get("currencyFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyFormat").toString()));
      }
      if (!jsonObj.get("dateTimeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeFormat").toString()));
      }
      // validate the required field `siteTheme`
      SiteThemeEnum.validateJsonElement(jsonObj.get("siteTheme"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSettingsUpdateDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSettingsUpdateDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSettingsUpdateDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSettingsUpdateDto.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSettingsUpdateDto>() {
           @Override
           public void write(JsonWriter out, UserSettingsUpdateDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSettingsUpdateDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSettingsUpdateDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSettingsUpdateDto
   * @throws IOException if the JSON string is invalid with respect to UserSettingsUpdateDto
   */
  public static UserSettingsUpdateDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSettingsUpdateDto.class);
  }

  /**
   * Convert an instance of UserSettingsUpdateDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

