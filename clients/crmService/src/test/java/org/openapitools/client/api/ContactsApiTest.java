/*
 * CrmService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.1.4089
 * Contact: support@fenix-alliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CartDtoEnvelope;
import org.openapitools.client.model.ContactCreateDto;
import org.openapitools.client.model.ContactDto;
import org.openapitools.client.model.ContactDtoEnvelope;
import org.openapitools.client.model.ContactDtoListEnvelope;
import org.openapitools.client.model.ContactProfileDtoListEnvelope;
import org.openapitools.client.model.ContactUpdateDto;
import org.openapitools.client.model.EmptyEnvelope;
import org.openapitools.client.model.ErrorEnvelope;
import org.openapitools.client.model.ExtendedContactDtoEnvelope;
import org.openapitools.client.model.ExtendedContactDtoListEnvelope;
import java.io.File;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.SocialProfileDtoEnvelope;
import java.util.UUID;
import org.openapitools.client.model.WalletDtoEnvelope;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Disabled
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    /**
     * Create a new contact
     *
     * Create a new contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactCreateDto contactCreateDto = null;
        EmptyEnvelope response = api.createContactAsync(tenantId, apiVersion, xApiVersion, contactCreateDto);
        // TODO: test validations
    }

    /**
     * Delete a contact
     *
     * Delete a contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.deleteContactAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a Contact of type Individual by ID
     *
     * Get a Contact of type Individual by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedIndividualAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoEnvelope response = api.getBusinessOwnedIndividualAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type individual
     *
     * Get all contacts of type individual
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedIndividualsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getBusinessOwnedIndividualsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type individual count
     *
     * Get all contacts of type individual count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedIndividualsCountAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getBusinessOwnedIndividualsCountAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a Contact of type Organization by ID
     *
     * Get a Contact of type Organization by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedOrganizationAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoEnvelope response = api.getBusinessOwnedOrganizationAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type organization
     *
     * Get all contacts of type organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedOrganizationsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        List<ContactDto> response = api.getBusinessOwnedOrganizationsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type organization count
     *
     * Get all contacts of type organization count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBusinessOwnedOrganizationsCountAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getBusinessOwnedOrganizationsCountAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact by ID
     *
     * Get a contact by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoEnvelope response = api.getContactAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact&#39;s avatar
     *
     * Get a contact&#39;s avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactAvatarAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        EmptyEnvelope response = api.getContactAvatarAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact&#39;s cart
     *
     * Get a contact&#39;s cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactCartAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        CartDtoEnvelope response = api.getContactCartAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact&#39;s social profiles
     *
     * Get a contact&#39;s social profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactProfilesAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactProfileDtoListEnvelope response = api.getContactProfilesAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact&#39;s social profile
     *
     * Get a contact&#39;s social profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactSocialProfileAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        SocialProfileDtoEnvelope response = api.getContactSocialProfileAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact&#39;s wallet
     *
     * Get a contact&#39;s wallet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactWalletAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        WalletDtoEnvelope response = api.getContactWalletAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all business owned contacts
     *
     * Get all business owned contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getContactsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all business owned contacts count
     *
     * Get all business owned contacts count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactsCountAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getContactsCountAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type individual
     *
     * Get all contacts of type individual
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedBusinessOwnedIndividualsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedContactDtoListEnvelope response = api.getExtendedBusinessOwnedIndividualsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all contacts of type organization
     *
     * Get all contacts of type organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedBusinessOwnedOrganizationsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedContactDtoListEnvelope response = api.getExtendedBusinessOwnedOrganizationsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get a contact by ID
     *
     * Get a contact by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedContactDtoEnvelope response = api.getExtendedContactAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get all business owned contacts
     *
     * Get all business owned contacts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExtendedContactsAsyncTest() throws ApiException {
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ExtendedContactDtoListEnvelope response = api.getExtendedContactsAsync(tenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get individual related individuals
     *
     * Get individual related individuals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndividualRelatedIndividualsAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getIndividualRelatedIndividualsAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get individual related organizations
     *
     * Get individual related organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndividualRelatedOrganizationsAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getIndividualRelatedOrganizationsAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get organization related individuals
     *
     * Get organization related individuals
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationRelatedIndividualsAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getOrganizationRelatedIndividualsAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Get organization related organizations
     *
     * Get organization related organizations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationRelatedOrganizationsAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoListEnvelope response = api.getOrganizationRelatedOrganizationsAsync(tenantId, contactId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Patch a contact
     *
     * Patch a contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        List<Operation> operation = null;
        EmptyEnvelope response = api.patchContactAsync(tenantId, contactId, apiVersion, xApiVersion, operation);
        // TODO: test validations
    }

    /**
     * Update a contact
     *
     * Update a contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID contactId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactUpdateDto contactUpdateDto = null;
        EmptyEnvelope response = api.updateContactAsync(tenantId, contactId, apiVersion, xApiVersion, contactUpdateDto);
        // TODO: test validations
    }

    /**
     * Update a contact&#39;s avatar
     *
     * Update a contact&#39;s avatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactAvatarAsyncTest() throws ApiException {
        UUID contactId = null;
        UUID tenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        File avatar = null;
        EmptyEnvelope response = api.updateContactAvatarAsync(contactId, tenantId, apiVersion, xApiVersion, avatar);
        // TODO: test validations
    }

    /**
     * Upsert a tenant onto another tenant&#39;s contact list
     *
     * Upsert a tenant onto another tenant&#39;s contact list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertTenantOntoAnotherTenantContactListAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID relatedTenantId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoEnvelope response = api.upsertTenantOntoAnotherTenantContactListAsync(tenantId, relatedTenantId, apiVersion, xApiVersion);
        // TODO: test validations
    }

    /**
     * Upsert a user onto a tenant&#39;s contact list
     *
     * Upsert a user onto a tenant&#39;s contact list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertUserOntoAnotherTenantContactListAsyncTest() throws ApiException {
        UUID tenantId = null;
        UUID relatedUserId = null;
        String apiVersion = null;
        String xApiVersion = null;
        ContactDtoEnvelope response = api.upsertUserOntoAnotherTenantContactListAsync(tenantId, relatedUserId, apiVersion, xApiVersion);
        // TODO: test validations
    }

}
